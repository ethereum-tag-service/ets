{
  "address": "0x945D2C0228dC1Cc872040494Df185629e764b54c",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "previousAdmin",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newAdmin",
          "type": "address"
        }
      ],
      "name": "AdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "auctionId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "extended",
          "type": "bool"
        }
      ],
      "name": "AuctionBid",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "auctionId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenAuctionNumber",
          "type": "uint256"
        }
      ],
      "name": "AuctionCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "duration",
          "type": "uint256"
        }
      ],
      "name": "AuctionDurationSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "auctionId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "endTime",
          "type": "uint256"
        }
      ],
      "name": "AuctionExtended",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "minBidIncrementPercentagePrice",
          "type": "uint8"
        }
      ],
      "name": "AuctionMinBidIncrementPercentageSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "platformPercentage",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "relayerPercentage",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "creatorPercentage",
          "type": "uint256"
        }
      ],
      "name": "AuctionProceedPercentagesSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "who",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "AuctionProceedsWithdrawn",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "reservePrice",
          "type": "uint256"
        }
      ],
      "name": "AuctionReservePriceSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "auctionId",
          "type": "uint256"
        }
      ],
      "name": "AuctionSettled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timeBuffer",
          "type": "uint256"
        }
      ],
      "name": "AuctionTimeBufferSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "maxAuctions",
          "type": "uint256"
        }
      ],
      "name": "AuctionsMaxSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "beacon",
          "type": "address"
        }
      ],
      "name": "BeaconUpgraded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "RequestCreateAuction",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "implementation",
          "type": "address"
        }
      ],
      "name": "Upgraded",
      "type": "event"
    },
    {
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "inputs": [],
      "name": "MODULO",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "NAME",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "VERSION",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "accrued",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_auctionId",
          "type": "uint256"
        }
      ],
      "name": "auctionEnded",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_auctionId",
          "type": "uint256"
        }
      ],
      "name": "auctionExists",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "auctionExistsForTokenId",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_auctionId",
          "type": "uint256"
        }
      ],
      "name": "auctionSettled",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "auctions",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "auctionId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "startTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "endTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "reservePrice",
          "type": "uint256"
        },
        {
          "internalType": "address payable",
          "name": "bidder",
          "type": "address"
        },
        {
          "internalType": "address payable",
          "name": "auctioneer",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "settled",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "auctionsByTokenId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_auctionId",
          "type": "uint256"
        }
      ],
      "name": "createBid",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "createNextAuction",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "creatorPercentage",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "_account",
          "type": "address"
        }
      ],
      "name": "drawDown",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "duration",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "etsAccessControls",
      "outputs": [
        {
          "internalType": "contract IETSAccessControls",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "etsToken",
      "outputs": [
        {
          "internalType": "contract IETSToken",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "fulfillRequestCreateAuction",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getActiveCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_auctionId",
          "type": "uint256"
        }
      ],
      "name": "getAuction",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "auctionId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "startTime",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "endTime",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "reservePrice",
              "type": "uint256"
            },
            {
              "internalType": "address payable",
              "name": "bidder",
              "type": "address"
            },
            {
              "internalType": "address payable",
              "name": "auctioneer",
              "type": "address"
            },
            {
              "internalType": "bool",
              "name": "settled",
              "type": "bool"
            }
          ],
          "internalType": "struct IETSAuctionHouse.Auction",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "getAuctionCountForTokenId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "getAuctionForTokenId",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "auctionId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "startTime",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "endTime",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "reservePrice",
              "type": "uint256"
            },
            {
              "internalType": "address payable",
              "name": "bidder",
              "type": "address"
            },
            {
              "internalType": "address payable",
              "name": "auctioneer",
              "type": "address"
            },
            {
              "internalType": "bool",
              "name": "settled",
              "type": "bool"
            }
          ],
          "internalType": "struct IETSAuctionHouse.Auction",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTotalCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IETSToken",
          "name": "_etsToken",
          "type": "address"
        },
        {
          "internalType": "contract IETSAccessControls",
          "name": "_etsAccessControls",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_weth",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_maxAuctions",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_timeBuffer",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_reservePrice",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "_minBidIncrementPercentage",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "_duration",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_relayerPercentage",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_platformPercentage",
          "type": "uint256"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxAuctions",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minBidIncrementPercentage",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "paid",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "platformPercentage",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "proxiableUUID",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "relayerPercentage",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "reservePrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_duration",
          "type": "uint256"
        }
      ],
      "name": "setDuration",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_maxAuctions",
          "type": "uint256"
        }
      ],
      "name": "setMaxAuctions",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "_minBidIncrementPercentage",
          "type": "uint8"
        }
      ],
      "name": "setMinBidIncrementPercentage",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_platformPercentage",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_relayerPercentage",
          "type": "uint256"
        }
      ],
      "name": "setProceedPercentages",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_reservePrice",
          "type": "uint256"
        }
      ],
      "name": "setReservePrice",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_timeBuffer",
          "type": "uint256"
        }
      ],
      "name": "setTimeBuffer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_auctionId",
          "type": "uint256"
        }
      ],
      "name": "settleAuction",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_auctionId",
          "type": "uint256"
        }
      ],
      "name": "settleCurrentAndCreateNewAuction",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "timeBuffer",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        }
      ],
      "name": "totalDue",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_due",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        }
      ],
      "name": "upgradeTo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "upgradeToAndCall",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "weth",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "numDeployments": 1,
  "solcInputHash": "e471eeaea25ffae79d2822e7e98866a5",
  "metadata": "{\"compiler\":{\"version\":\"0.8.12+commit.f00d7308\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"auctionId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"extended\",\"type\":\"bool\"}],\"name\":\"AuctionBid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"auctionId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenAuctionNumber\",\"type\":\"uint256\"}],\"name\":\"AuctionCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"}],\"name\":\"AuctionDurationSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"auctionId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"}],\"name\":\"AuctionExtended\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"minBidIncrementPercentagePrice\",\"type\":\"uint8\"}],\"name\":\"AuctionMinBidIncrementPercentageSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"platformPercentage\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"relayerPercentage\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"creatorPercentage\",\"type\":\"uint256\"}],\"name\":\"AuctionProceedPercentagesSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"AuctionProceedsWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reservePrice\",\"type\":\"uint256\"}],\"name\":\"AuctionReservePriceSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"auctionId\",\"type\":\"uint256\"}],\"name\":\"AuctionSettled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timeBuffer\",\"type\":\"uint256\"}],\"name\":\"AuctionTimeBufferSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxAuctions\",\"type\":\"uint256\"}],\"name\":\"AuctionsMaxSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\"}],\"name\":\"BeaconUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"RequestCreateAuction\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"MODULO\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"NAME\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"VERSION\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"accrued\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_auctionId\",\"type\":\"uint256\"}],\"name\":\"auctionEnded\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_auctionId\",\"type\":\"uint256\"}],\"name\":\"auctionExists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"auctionExistsForTokenId\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_auctionId\",\"type\":\"uint256\"}],\"name\":\"auctionSettled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"auctions\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"auctionId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reservePrice\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"bidder\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"auctioneer\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"settled\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"auctionsByTokenId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_auctionId\",\"type\":\"uint256\"}],\"name\":\"createBid\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"createNextAuction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"creatorPercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"drawDown\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"duration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"etsAccessControls\",\"outputs\":[{\"internalType\":\"contract IETSAccessControls\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"etsToken\",\"outputs\":[{\"internalType\":\"contract IETSToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"fulfillRequestCreateAuction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getActiveCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_auctionId\",\"type\":\"uint256\"}],\"name\":\"getAuction\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"auctionId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reservePrice\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"bidder\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"auctioneer\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"settled\",\"type\":\"bool\"}],\"internalType\":\"struct IETSAuctionHouse.Auction\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getAuctionCountForTokenId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getAuctionForTokenId\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"auctionId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reservePrice\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"bidder\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"auctioneer\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"settled\",\"type\":\"bool\"}],\"internalType\":\"struct IETSAuctionHouse.Auction\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IETSToken\",\"name\":\"_etsToken\",\"type\":\"address\"},{\"internalType\":\"contract IETSAccessControls\",\"name\":\"_etsAccessControls\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_weth\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_maxAuctions\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_timeBuffer\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_reservePrice\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"_minBidIncrementPercentage\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_duration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_relayerPercentage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_platformPercentage\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxAuctions\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minBidIncrementPercentage\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"paid\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"platformPercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxiableUUID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"relayerPercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reservePrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_duration\",\"type\":\"uint256\"}],\"name\":\"setDuration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxAuctions\",\"type\":\"uint256\"}],\"name\":\"setMaxAuctions\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_minBidIncrementPercentage\",\"type\":\"uint8\"}],\"name\":\"setMinBidIncrementPercentage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_platformPercentage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_relayerPercentage\",\"type\":\"uint256\"}],\"name\":\"setProceedPercentages\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_reservePrice\",\"type\":\"uint256\"}],\"name\":\"setReservePrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_timeBuffer\",\"type\":\"uint256\"}],\"name\":\"setTimeBuffer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_auctionId\",\"type\":\"uint256\"}],\"name\":\"settleAuction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_auctionId\",\"type\":\"uint256\"}],\"name\":\"settleCurrentAndCreateNewAuction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"timeBuffer\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"totalDue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_due\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"upgradeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"weth\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"author\":\"Ethereum Tag Service <team@ets.xyz>\",\"kind\":\"dev\",\"methods\":{\"constructor\":{\"custom:oz-upgrades-unsafe-allow\":\"constructor\"},\"drawDown(address)\":{\"params\":{\"_account\":\"Address of account being drawn down and which will receive the funds.\"}},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"proxiableUUID()\":{\"details\":\"Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate the implementation's compatibility when performing an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\"},\"settleAuction(uint256)\":{\"details\":\"This function can only be called when the contract is paused.\"},\"upgradeTo(address)\":{\"custom:oz-upgrades-unsafe-allow-reachable\":\"delegatecall\",\"details\":\"Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"},\"upgradeToAndCall(address,bytes)\":{\"custom:oz-upgrades-unsafe-allow-reachable\":\"delegatecall\",\"details\":\"Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"}},\"stateVariables\":{\"accrued\":{\"details\":\"Map for holding amount accrued to participant address wallets.\"},\"auctions\":{\"details\":\"Mapping of auction ID to auction.\"},\"auctionsByTokenId\":{\"details\":\"Mapping of tokenId to array of auction ids.\"},\"creatorPercentage\":{\"details\":\"Percentage of auction proceeds allocated to CTAG Creator\"},\"duration\":{\"details\":\"The duration of a single auction\"},\"minBidIncrementPercentage\":{\"details\":\"The minimum percentage difference between the last bid amount and the current bid\"},\"paid\":{\"details\":\"Map for holding lifetime amount drawn down from accrued by participants.\"},\"platformPercentage\":{\"details\":\"Percentage of auction proceeds allocated to ETS.\"},\"relayerPercentage\":{\"details\":\"Percentage of auction proceeds allocated to CTAG Relayer.\"},\"reservePrice\":{\"details\":\"The minimum price accepted in an auction\"},\"timeBuffer\":{\"details\":\"The minimum amount of time left in an auction after a new bid is created\"},\"weth\":{\"details\":\"The address of the WETH contract\"}},\"title\":\"ETSAuctionHouse\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"NAME()\":{\"notice\":\"Public constants\"},\"drawDown(address)\":{\"notice\":\"Function for withdrawing funds from an accrual account. Can be called by the account owner or on behalf of the account. Does nothing when there is nothing due to the account.\"},\"maxAuctions()\":{\"notice\":\"Public variables\"},\"settleAuction(uint256)\":{\"notice\":\"Settle the auction.\"},\"settleCurrentAndCreateNewAuction(uint256)\":{\"notice\":\"Settle auction, and release next auction.\"}},\"notice\":\"ETSAuctionHouse contract governs the sale of Ethereum Tag Service composable tags (CTAGs).\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/ETSAuctionHouse.sol\":\"ETSAuctionHouse\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControlUpgradeable {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0xb8f5302f12138c5561362e88a78d061573e6298b7a1a5afe84a1e2c8d4d5aeaa\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/interfaces/IERC1967Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (interfaces/IERC1967.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC-1967: Proxy Storage Slots. This interface contains the events defined in the ERC.\\n *\\n * _Available since v4.8.3._\\n */\\ninterface IERC1967Upgradeable {\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Emitted when the beacon is changed.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n}\\n\",\"keccak256\":\"0x47d6e06872b12e72c79d1b5eb55842f860b5fb1207b2317c2358d2766b950a7b\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822ProxiableUpgradeable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x77c89f893e403efc6929ba842b7ccf6534d4ffe03afe31670b4a528c0ad78c0f\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/ERC1967/ERC1967Upgrade.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeaconUpgradeable.sol\\\";\\nimport \\\"../../interfaces/IERC1967Upgradeable.sol\\\";\\nimport \\\"../../interfaces/draft-IERC1822Upgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../../utils/StorageSlotUpgradeable.sol\\\";\\nimport {Initializable} from \\\"../utils/Initializable.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract ERC1967UpgradeUpgradeable is Initializable, IERC1967Upgradeable {\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    function __ERC1967Upgrade_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC1967Upgrade_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(AddressUpgradeable.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(address newImplementation, bytes memory data, bool forceCall) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            AddressUpgradeable.functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallUUPS(address newImplementation, bytes memory data, bool forceCall) internal {\\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\\n        if (StorageSlotUpgradeable.getBooleanSlot(_ROLLBACK_SLOT).value) {\\n            _setImplementation(newImplementation);\\n        } else {\\n            try IERC1822ProxiableUpgradeable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n                require(slot == _IMPLEMENTATION_SLOT, \\\"ERC1967Upgrade: unsupported proxiableUUID\\\");\\n            } catch {\\n                revert(\\\"ERC1967Upgrade: new implementation is not UUPS\\\");\\n            }\\n            _upgradeToAndCall(newImplementation, data, forceCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(AddressUpgradeable.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            AddressUpgradeable.isContract(IBeaconUpgradeable(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(address newBeacon, bytes memory data, bool forceCall) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            AddressUpgradeable.functionDelegateCall(IBeaconUpgradeable(newBeacon).implementation(), data);\\n        }\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x7795808e3899c805254e3ae58074b20f799b466e3f43e057e47bedee5fb771f8\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeaconUpgradeable {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0x24b86ac8c005b8c654fbf6ac34a5a4f61580d7273541e83e013e89d66fbf0908\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x89be10e757d242e9b18d5a32c9fbe2019f6d63052bbe46397a430a1d60d7f794\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/UUPSUpgradeable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../interfaces/draft-IERC1822Upgradeable.sol\\\";\\nimport \\\"../ERC1967/ERC1967UpgradeUpgradeable.sol\\\";\\nimport {Initializable} from \\\"./Initializable.sol\\\";\\n\\n/**\\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\\n *\\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\\n * `UUPSUpgradeable` with a custom implementation of upgrades.\\n *\\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract UUPSUpgradeable is Initializable, IERC1822ProxiableUpgradeable, ERC1967UpgradeUpgradeable {\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable state-variable-assignment\\n    address private immutable __self = address(this);\\n\\n    /**\\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\\n     * a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\\n     * function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\\n     * fail.\\n     */\\n    modifier onlyProxy() {\\n        require(address(this) != __self, \\\"Function must be called through delegatecall\\\");\\n        require(_getImplementation() == __self, \\\"Function must be called through active proxy\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Check that the execution is not being performed through a delegate call. This allows a function to be\\n     * callable on the implementing contract but not through proxies.\\n     */\\n    modifier notDelegated() {\\n        require(address(this) == __self, \\\"UUPSUpgradeable: must not be called through delegatecall\\\");\\n        _;\\n    }\\n\\n    function __UUPSUpgradeable_init() internal onlyInitializing {\\n    }\\n\\n    function __UUPSUpgradeable_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the\\n     * implementation. It is used to validate the implementation's compatibility when performing an upgrade.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\\n     */\\n    function proxiableUUID() external view virtual override notDelegated returns (bytes32) {\\n        return _IMPLEMENTATION_SLOT;\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     *\\n     * @custom:oz-upgrades-unsafe-allow-reachable delegatecall\\n     */\\n    function upgradeTo(address newImplementation) public virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, new bytes(0), false);\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\\n     * encoded in `data`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     *\\n     * @custom:oz-upgrades-unsafe-allow-reachable delegatecall\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes memory data) public payable virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, data, true);\\n    }\\n\\n    /**\\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\\n     * {upgradeTo} and {upgradeToAndCall}.\\n     *\\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\\n     *\\n     * ```solidity\\n     * function _authorizeUpgrade(address) internal override onlyOwner {}\\n     * ```\\n     */\\n    function _authorizeUpgrade(address newImplementation) internal virtual;\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xefb41f5c1a00249b7a99f0782f8c557865605426a3fb6e5fe9ae334293ae4f33\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    function __Pausable_init() internal onlyInitializing {\\n        __Pausable_init_unchained();\\n    }\\n\\n    function __Pausable_init_unchained() internal onlyInitializing {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xad32f6821f860555f9530902a65b54203a4f5db2117f4384ae47a124958078db\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == _ENTERED;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x2025ccf05f6f1f2fd4e078e552836f525a1864e3854ed555047cd732320ab29b\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x0e1f0f5f62f67a881cd1a9597acbc0a5e4071f3c2c10449a183b922ae7272e3f\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20PermitUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n *\\n * ==== Security Considerations\\n *\\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\\n * generally recommended is:\\n *\\n * ```solidity\\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\\n *     doThing(..., value);\\n * }\\n *\\n * function doThing(..., uint256 value) public {\\n *     token.safeTransferFrom(msg.sender, address(this), value);\\n *     ...\\n * }\\n * ```\\n *\\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\\n * {SafeERC20-safeTransferFrom}).\\n *\\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\\n * contracts should have entry points that don't rely on permit.\\n */\\ninterface IERC20PermitUpgradeable {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     *\\n     * CAUTION: See Security Considerations above.\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x07e881de3b9f6d2c07909f193f24b96c7fe4ea60013260f3f25aecd8bab3c2f8\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.3) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\nimport \\\"../extensions/IERC20PermitUpgradeable.sol\\\";\\nimport \\\"../../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20Upgradeable {\\n    using AddressUpgradeable for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20Upgradeable token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20Upgradeable token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20Upgradeable token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20Upgradeable token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20Upgradeable token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20Upgradeable token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20PermitUpgradeable token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20Upgradeable token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && AddressUpgradeable.isContract(address(token));\\n    }\\n}\\n\",\"keccak256\":\"0x23b997be73d3dd46885262704f0f8cfc7273fdadfe303d37969a9561373972b5\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721Upgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xbe63437e37e32162d5d11ea8f11a44378c092b4bcbb05b51a813fe4bf33297d4\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9c80f545915582e63fe206c6ce27cbe85a86fc10b9cd2a0e8c9488fb7c2ee422\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x75097e35253e7fb282ee4d7f27a80eaacfa759923185bf17302a89cbc059c5ef\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/CountersUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary CountersUpgradeable {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0x798741e231b22b81e2dd2eddaaf8832dee4baf5cd8e2dbaa5c1dd12a1c053c4d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._\\n * _Available since v4.9 for `string`, `bytes`._\\n */\\nlibrary StorageSlotUpgradeable {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x07ac95acad040f1fb1f6120dd0aa5f702db69446e95f82613721879d30de0908\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\"},\"contracts/ETSAuctionHouse.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\n/**\\n * @title ETS Auction House\\n * @author Ethereum Tag Service <team@ets.xyz>\\n *\\n *  \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\n *  \\u2588\\u2588\\u2554\\u2550\\u2550\\u2550\\u2550\\u255d\\u255a\\u2550\\u2550\\u2588\\u2588\\u2554\\u2550\\u2550\\u255d\\u2588\\u2588\\u2554\\u2550\\u2550\\u2550\\u2550\\u255d\\n *  \\u2588\\u2588\\u2588\\u2588\\u2588\\u2557     \\u2588\\u2588\\u2551   \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\n *  \\u2588\\u2588\\u2554\\u2550\\u2550\\u255d     \\u2588\\u2588\\u2551   \\u255a\\u2550\\u2550\\u2550\\u2550\\u2588\\u2588\\u2551\\n *  \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557   \\u2588\\u2588\\u2551   \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2551\\n *  \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d   \\u255a\\u2550\\u255d   \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\n *\\n * @notice ETSAuctionHouse.sol is a modified version of Nouns NounsAuctionHouse.sol:\\n * https://github.com/nounsDAO/nouns-monorepo/blob/master/packages/nouns-contracts/contracts/NounsAuctionHouse.sol\\n * which itself is a modified version of Zora AuctionHouse.sol\\n *\\n * AuctionHouse.sol source code Copyright Zora licensed under the GPL-3.0 license.\\n * With modifications by Ethereum Tag Service.\\n *\\n * ETS modification include enabling more than one concurrent auction via a protocol controlled\\n * setting and requiring a bid to start the auction timer.\\n */\\n\\npragma solidity ^0.8.6;\\n\\nimport { IWETH } from \\\"./interfaces/IWETH.sol\\\";\\nimport { IETSToken } from \\\"./interfaces/IETSToken.sol\\\";\\nimport { IETSAuctionHouse } from \\\"./interfaces/IETSAuctionHouse.sol\\\";\\nimport { IETSAccessControls } from \\\"./interfaces/IETSAccessControls.sol\\\";\\n\\nimport { Initializable } from \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport { UUPSUpgradeable } from \\\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\\\";\\nimport { PausableUpgradeable } from \\\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\\\";\\nimport { ReentrancyGuardUpgradeable } from \\\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\\\";\\n\\nimport { IERC20Upgradeable } from \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\nimport { SafeERC20Upgradeable } from \\\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\\\";\\nimport { CountersUpgradeable } from \\\"@openzeppelin/contracts-upgradeable/utils/CountersUpgradeable.sol\\\";\\n\\n/**\\n * @title ETSAuctionHouse\\n * @author Ethereum Tag Service <team@ets.xyz>\\n *\\n * @notice ETSAuctionHouse contract governs the sale of Ethereum Tag Service composable tags (CTAGs).\\n */\\ncontract ETSAuctionHouse is\\n    Initializable,\\n    PausableUpgradeable,\\n    ReentrancyGuardUpgradeable,\\n    IETSAuctionHouse,\\n    UUPSUpgradeable\\n{\\n    using CountersUpgradeable for CountersUpgradeable.Counter;\\n\\n    IETSToken public etsToken;\\n    IETSAccessControls public etsAccessControls;\\n\\n    /// Public constants\\n\\n    string public constant NAME = \\\"ETS Auction House\\\";\\n    string public constant VERSION = \\\"0.0.1\\\";\\n\\n    uint256 public constant MODULO = 100;\\n\\n    /// Public variables\\n    uint256 public maxAuctions;\\n\\n    // Open for bidding\\n    CountersUpgradeable.Counter activeAuctions;\\n\\n    // Unique auction id\\n    CountersUpgradeable.Counter auctionId;\\n\\n    /// @dev Mapping of auction ID to auction.\\n    mapping(uint256 => IETSAuctionHouse.Auction) public auctions;\\n\\n    /// @dev Mapping of tokenId to array of auction ids.\\n    mapping(uint256 => uint256[]) public auctionsByTokenId;\\n\\n    /// @dev Mapping from auctionId to the corresponding tagId\\n    //mapping(uint256 => uint256) public auctionIdToTokenId;\\n\\n    // Mapping from auctionId to the corresponding auction for each token\\n    //mapping(uint256 => mapping(uint256 => Auction)) public auctionIdToAuction;\\n\\n    /// @dev The address of the WETH contract\\n    address public weth;\\n\\n    /// @dev The minimum amount of time left in an auction after a new bid is created\\n    uint256 public timeBuffer;\\n\\n    /// @dev The minimum price accepted in an auction\\n    uint256 public reservePrice;\\n\\n    /// @dev The minimum percentage difference between the last bid amount and the current bid\\n    uint8 public minBidIncrementPercentage;\\n\\n    /// @dev The duration of a single auction\\n    uint256 public duration;\\n\\n    /// @dev Percentage of auction proceeds allocated to CTAG Creator\\n    uint256 public creatorPercentage;\\n\\n    /// @dev Percentage of auction proceeds allocated to CTAG Relayer.\\n    uint256 public relayerPercentage;\\n\\n    /// @dev Percentage of auction proceeds allocated to ETS.\\n    uint256 public platformPercentage;\\n\\n    /// @dev Map for holding amount accrued to participant address wallets.\\n    mapping(address => uint256) public accrued;\\n\\n    /// @dev Map for holding lifetime amount drawn down from accrued by participants.\\n    mapping(address => uint256) public paid;\\n\\n    /// Modifiers\\n\\n    modifier tagExists(uint256 tokenId) {\\n        require(etsToken.tagExistsById(tokenId), \\\"CTAG does not exist\\\");\\n        _;\\n    }\\n\\n    modifier platformOwned(uint256 tokenId) {\\n        // Returns \\\"ERC721: owner query for nonexistent token\\\" for non-existent token.\\n        require(etsToken.ownerOf(tokenId) == etsAccessControls.getPlatformAddress(), \\\"CTAG not owned by ETS\\\");\\n        _;\\n    }\\n\\n    modifier onlyAuctionOracle() {\\n        require(etsAccessControls.isAuctionOracle(_msgSender()), \\\"Caller not auction oracle\\\");\\n        _;\\n    }\\n\\n    modifier onlyAdmin() {\\n        require(etsAccessControls.isAdmin(_msgSender()), \\\"Caller must be administrator\\\");\\n        _;\\n    }\\n\\n    modifier onlyPlatform() {\\n        require(etsAccessControls.getPlatformAddress() == _msgSender(), \\\"Only platform may release CTAG\\\");\\n        _;\\n    }\\n\\n    // ============ UUPS INTERFACE ============\\n\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\n    constructor() {\\n        _disableInitializers();\\n    }\\n\\n    function initialize(\\n        IETSToken _etsToken,\\n        IETSAccessControls _etsAccessControls,\\n        address _weth,\\n        uint256 _maxAuctions,\\n        uint256 _timeBuffer,\\n        uint256 _reservePrice,\\n        uint8 _minBidIncrementPercentage,\\n        uint256 _duration,\\n        uint256 _relayerPercentage,\\n        uint256 _platformPercentage\\n    ) external initializer {\\n        __Pausable_init();\\n        __ReentrancyGuard_init();\\n\\n        _pause();\\n\\n        etsToken = _etsToken;\\n        etsAccessControls = _etsAccessControls;\\n        weth = _weth;\\n\\n        activeAuctions.reset();\\n        auctionId.reset();\\n\\n        setMaxAuctions(_maxAuctions);\\n        setMinBidIncrementPercentage(_minBidIncrementPercentage);\\n        setDuration(_duration);\\n        setReservePrice(_reservePrice);\\n        setTimeBuffer(_timeBuffer);\\n        setProceedPercentages(_platformPercentage, _relayerPercentage);\\n    }\\n\\n    // solhint-disable-next-line\\n    function _authorizeUpgrade(address) internal override onlyAdmin {}\\n\\n    // ============ OWNER/ADMIN INTERFACE ============\\n\\n    function pause() public onlyAdmin {\\n        _pause();\\n    }\\n\\n    function unpause() public onlyAdmin {\\n        _unpause();\\n    }\\n\\n    function setMaxAuctions(uint256 _maxAuctions) public onlyAdmin {\\n        maxAuctions = _maxAuctions;\\n        emit AuctionsMaxSet(_maxAuctions);\\n    }\\n\\n    function setDuration(uint256 _duration) public onlyAdmin {\\n        duration = _duration;\\n        emit AuctionDurationSet(_duration);\\n    }\\n\\n    function setMinBidIncrementPercentage(uint8 _minBidIncrementPercentage) public onlyAdmin {\\n        minBidIncrementPercentage = _minBidIncrementPercentage;\\n        emit AuctionMinBidIncrementPercentageSet(_minBidIncrementPercentage);\\n    }\\n\\n    function setReservePrice(uint256 _reservePrice) public onlyAdmin {\\n        reservePrice = _reservePrice;\\n        emit AuctionReservePriceSet(_reservePrice);\\n    }\\n\\n    function setTimeBuffer(uint256 _timeBuffer) public onlyAdmin {\\n        timeBuffer = _timeBuffer;\\n        emit AuctionTimeBufferSet(_timeBuffer);\\n    }\\n\\n    function setProceedPercentages(uint256 _platformPercentage, uint256 _relayerPercentage) public onlyAdmin {\\n        require(_platformPercentage + _relayerPercentage <= 100, \\\"Input must not exceed 100%\\\");\\n        platformPercentage = _platformPercentage;\\n        relayerPercentage = _relayerPercentage;\\n        creatorPercentage = MODULO - platformPercentage - relayerPercentage;\\n\\n        emit AuctionProceedPercentagesSet(platformPercentage, relayerPercentage, creatorPercentage);\\n    }\\n\\n    // ============ PUBLIC INTERFACE ============\\n\\n    /**\\n     * @notice Settle auction, and release next auction.\\n     */\\n    function settleCurrentAndCreateNewAuction(uint256 _auctionId) public nonReentrant whenNotPaused {\\n        _settleAuction(_auctionId);\\n        _requestCreateAuction();\\n    }\\n\\n    /**\\n     * @notice Settle the auction.\\n     * @dev This function can only be called when the contract is paused.\\n     */\\n    function settleAuction(uint256 _auctionId) public whenPaused nonReentrant {\\n        _settleAuction(_auctionId);\\n    }\\n\\n    // Public function to release another auction using the auction Oracle.\\n    function createNextAuction() public whenNotPaused {\\n        require(activeAuctions.current() < maxAuctions, \\\"No open auction slots\\\");\\n        _requestCreateAuction();\\n    }\\n\\n    // Capture reponse from next auction oracle.\\n    function fulfillRequestCreateAuction(uint256 _tokenId) public onlyAuctionOracle {\\n        // Let's double check the oracle's work.\\n        // Note: First check returns \\\"ERC721: invalid token ID\\\" for non-existent token.\\n        require(etsToken.ownerOf(_tokenId) == etsAccessControls.getPlatformAddress(), \\\"CTAG not owned by ETS\\\");\\n        require(activeAuctions.current() < maxAuctions, \\\"No open auction slots\\\");\\n        // Get the most recent auction for this token.\\n        if (auctionExistsForTokenId(_tokenId)) {\\n            Auction memory auction = getAuctionForTokenId(_tokenId);\\n            require(auction.settled, \\\"Auction exists\\\");\\n        }\\n        _createAuction(_tokenId);\\n    }\\n\\n    function createBid(uint256 _auctionId) public payable nonReentrant whenNotPaused {\\n        require(_auctionExists(_auctionId), \\\"Auction not found\\\");\\n        Auction memory auction = _getAuction(_auctionId);\\n        if (auction.startTime > 0) {\\n            require(block.timestamp < auction.endTime, \\\"Auction ended\\\");\\n        }\\n        require(msg.value >= reservePrice, \\\"Must send at least reservePrice\\\");\\n        require(msg.value >= auction.amount + ((auction.amount * minBidIncrementPercentage) / 100), \\\"Bid too low\\\");\\n\\n        address payable lastBidder = auction.bidder;\\n\\n        // Refund the last bidder, if applicable\\n        if (lastBidder != address(0)) {\\n            _safeTransferETHWithFallback(lastBidder, auction.amount);\\n        }\\n\\n        if (auction.startTime == 0) {\\n            // Start the auction\\n            uint256 startTime = block.timestamp;\\n            uint256 endTime = startTime + duration;\\n            auctions[_auctionId].startTime = startTime;\\n            auctions[_auctionId].endTime = endTime;\\n        }\\n\\n        auctions[_auctionId].amount = msg.value;\\n        auctions[_auctionId].bidder = payable(msg.sender);\\n\\n        // Extend the auction if the bid was received within `timeBuffer` of the auction end time\\n        bool extended = false;\\n        if (auction.startTime > 0) {\\n            extended = auction.endTime - block.timestamp < timeBuffer;\\n            if (extended) {\\n                auctions[_auctionId].endTime = auction.endTime = block.timestamp + timeBuffer;\\n                emit AuctionExtended(_auctionId, auction.endTime);\\n            }\\n        }\\n\\n        emit AuctionBid(_auctionId, msg.sender, msg.value, extended);\\n    }\\n\\n    /**\\n     * @notice Function for withdrawing funds from an accrual account. Can be called by the account owner\\n     * or on behalf of the account. Does nothing when there is nothing due to the account.\\n     *\\n     * @param _account Address of account being drawn down and which will receive the funds.\\n     */\\n    function drawDown(address payable _account) external nonReentrant {\\n        uint256 balanceDue = totalDue(_account);\\n        if (balanceDue > 0 && balanceDue <= address(this).balance) {\\n            paid[_account] = paid[_account] + balanceDue;\\n\\n            bool success = _safeTransferETH(_account, balanceDue);\\n            require(success, \\\"Transfer failed\\\");\\n\\n            emit AuctionProceedsWithdrawn(_account, balanceDue);\\n        }\\n    }\\n\\n    // ============ INTERNAL FUNCTIONS ============\\n\\n    function _requestCreateAuction() private {\\n        // Trigger of chain oracle to pick and release next auction.\\n        emit RequestCreateAuction();\\n    }\\n\\n    function _createAuction(uint256 _tokenId) internal {\\n        auctionId.increment();\\n        activeAuctions.increment();\\n        uint256 currentAuctionId = auctionId.current();\\n        // Create new auction but don't start it.\\n        auctions[currentAuctionId] = Auction({\\n            auctionId: currentAuctionId,\\n            tokenId: _tokenId,\\n            amount: 0,\\n            startTime: 0,\\n            endTime: 0,\\n            reservePrice: reservePrice,\\n            bidder: payable(address(0)),\\n            auctioneer: etsAccessControls.getPlatformAddress(),\\n            settled: false\\n        });\\n\\n        // Add the auction Id to list of auctions for this token.\\n        uint256[] storage tokenAuctionIds = auctionsByTokenId[_tokenId];\\n        tokenAuctionIds.push(currentAuctionId);\\n\\n        emit AuctionCreated(currentAuctionId, _tokenId, tokenAuctionIds.length);\\n        //emit AuctionCreated(_tokenId);\\n    }\\n\\n    function _settleAuction(uint256 _auctionId) internal {\\n        require(_auctionExists(_auctionId), \\\"Auction not found\\\");\\n        Auction memory auction = getAuction(_auctionId);\\n        require(!(auction.settled), \\\"Auction already settled\\\");\\n        require(auction.startTime != 0, \\\"Auction has not begun\\\");\\n        require(block.timestamp >= auction.endTime, \\\"Auction has not ended\\\");\\n\\n        auctions[_auctionId].settled = true;\\n        activeAuctions.decrement();\\n        etsToken.transferFrom(etsAccessControls.getPlatformAddress(), auction.bidder, auction.tokenId);\\n        _processAuctionRevenue(auction.tokenId, auction.amount);\\n        emit AuctionSettled(_auctionId);\\n    }\\n\\n    // @dev Internal function to divide up auction revenue and accrue it to ETS participants.\\n    function _processAuctionRevenue(uint256 _tokenId, uint256 _amount) private {\\n        // Distribute proceeds to actors.\\n        IETSToken.Tag memory ctag = etsToken.getTagById(_tokenId);\\n        address platform = etsAccessControls.getPlatformAddress();\\n\\n        uint256 relayerProceeds = (_amount * relayerPercentage) / MODULO;\\n        uint256 creatorProceeds = (_amount * creatorPercentage) / MODULO;\\n        uint256 platformProceeds = _amount - (relayerProceeds + creatorProceeds);\\n\\n        accrued[ctag.relayer] = accrued[ctag.relayer] + relayerProceeds;\\n        accrued[ctag.creator] = accrued[ctag.creator] + creatorProceeds;\\n        accrued[platform] = accrued[platform] + platformProceeds;\\n    }\\n\\n    /**\\n     * @dev Retrieves an auction given an auction ID.\\n     * @param _auctionId The ID of auction.\\n     * @return Auction object. Returns an empty object if no auction exists\\n     *         so must perform additional checks downstream.\\n     */\\n    function _getAuction(uint256 _auctionId) internal view returns (Auction memory) {\\n        return auctions[_auctionId];\\n    }\\n\\n    function _safeTransferETHWithFallback(address to, uint256 amount) internal {\\n        if (!_safeTransferETH(to, amount)) {\\n            IWETH(weth).deposit{ value: amount }();\\n            IERC20Upgradeable(weth).transfer(to, amount);\\n        }\\n    }\\n\\n    function _safeTransferETH(address to, uint256 value) internal returns (bool) {\\n        (bool success, ) = to.call{ value: value, gas: 30_000 }(new bytes(0));\\n        return success;\\n    }\\n\\n    // Return true if tag has had an auction released in any state.\\n    function _auctionExists(uint256 _auctionId) internal view returns (bool) {\\n        return (auctions[_auctionId].auctionId != 0 && auctions[_auctionId].auctionId == _auctionId);\\n    }\\n\\n    // ============ PUBLIC VIEW FUNCTIONS ============\\n\\n    function auctionExists(uint256 _auctionId) public view returns (bool) {\\n        return _auctionExists(_auctionId);\\n    }\\n\\n    function auctionExistsForTokenId(uint256 _tokenId) public view returns (bool) {\\n        return (auctionsByTokenId[_tokenId].length > 0);\\n    }\\n\\n    function auctionEnded(uint256 _auctionId) public view returns (bool) {\\n        return (auctions[_auctionId].endTime < block.timestamp);\\n    }\\n\\n    function auctionSettled(uint256 _auctionId) public view returns (bool) {\\n        return (_auctionExists(_auctionId) && auctions[_auctionId].settled);\\n    }\\n\\n    function getAuction(uint256 _auctionId) public view returns (Auction memory) {\\n        return _getAuction(_auctionId);\\n    }\\n\\n    function getAuctionForTokenId(uint256 _tokenId) public view returns (Auction memory) {\\n        require(auctionExistsForTokenId(_tokenId), \\\"No auctions for tokenId\\\");\\n        uint256[] memory tokenAuctionIds = auctionsByTokenId[_tokenId];\\n        // Return last auction for token.\\n        return auctions[tokenAuctionIds[tokenAuctionIds.length - 1]];\\n    }\\n\\n    function getAuctionCountForTokenId(uint256 _tokenId) public view returns (uint256) {\\n        return auctionsByTokenId[_tokenId].length;\\n    }\\n\\n    function getActiveCount() public view returns (uint256) {\\n        return activeAuctions.current();\\n    }\\n\\n    function getTotalCount() public view returns (uint256) {\\n        return auctionId.current();\\n    }\\n\\n    function getBalance() public view returns (uint) {\\n        return address(this).balance;\\n    }\\n\\n    function totalDue(address _account) public view returns (uint256 _due) {\\n        return accrued[_account] - paid[_account];\\n    }\\n\\n    /* solhint-disable */\\n    receive() external payable {}\\n\\n    fallback() external payable {}\\n    /* solhint-enable */\\n}\\n\",\"keccak256\":\"0x546654b9dd8f7aead49e7cedc380d1f32a949b2fb2f673050316f2afd542ef9c\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/IETSAccessControls.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n/**\\n * @title IETSAccessControls\\n * @author Ethereum Tag Service <team@ets.xyz>\\n *\\n *  \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\n *  \\u2588\\u2588\\u2554\\u2550\\u2550\\u2550\\u2550\\u255d\\u255a\\u2550\\u2550\\u2588\\u2588\\u2554\\u2550\\u2550\\u255d\\u2588\\u2588\\u2554\\u2550\\u2550\\u2550\\u2550\\u255d\\n *  \\u2588\\u2588\\u2588\\u2588\\u2588\\u2557     \\u2588\\u2588\\u2551   \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\n *  \\u2588\\u2588\\u2554\\u2550\\u2550\\u255d     \\u2588\\u2588\\u2551   \\u255a\\u2550\\u2550\\u2550\\u2550\\u2588\\u2588\\u2551\\n *  \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557   \\u2588\\u2588\\u2551   \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2551`\\n *  \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d   \\u255a\\u2550\\u255d   \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\n *\\n * @notice This is the interface for the ETSAccessControls contract which allows ETS Core Dev\\n * Team to administer roles and control access to various parts of the ETS Platform.\\n * ETSAccessControls contract contains a mix of public and administrator only functions.\\n */\\n\\npragma solidity ^0.8.10;\\n\\nimport { IAccessControlUpgradeable } from \\\"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol\\\";\\n\\ninterface IETSAccessControls is IAccessControlUpgradeable {\\n    /**\\n     * @dev emitted when the ETS Platform address is set.\\n     *\\n     * @param newAddress wallet address platform is being set to.\\n     * @param prevAddress previous platform address.\\n     */\\n    event PlatformSet(address newAddress, address prevAddress);\\n\\n    /**\\n     * @dev emitted when a Relayer contract is added & enabled in ETS.\\n     *\\n     * Relayer contracts are not required implement all ETS Core API functions. Therefore, to ease\\n     * testing of ETS Core API fuinctions, ETS permits addition of ETS owned wallet addresses as Relayers.\\n     *\\n     * @param relayer Relayer contract address.\\n     */\\n    event RelayerAdded(address relayer);\\n\\n    /**\\n     * @dev emitted when a Relayer contract is paused or unpaused.\\n     *\\n     * @param relayer Address that had pause toggled.\\n     */\\n    event RelayerLockToggled(address relayer);\\n\\n    /**\\n     * @notice Sets the Platform wallet address. Can only be called by address with DEFAULT_ADMIN_ROLE.\\n     *\\n     * @param _platform The new Platform address to set.\\n     */\\n    function setPlatform(address payable _platform) external;\\n\\n    /**\\n     * @notice Adds a Relayer contract to ETS. Can only be called by address\\n     * with DEFAULT_ADMIN_ROLE.\\n     *\\n     * @param _relayer Address of the Relayer contract. Must conform to IETSRelayer.\\n     * @param _name Human readable name of the Relayer.\\n     * @param _owner Address of relayer owner.\\n     */\\n    function registerRelayer(address _relayer, string calldata _name, address _owner) external;\\n\\n    /**\\n     * @notice Pause relayer given the relayer owner address. Callable by Platform only.\\n     *\\n     * @param _relayerOwner Address of the Relayer owner.\\n     */\\n    function pauseRelayerByOwnerAddress(address _relayerOwner) external;\\n\\n    /**\\n     * @notice Change the relayer owner as stored in ETSAccessControls. Callable from Relayer only.\\n     * Called via changeOwner() on a relayer.\\n     *\\n     * @param _currentOwner Address of the current relayer owner.\\n     * @param _newOwner Address of the new relayer owner.\\n     */\\n    function changeRelayerOwner(address _currentOwner, address _newOwner) external;\\n\\n    /**\\n     * @notice Pauses/Unpauses a Relayer contract. Can only be called by address\\n     * with DEFAULT_ADMIN_ROLE.\\n     *\\n     * @param _relayer Address of the Relayer contract.\\n     */\\n    function toggleRelayerLock(address _relayer) external;\\n\\n    /**\\n     * @notice Sets the role admin for a given role. An address with role admin can grant or\\n     * revoke that role for other addresses. Can only be called by address with DEFAULT_ADMIN_ROLE.\\n     *\\n     * @param _role bytes32 representation of role being administered.\\n     * @param _adminRole bytes32 representation of administering role.\\n     */\\n    function setRoleAdmin(bytes32 _role, bytes32 _adminRole) external;\\n\\n    /**\\n     * @notice Checks whether given address has SMART_CONTRACT role.\\n     *\\n     * @param _addr Address being checked.\\n     * @return boolean True if address has SMART_CONTRACT role.\\n     */\\n    function isSmartContract(address _addr) external view returns (bool);\\n\\n    /**\\n     * @notice Checks whether given address has DEFAULT_ADMIN_ROLE role.\\n     *\\n     * @param _addr Address being checked.\\n     * @return boolean True if address has DEFAULT_ADMIN_ROLE role.\\n     */\\n    function isAdmin(address _addr) external view returns (bool);\\n\\n    /**\\n     * @notice Checks whether given address has AUCTION_ORACLE_ROLE role.\\n     *\\n     * @param _addr Address being checked.\\n     * @return boolean True if address has AUCTION_ORACLE_ROLE role.\\n     */\\n    function isAuctionOracle(address _addr) external view returns (bool);\\n\\n    /**\\n     * @notice Checks whether given address can act as relayer factory.\\n     *\\n     * @param _addr Address being checked.\\n     * @return boolean True if address can act as relayer factory.\\n     */\\n    function isRelayerFactory(address _addr) external view returns (bool);\\n\\n    /**\\n     * @notice Checks whether given address is a relayer.\\n     *\\n     * @param _addr Address being checked.\\n     * @return boolean True if address can be a relayer.\\n     */\\n    function isRelayer(address _addr) external view returns (bool);\\n\\n    /**\\n     * @notice Checks whether given address is a registered Relayer and not paused.\\n     *\\n     * @param _addr Address being checked.\\n     * @return boolean True if address is a Relayer and not paused.\\n     */\\n    function isRelayerAndNotPaused(address _addr) external view returns (bool);\\n\\n    /**\\n     * @notice Checks relayer is paused by ETS Platform.\\n     *\\n     * @param _addr Address being checked.\\n     * @return boolean True if relayer address is paused by platform.\\n     */\\n    function isRelayerLocked(address _addr) external view returns (bool);\\n\\n    /**\\n     * @notice Checks whether given address owns a relayer.\\n     *\\n     * @param _addr Address being checked.\\n     * @return boolean True if address owns a relayer.\\n     */\\n    function isRelayerByOwner(address _addr) external view returns (bool);\\n\\n    /**\\n     * @notice Checks whether given address has RELAYER_ADMIN role.\\n     *\\n     * @param _addr Address being checked.\\n     * @return boolean True if address has RELAYER_ADMIN role.\\n     */\\n    function isRelayerAdmin(address _addr) external view returns (bool);\\n\\n    /**\\n     * @notice Checks whether given Relayer Name is a registered Relayer.\\n     *\\n     * @param _name Name being checked.\\n     * @return boolean True if _name is a Relayer.\\n     */\\n    function isRelayerByName(string calldata _name) external view returns (bool);\\n\\n    /**\\n     * @notice Checks whether given address is a registered Relayer.\\n     *\\n     * @param _addr Address being checked.\\n     * @return boolean True if address is a registered Relayer.\\n     */\\n    function isRelayerByAddress(address _addr) external view returns (bool);\\n\\n    /**\\n     * @notice Get relayer address from it's name.\\n     *\\n     * @param _name Name of relayer.\\n     * @return Address of relayer.\\n     */\\n    function getRelayerAddressFromName(string calldata _name) external view returns (address);\\n\\n    /**\\n     * @notice Get relayer name from it's address.\\n     *\\n     * @param _address Adsdress of relayer.\\n     * @return Name of relayer.\\n     */\\n    function getRelayerNameFromAddress(address _address) external view returns (string calldata);\\n\\n    /**\\n     * @notice Get relayer address from its owner address.\\n     *\\n     * @param _address address of relayer owner.\\n     * @return Address of relayer.\\n     */\\n    function getRelayerAddressFromOwner(address _address) external view returns (address);\\n\\n    /**\\n     * @notice Returns wallet address for ETS Platform.\\n     *\\n     * @return ETS Platform address.\\n     */\\n    function getPlatformAddress() external view returns (address payable);\\n}\\n\",\"keccak256\":\"0x0948eb19ab50fdd3cb1ac728be863567c9cefd4da0e4ecc2b3b052020c86ed74\",\"license\":\"MIT\"},\"contracts/interfaces/IETSAuctionHouse.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\n/**\\n * @title IETSAuctionHouse\\n * @author Ethereum Tag Service <team@ets.xyz>\\n *\\n *  \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\n *  \\u2588\\u2588\\u2554\\u2550\\u2550\\u2550\\u2550\\u255d\\u255a\\u2550\\u2550\\u2588\\u2588\\u2554\\u2550\\u2550\\u255d\\u2588\\u2588\\u2554\\u2550\\u2550\\u2550\\u2550\\u255d\\n *  \\u2588\\u2588\\u2588\\u2588\\u2588\\u2557     \\u2588\\u2588\\u2551   \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\n *  \\u2588\\u2588\\u2554\\u2550\\u2550\\u255d     \\u2588\\u2588\\u2551   \\u255a\\u2550\\u2550\\u2550\\u2550\\u2588\\u2588\\u2551\\n *  \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557   \\u2588\\u2588\\u2551   \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2551`\\n *  \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d   \\u255a\\u2550\\u255d   \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\n *\\n * @notice This is the standard interface for the ETSAuctionHouse.sol contract.\\n * Includes both public and administration functions.\\n */\\n\\npragma solidity ^0.8.6;\\n\\ninterface IETSAuctionHouse {\\n    struct Auction {\\n        // Incremented auction number\\n        uint256 auctionId;\\n        // Id of token being auctioned.\\n        uint256 tokenId;\\n        // The current highest bid amount\\n        uint256 amount;\\n        // The time that the auction started\\n        uint256 startTime;\\n        // The time that the auction is scheduled to end\\n        uint256 endTime;\\n        // The minimum price of the first bid\\n        uint256 reservePrice;\\n        // The address of the current highest bid\\n        address payable bidder;\\n        // Address of the auctioneer. Defaults to ETS.\\n        address payable auctioneer;\\n        // Whether or not the auction has been settled\\n        bool settled;\\n    }\\n\\n    event RequestCreateAuction();\\n\\n    event AuctionBid(uint256 indexed auctionId, address sender, uint256 value, bool extended);\\n\\n    event AuctionCreated(uint256 indexed auctionId, uint256 indexed tokenId, uint256 tokenAuctionNumber);\\n\\n    event AuctionExtended(uint256 indexed auctionId, uint256 endTime);\\n\\n    event AuctionSettled(uint256 indexed auctionId);\\n\\n    event AuctionsMaxSet(uint256 maxAuctions);\\n\\n    event AuctionDurationSet(uint256 duration);\\n\\n    event AuctionMinBidIncrementPercentageSet(uint8 minBidIncrementPercentagePrice);\\n\\n    event AuctionReservePriceSet(uint256 reservePrice);\\n\\n    event AuctionTimeBufferSet(uint256 timeBuffer);\\n\\n    event AuctionProceedPercentagesSet(\\n        uint256 platformPercentage,\\n        uint256 relayerPercentage,\\n        uint256 creatorPercentage\\n    );\\n\\n    event AuctionProceedsWithdrawn(address indexed who, uint256 amount);\\n\\n    function pause() external;\\n\\n    function unpause() external;\\n\\n    function setReservePrice(uint256 _reservePrice) external;\\n\\n    function setTimeBuffer(uint256 timeBuffer) external;\\n\\n    function setProceedPercentages(uint256 _platformPercentage, uint256 _relayerPercentage) external;\\n\\n    function createBid(uint256 auctionId) external payable;\\n\\n    function settleCurrentAndCreateNewAuction(uint256 _tokenId) external;\\n\\n    function settleAuction(uint256 _tokenId) external;\\n\\n    function createNextAuction() external;\\n\\n    function fulfillRequestCreateAuction(uint256 _tokenId) external;\\n\\n    function auctionExists(uint256 _tokenId) external returns (bool);\\n\\n    function auctionEnded(uint256 _tokenId) external returns (bool);\\n\\n    function auctionSettled(uint256 _tokenId) external returns (bool);\\n\\n    function getActiveCount() external returns (uint256);\\n\\n    function getTotalCount() external returns (uint256);\\n\\n    function getAuction(uint256 _tokenId) external returns (Auction memory auction);\\n\\n    function getBalance() external returns (uint);\\n\\n    function totalDue(address _account) external returns (uint256 _due);\\n\\n    function drawDown(address payable _account) external;\\n}\\n\",\"keccak256\":\"0xfea116e7dbdde2516e120e010179d50b606287124fa07338b5a05cbdefc30ca1\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/IETSToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n/**\\n * @title IETSToken\\n * @author Ethereum Tag Service <team@ets.xyz>\\n *\\n *  \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\n *  \\u2588\\u2588\\u2554\\u2550\\u2550\\u2550\\u2550\\u255d\\u255a\\u2550\\u2550\\u2588\\u2588\\u2554\\u2550\\u2550\\u255d\\u2588\\u2588\\u2554\\u2550\\u2550\\u2550\\u2550\\u255d\\n *  \\u2588\\u2588\\u2588\\u2588\\u2588\\u2557     \\u2588\\u2588\\u2551   \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\n *  \\u2588\\u2588\\u2554\\u2550\\u2550\\u255d     \\u2588\\u2588\\u2551   \\u255a\\u2550\\u2550\\u2550\\u2550\\u2588\\u2588\\u2551\\n *  \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557   \\u2588\\u2588\\u2551   \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2551`\\n *  \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d   \\u255a\\u2550\\u255d   \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\n *\\n * @notice This is the interface for the ETSToken.sol core contract that governs the creation & management\\n * of Ethereum Tag Service composable tags (CTAGs).\\n *\\n * CTAGs are ERC-721 non-fungible tokens that store a single tag string and origin attribution data including\\n * a \\\"Relayer\\\" address and a \\\"Creator\\\" address. The tag string must conform to a few simple validation rules.\\n *\\n * CTAGs are identified in ETS by their Id (tagId) which is an unsigned integer computed from the lowercased\\n * tag \\\"display\\\" string. Given this, only one CTAG exists for a tag string regardless of its case. For\\n * example, #Punks, #punks and #PUNKS all resolve to the same CTAG.\\n *\\n * CTAG Ids are combined with Target Ids (see ETSTarget.sol) by ETS core (ETS.sol) to form \\\"Tagging Records\\\".\\n *\\n * CTAGs may only be generated by Relayer contracts (see examples/ETSRelayer.sol) via ETS core (ETS.sol)\\n */\\n\\npragma solidity ^0.8.10;\\n\\nimport { IERC721Upgradeable } from \\\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol\\\";\\n\\ninterface IETSToken is IERC721Upgradeable {\\n    /**\\n     * @notice Data structure for CTAG Token.\\n     *\\n     * Only premium and reserved flags are editable.\\n     *\\n     * @param relayer Address of IETSTargetTagger implementation that created CTAG.\\n     * @param creator Address interacting with relayer to initiate CTAG creation.\\n     * @param display Display version of CTAG string.\\n     * @param premium ETS governed boolean flag to identify a CTAG as premium/higher value.\\n     * @param reserved ETS governed boolean flag to restrict a CTAG from release to auction.\\n     */\\n    struct Tag {\\n        address relayer;\\n        address creator;\\n        string display;\\n        bool premium;\\n        bool reserved;\\n    }\\n\\n    // Events\\n\\n    /**\\n     * @dev emitted when the maximum character length of CTAG display string is set.\\n     *\\n     * @param maxStringLength maximum character length of string.\\n     */\\n    event TagMaxStringLengthSet(uint256 maxStringLength);\\n\\n    /**\\n     * @dev emitted when the minimum character length of CTAG display string is set.\\n     *\\n     * @param minStringLength minimum character length of string.\\n     */\\n    event TagMinStringLengthSet(uint256 minStringLength);\\n\\n    /**\\n     * @dev emitted when the ownership term length of a CTAG is set.\\n     *\\n     * @param termLength Ownership term length in days.\\n     */\\n    event OwnershipTermLengthSet(uint256 termLength);\\n\\n    /**\\n     * @dev emitted when the ETS core contract is set.\\n     *\\n     * @param ets ets core contract address.\\n     */\\n    event ETSCoreSet(address ets);\\n\\n    /**\\n     * @dev emitted when the ETS Access Controls is set.\\n     *\\n     * @param etsAccessControls contract address access controls is set to.\\n     */\\n    event AccessControlsSet(address etsAccessControls);\\n\\n    /**\\n     * @dev emitted when a tag string is flagged/unflagged as premium prior to minting.\\n     *\\n     * @param tag tag string being flagged.\\n     * @param isPremium boolean true for premium/false not premium.\\n     */\\n    event PremiumTagPreSet(string tag, bool isPremium);\\n\\n    /**\\n     * @dev emitted when a CTAG is flagged/unflagged as premium subsequent to minting.\\n     *\\n     * @param tagId Id of CTAG token.\\n     * @param isPremium boolean true for premium/false not premium.\\n     */\\n    event PremiumFlagSet(uint256 tagId, bool isPremium);\\n\\n    /**\\n     * @dev emitted when a CTAG is flagged/unflagged as reserved subsequent to minting.\\n     *\\n     * @param tagId Id of CTAG token.\\n     * @param isReserved boolean true for reserved/false for not reserved.\\n     */\\n    event ReservedFlagSet(uint256 tagId, bool isReserved);\\n\\n    /**\\n     * @dev emitted when CTAG token is renewed.\\n     *\\n     * @param tokenId Id of CTAG token.\\n     * @param caller address of renewer.\\n     */\\n    event TagRenewed(uint256 indexed tokenId, address indexed caller);\\n\\n    /**\\n     * @dev emitted when CTAG token is recycled back to ETS.\\n     *\\n     * @param tokenId Id of CTAG token.\\n     * @param caller address of recycler.\\n     */\\n    event TagRecycled(uint256 indexed tokenId, address indexed caller);\\n\\n    // ============ OWNER INTERFACE ============\\n\\n    /**\\n     * @notice admin function to set maximum character length of CTAG display string.\\n     *\\n     * @param _tagMaxStringLength maximum character length of string.\\n     */\\n    function setTagMaxStringLength(uint256 _tagMaxStringLength) external;\\n\\n    /**\\n     * @notice Admin function to set minimum  character length of CTAG display string.\\n     *\\n     * @param _tagMinStringLength minimum character length of string.\\n     */\\n    function setTagMinStringLength(uint256 _tagMinStringLength) external;\\n\\n    /**\\n     * @notice Admin function to set the ownership term length of a CTAG is set.\\n     *\\n     * @param _ownershipTermLength Ownership term length in days.\\n     */\\n    function setOwnershipTermLength(uint256 _ownershipTermLength) external;\\n\\n    /**\\n     * @notice Admin function to flag/unflag tag string(s) as premium prior to minting.\\n     *\\n     * @param _tags Array of tag strings.\\n     * @param _isPremium Boolean true for premium, false for not premium.\\n     */\\n    function preSetPremiumTags(string[] calldata _tags, bool _isPremium) external;\\n\\n    /**\\n     * @notice Admin function to flag/unflag CTAG(s) as premium.\\n     *\\n     * @param _tokenIds Array of CTAG Ids.\\n     * @param _isPremium Boolean true for premium, false for not premium.\\n     */\\n    function setPremiumFlag(uint256[] calldata _tokenIds, bool _isPremium) external;\\n\\n    /**\\n     * @notice Admin function to flag/unflag CTAG(s) as reserved.\\n     *\\n     * Tags flagged as reserved cannot be auctioned.\\n     *\\n     * @param _tokenIds Array of CTAG Ids.\\n     * @param _reserved Boolean true for reserved, false for not reserved.\\n     */\\n    function setReservedFlag(uint256[] calldata _tokenIds, bool _reserved) external;\\n\\n    // ============ PUBLIC INTERFACE ============\\n\\n    /**\\n     * @notice Get CTAG token Id from tag string.\\n     *\\n     * Combo function that accepts a tag string and returns it's CTAG token Id if it exists,\\n     * or creates a new CTAG and returns corresponding Id.\\n     *\\n     * Only ETS Core can call this function.\\n     *\\n     * @param _tag Tag string.\\n     * @param _relayer Address of Relayer contract calling ETS Core.\\n     * @param _creator Address credited with creating CTAG.\\n     * @return tokenId Id of CTAG token.\\n     */\\n    function getOrCreateTagId(\\n        string calldata _tag,\\n        address payable _relayer,\\n        address payable _creator\\n    ) external payable returns (uint256 tokenId);\\n\\n    /**\\n     * @notice Create CTAG token from tag string.\\n     *\\n     * Reverts if tag exists or is invalid.\\n     *\\n     * Only ETS Core can call this function.\\n     *\\n     * @param _tag Tag string.\\n     * @param _creator Address credited with creating CTAG.\\n     * @return tokenId Id of CTAG token.\\n     */\\n    function createTag(\\n        string calldata _tag,\\n        address payable _relayer,\\n        address payable _creator\\n    ) external payable returns (uint256 tokenId);\\n\\n    /**\\n     * @notice Renews ownership term of a CTAG.\\n     *\\n     * A \\\"CTAG ownership term\\\" is utilized to prevent CTAGs from being abandoned or inaccessable\\n     * due to lost private keys.\\n     *\\n     * Any wallet address may renew the term of a CTAG for an owner. When renewed, the term\\n     * is extended from the current block timestamp plus the ownershipTermLength public variable.\\n     *\\n     * @param _tokenId Id of CTAG token.\\n     */\\n    function renewTag(uint256 _tokenId) external;\\n\\n    /**\\n     * @notice Recycles a CTAG back to ETS.\\n     *\\n     * When ownership term of a CTAG has expired, any wallet or contract may call this function\\n     * to recycle the tag back to ETS. Once recycled, a tag may be auctioned again.\\n     *\\n     * @param _tokenId Id of CTAG token.\\n     */\\n    function recycleTag(uint256 _tokenId) external;\\n\\n    // ============ PUBLIC VIEW FUNCTIONS ============\\n\\n    /**\\n     * @notice Function to deterministically compute & return a CTAG token Id.\\n     *\\n     * Every CTAG token and it's associated data struct is mapped to by it's token Id. This Id is computed\\n     * from the \\\"display\\\" tag string lowercased, hashed and cast as an unsigned integer.\\n     *\\n     * Note: Function does not verify if CTAG record exists.\\n     *\\n     * @param _tag Tag string.\\n     * @return Id of potential CTAG token id.\\n     */\\n    function computeTagId(string memory _tag) external pure returns (uint256);\\n\\n    /**\\n     * @notice Check that a CTAG token exists for a given tag string.\\n     *\\n     * @param _tag Tag string.\\n     * @return true if CTAG token exists; false if not.\\n     */\\n    function tagExistsByString(string calldata _tag) external view returns (bool);\\n\\n    /**\\n     * @notice Check that CTAG token exists for a given computed token Id.\\n     *\\n     * @param _tokenId Token Id uint computed from tag string via computeTargetId().\\n     * @return true if CTAG token exists; false if not.\\n     */\\n    function tagExistsById(uint256 _tokenId) external view returns (bool);\\n\\n    /**\\n     * @notice Check if CTAG token ownership term has expired.\\n     *\\n     * @param _tokenId Token Id uint computed from tag string via computeTargetId().\\n     * @return true if CTAG ownership term has expired; false if not.\\n     */\\n    function tagOwnershipTermExpired(uint256 _tokenId) external view returns (bool);\\n\\n    /**\\n     * @notice Retrieve a CTAG record for a given tag string.\\n     *\\n     * Note: returns a struct with empty members when no CTAG exists.\\n     *\\n     * @param _tag Tag string.\\n     * @return CTAG record as Tag struct.\\n     */\\n    function getTagByString(string calldata _tag) external view returns (Tag memory);\\n\\n    /**\\n     * @notice Retrieve a CTAG record for a given token Id.\\n     *\\n     * Note: returns a struct with empty members when no CTAG exists.\\n     *\\n     * @param _tokenId CTAG token Id.\\n     * @return CTAG record as Tag struct.\\n     */\\n    function getTagById(uint256 _tokenId) external view returns (Tag memory);\\n\\n    /**\\n     * @notice Retrieve wallet address for ETS Platform.\\n     *\\n     * @return wallet address for ETS Platform.\\n     */\\n    function getPlatformAddress() external view returns (address payable);\\n\\n    /**\\n     * @notice Retrieve Creator address for a CTAG token.\\n     *\\n     * @param _tokenId CTAG token Id.\\n     * @return _creator Creator address of the CTAG.\\n     */\\n    function getCreatorAddress(uint256 _tokenId) external view returns (address);\\n\\n    /**\\n     * @notice Retrieve last renewal block timestamp for a CTAG.\\n     *\\n     * @param _tokenId CTAG token Id.\\n     * @return Block timestamp.\\n     */\\n    function getLastRenewed(uint256 _tokenId) external view returns (uint256);\\n\\n    /**\\n     * @notice Retrieve CTAG ownership term length global setting.\\n     *\\n     * @return Term length in days.\\n     */\\n    function getOwnershipTermLength() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xe82f096b9cb9d70211a119401a6b1714073d40a388b6d0a20f78e5cd908cccd8\",\"license\":\"MIT\"},\"contracts/interfaces/IWETH.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8.10;\\n\\ninterface IWETH {\\n    function deposit() external payable;\\n\\n    function withdraw(uint256 wad) external;\\n\\n    function transfer(address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0x49628b0699dd51828e341cf62612ab61c3e8f9e5d2422d441cc7737afddfa807\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "0x60a0604052306080523480156200001557600080fd5b506200002062000026565b620000e7565b600054610100900460ff1615620000935760405162461bcd60e51b815260206004820152602760248201527f496e697469616c697a61626c653a20636f6e747261637420697320696e697469604482015266616c697a696e6760c81b606482015260840160405180910390fd5b60005460ff90811614620000e5576000805460ff191660ff9081179091556040519081527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b565b608051613a8f6200011f60003960008181610f9f01528181611024015281816113fc01528181611481015261156b0152613a8f6000f3fe6080604052600436106102e75760003560e01c8063659dd2b411610182578063b148440f116100d5578063d178687a11610084578063f071bf4f11610061578063f071bf4f14610960578063f6be71d114610977578063ffa1ad741461099757005b8063d178687a14610904578063db2e1eed14610932578063ec91f2a41461094957005b8063b68bb0ba116100b2578063b68bb0ba146108a4578063c2062005146108c4578063ce9c7c0d146108e457005b8063b148440f14610829578063b296024d14610857578063b53fb5081461088457005b80638299f9f911610131578063a340cf791161010e578063a340cf7914610790578063a3f4df7e146107be578063a8586f7b1461081457005b80638299f9f9146107285780638456cb59146107485780639e7123871461075d57005b806369f378871161015f57806369f37887146106bb5780637120334b146106db57806378bd7935146106fb57005b8063659dd2b414610672578063666077c91461068557806369a6e9c6146106a557005b80633799cd571161023a5780634f1ef286116101e9578063571a26a0116101c6578063571a26a01461057b5780635c975abb1461064557806363338b171461065d57005b80634f1ef2861461053e57806352d1902d1461055157806356d42bb31461056657005b80633f4ba83a116102175780633f4ba83a146104d05780633fc8cef3146104e557806346ca0f4d1461051e57005b80633799cd57146104605780633b6e0ef5146104905780633c0868f0146104b057005b8063279a0147116102965780632e993611116102735780632e993611146104005780633659cfe61461042057806336ebdb381461044057005b8063279a01471461039957806328b9e726146103b95780632a1e1ee1146103e957005b80630fb5a6b4116102c45780630fb5a6b41461035857806312065fe01461036f5780631f7418971461038257005b806301810a96146102f05780630acc9e09146103055780630ad2f0c31461032557005b366102ee57005b005b3480156102fc57600080fd5b506102ee6109e0565b34801561031157600080fd5b506102ee61032036600461351b565b610a4a565b34801561033157600080fd5b506103456103403660046135b1565b610c16565b6040519081526020015b60405180910390f35b34801561036457600080fd5b506103456101065481565b34801561037b57600080fd5b5047610345565b34801561038e57600080fd5b506103456101095481565b3480156103a557600080fd5b506102ee6103b43660046135ce565b610c4c565b3480156103c557600080fd5b506103d96103d43660046135ce565b610f3e565b604051901515815260200161034f565b3480156103f557600080fd5b506103456101085481565b34801561040c57600080fd5b506102ee61041b3660046135ce565b610f71565b34801561042c57600080fd5b506102ee61043b3660046135b1565b610f94565b34801561044c57600080fd5b506102ee61045b3660046135e7565b61110d565b34801561046c57600080fd5b506103d961047b3660046135ce565b60009081526101016020526040902054151590565b34801561049c57600080fd5b506102ee6104ab3660046135ce565b61121d565b3480156104bc57600080fd5b506103d96104cb3660046135ce565b611318565b3480156104dc57600080fd5b506102ee611323565b3480156104f157600080fd5b5061010254610506906001600160a01b031681565b6040516001600160a01b03909116815260200161034f565b34801561052a57600080fd5b5060fb54610506906001600160a01b031681565b6102ee61054c36600461369a565b6113f1565b34801561055d57600080fd5b5061034561155e565b34801561057257600080fd5b50610345611623565b34801561058757600080fd5b506105f36105963660046135ce565b61010060205260009081526040902080546001820154600283015460038401546004850154600586015460068701546007909701549596949593949293919290916001600160a01b0391821691811690600160a01b900460ff1689565b60408051998a5260208a0198909852968801959095526060870193909352608086019190915260a08501526001600160a01b0390811660c08501521660e083015215156101008201526101200161034f565b34801561065157600080fd5b5060335460ff166103d9565b34801561066957600080fd5b50610345611633565b6102ee6106803660046135ce565b61163e565b34801561069157600080fd5b506102ee6106a03660046135ce565b611959565b3480156106b157600080fd5b5061034560fd5481565b3480156106c757600080fd5b506103456106d636600461372d565b61197a565b3480156106e757600080fd5b506102ee6106f63660046135ce565b6119ac565b34801561070757600080fd5b5061071b6107163660046135ce565b611aa8565b60405161034f919061374f565b34801561073457600080fd5b5060fc54610506906001600160a01b031681565b34801561075457600080fd5b506102ee611b14565b34801561076957600080fd5b506103d96107783660046135ce565b60009081526101006020526040902060040154421190565b34801561079c57600080fd5b506103456107ab3660046135b1565b61010b6020526000908152604090205481565b3480156107ca57600080fd5b506108076040518060400160405280601181526020017f4554532041756374696f6e20486f75736500000000000000000000000000000081525081565b60405161034f91906137f9565b34801561082057600080fd5b50610345606481565b34801561083557600080fd5b506103456108443660046135b1565b61010a6020526000908152604090205481565b34801561086357600080fd5b50610105546108729060ff1681565b60405160ff909116815260200161034f565b34801561089057600080fd5b5061071b61089f3660046135ce565b611be2565b3480156108b057600080fd5b506102ee6108bf36600461372d565b611dbf565b3480156108d057600080fd5b506102ee6108df3660046135b1565b611f55565b3480156108f057600080fd5b506102ee6108ff3660046135ce565b61206a565b34801561091057600080fd5b5061034561091f3660046135ce565b6000908152610101602052604090205490565b34801561093e57600080fd5b506103456101045481565b34801561095557600080fd5b506103456101035481565b34801561096c57600080fd5b506103456101075481565b34801561098357600080fd5b506102ee6109923660046135ce565b612166565b3480156109a357600080fd5b506108076040518060400160405280600581526020017f302e302e3100000000000000000000000000000000000000000000000000000081525081565b6109e8612262565b60fd5460fe5410610a405760405162461bcd60e51b815260206004820152601560248201527f4e6f206f70656e2061756374696f6e20736c6f7473000000000000000000000060448201526064015b60405180910390fd5b610a486122b5565b565b600054610100900460ff1615808015610a6a5750600054600160ff909116105b80610a845750303b158015610a84575060005460ff166001145b610af65760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a65640000000000000000000000000000000000006064820152608401610a37565b6000805460ff191660011790558015610b19576000805461ff0019166101001790555b610b216122e0565b610b29612353565b610b316123c6565b60fb80546001600160a01b03808e1673ffffffffffffffffffffffffffffffffffffffff199283161790925560fc80548d84169083161790556101028054928c1692909116919091179055610b8760fe60009055565b600060ff55610b958861121d565b610b9e8561110d565b610ba784612166565b610bb08661206a565b610bb9876119ac565b610bc38284611dbf565b8015610c09576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b5050505050505050505050565b6001600160a01b038116600090815261010b602090815260408083205461010a909252822054610c469190613842565b92915050565b60fc546001600160a01b03166358594dc4336040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602401602060405180830381865afa158015610ca2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cc69190613869565b610d125760405162461bcd60e51b815260206004820152601960248201527f43616c6c6572206e6f742061756374696f6e206f7261636c65000000000000006044820152606401610a37565b60fc60009054906101000a90046001600160a01b03166001600160a01b0316633c0c45666040518163ffffffff1660e01b8152600401602060405180830381865afa158015610d65573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d899190613884565b60fb546040517f6352211e000000000000000000000000000000000000000000000000000000008152600481018490526001600160a01b039283169290911690636352211e90602401602060405180830381865afa158015610def573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e139190613884565b6001600160a01b031614610e695760405162461bcd60e51b815260206004820152601560248201527f43544147206e6f74206f776e65642062792045545300000000000000000000006044820152606401610a37565b60fd5460fe5410610ebc5760405162461bcd60e51b815260206004820152601560248201527f4e6f206f70656e2061756374696f6e20736c6f747300000000000000000000006044820152606401610a37565b6000818152610101602052604090205415610f32576000610edc82611be2565b9050806101000151610f305760405162461bcd60e51b815260206004820152600e60248201527f41756374696f6e206578697374730000000000000000000000000000000000006044820152606401610a37565b505b610f3b81612420565b50565b6000610f4982612639565b8015610c4657505060009081526101006020526040902060070154600160a01b900460ff1690565b610f79612667565b610f816126b9565b610f8a81612713565b610f3b6001606555565b306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614156110225760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201526b19195b1959d85d1958d85b1b60a21b6064820152608401610a37565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031661107d7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc546001600160a01b031690565b6001600160a01b0316146110e85760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201526b6163746976652070726f787960a01b6064820152608401610a37565b6110f1816129ff565b60408051600080825260208201909252610f3b91839190612ac5565b60fc546001600160a01b03166324d7806c336040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602401602060405180830381865afa158015611163573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111879190613869565b6111d35760405162461bcd60e51b815260206004820152601c60248201527f43616c6c6572206d7573742062652061646d696e6973747261746f72000000006044820152606401610a37565b610105805460ff191660ff83169081179091556040519081527ff4c67399e687b01a76a7d787b61d2f66f108fe083db1432dfd5efb35e20978c2906020015b60405180910390a150565b60fc546001600160a01b03166324d7806c336040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602401602060405180830381865afa158015611273573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112979190613869565b6112e35760405162461bcd60e51b815260206004820152601c60248201527f43616c6c6572206d7573742062652061646d696e6973747261746f72000000006044820152606401610a37565b60fd8190556040518181527f16e2e3ae9f2743d8576c746a1919a5317347ed51021f4cddaf26b4f8806f419490602001611212565b6000610c4682612639565b60fc546001600160a01b03166324d7806c336040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602401602060405180830381865afa158015611379573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061139d9190613869565b6113e95760405162461bcd60e51b815260206004820152601c60248201527f43616c6c6572206d7573742062652061646d696e6973747261746f72000000006044820152606401610a37565b610a48612c6a565b306001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016141561147f5760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201526b19195b1959d85d1958d85b1b60a21b6064820152608401610a37565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166114da7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc546001600160a01b031690565b6001600160a01b0316146115455760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201526b6163746976652070726f787960a01b6064820152608401610a37565b61154e826129ff565b61155a82826001612ac5565b5050565b6000306001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146115fe5760405162461bcd60e51b815260206004820152603860248201527f555550535570677261646561626c653a206d757374206e6f742062652063616c60448201527f6c6564207468726f7567682064656c656761746563616c6c00000000000000006064820152608401610a37565b507f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc90565b600061162e60ff5490565b905090565b600061162e60fe5490565b6116466126b9565b61164e612262565b61165781612639565b6116a35760405162461bcd60e51b815260206004820152601160248201527f41756374696f6e206e6f7420666f756e640000000000000000000000000000006044820152606401610a37565b60006116ae82612ca3565b60608101519091501561170e578060800151421061170e5760405162461bcd60e51b815260206004820152600d60248201527f41756374696f6e20656e646564000000000000000000000000000000000000006044820152606401610a37565b610104543410156117615760405162461bcd60e51b815260206004820152601f60248201527f4d7573742073656e64206174206c6561737420726573657276655072696365006044820152606401610a37565b61010554604082015160649161177c9160ff909116906138a1565b61178691906138c0565b816040015161179591906138e2565b3410156117e45760405162461bcd60e51b815260206004820152600b60248201527f42696420746f6f206c6f770000000000000000000000000000000000000000006044820152606401610a37565b60c08101516001600160a01b0381161561180657611806818360400151612d94565b60608201516118445761010654429060009061182290836138e2565b6000868152610100602052604090206003810193909355600490920191909155505b600083815261010060205260408120346002820155600601805473ffffffffffffffffffffffffffffffffffffffff19163317905560608301511561190957610103544284608001516118979190613842565b109050801561190957610103546118ae90426138e2565b6080840181815260008681526101006020526040908190206004019290925551905185917f6e912a3a9105bdd2af817ba5adc14e6c127c1035b5b648faa29ca0d58ab8ff4e9161190091815260200190565b60405180910390a25b6040805133815234602082015282151581830152905185917f1159164c56f277e6fc99c11731bd380e0347deb969b75523398734c252706ea3919081900360600190a2505050610f3b6001606555565b6119616126b9565b611969612262565b61197281612713565b610f8a6122b5565b610101602052816000526040600020818154811061199757600080fd5b90600052602060002001600091509150505481565b60fc546001600160a01b03166324d7806c336040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602401602060405180830381865afa158015611a02573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a269190613869565b611a725760405162461bcd60e51b815260206004820152601c60248201527f43616c6c6572206d7573742062652061646d696e6973747261746f72000000006044820152606401610a37565b6101038190556040518181527fd1ee265a58d7706a34825d0e7cede55bca991958637227dccd686911ae9c937090602001611212565b611b0b60405180610120016040528060008152602001600081526020016000815260200160008152602001600081526020016000815260200160006001600160a01b0316815260200160006001600160a01b031681526020016000151581525090565b610c4682612ca3565b60fc546001600160a01b03166324d7806c336040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602401602060405180830381865afa158015611b6a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b8e9190613869565b611bda5760405162461bcd60e51b815260206004820152601c60248201527f43616c6c6572206d7573742062652061646d696e6973747261746f72000000006044820152606401610a37565b610a486123c6565b611c4560405180610120016040528060008152602001600081526020016000815260200160008152602001600081526020016000815260200160006001600160a01b0316815260200160006001600160a01b031681526020016000151581525090565b60008281526101016020526040902054611ca15760405162461bcd60e51b815260206004820152601760248201527f4e6f2061756374696f6e7320666f7220746f6b656e49640000000000000000006044820152606401610a37565b60008281526101016020908152604080832080548251818502810185019093528083529192909190830182828015611cf857602002820191906000526020600020905b815481526020019060010190808311611ce4575b5050505050905061010060008260018451611d139190613842565b81518110611d2357611d236138fa565b6020908102919091018101518252818101929092526040908101600020815161012081018352815481526001820154938101939093526002810154918301919091526003810154606083015260048101546080830152600581015460a083015260068101546001600160a01b0390811660c084015260079091015490811660e0830152600160a01b900460ff1615156101008201529392505050565b60fc546001600160a01b03166324d7806c336040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602401602060405180830381865afa158015611e15573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e399190613869565b611e855760405162461bcd60e51b815260206004820152601c60248201527f43616c6c6572206d7573742062652061646d696e6973747261746f72000000006044820152606401610a37565b6064611e9182846138e2565b1115611edf5760405162461bcd60e51b815260206004820152601a60248201527f496e707574206d757374206e6f742065786365656420313030250000000000006044820152606401610a37565b61010982905561010881905580611ef7836064613842565b611f019190613842565b61010781905561010954610108546040805192835260208301919091528101919091527f6a59952a55f12772795fe6964c1b65f340b256f807578f311d3ce83f32f947679060600160405180910390a15050565b611f5d6126b9565b6000611f6882610c16565b9050600081118015611f7a5750478111155b1561205f576001600160a01b038216600090815261010b6020526040902054611fa49082906138e2565b6001600160a01b038316600090815261010b6020526040812091909155611fcb8383612e9e565b90508061201a5760405162461bcd60e51b815260206004820152600f60248201527f5472616e73666572206661696c656400000000000000000000000000000000006044820152606401610a37565b826001600160a01b03167f381b2269cade3eca66cdcb2ee190cab5c8562fa9cd63b9c8c29b76342abbde7e8360405161205591815260200190565b60405180910390a2505b50610f3b6001606555565b60fc546001600160a01b03166324d7806c336040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602401602060405180830381865afa1580156120c0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120e49190613869565b6121305760405162461bcd60e51b815260206004820152601c60248201527f43616c6c6572206d7573742062652061646d696e6973747261746f72000000006044820152606401610a37565b6101048190556040518181527f69e745465f7c298745d3703bcf0e583594428993c1c3920fea5d181c23e367ac90602001611212565b60fc546001600160a01b03166324d7806c336040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602401602060405180830381865afa1580156121bc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121e09190613869565b61222c5760405162461bcd60e51b815260206004820152601c60248201527f43616c6c6572206d7573742062652061646d696e6973747261746f72000000006044820152606401610a37565b6101068190556040518181527fcfbeaaafe85252eefcff52729a69be4e0a0fddc09618d6d15865b5c4c01794f990602001611212565b60335460ff1615610a485760405162461bcd60e51b815260206004820152601060248201527f5061757361626c653a20706175736564000000000000000000000000000000006044820152606401610a37565b6040517f96852275d2408028e5465d831c70b45436794e221b81ff364822d4b56a56845790600090a1565b600054610100900460ff1661234b5760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608401610a37565b610a48612f1c565b600054610100900460ff166123be5760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608401610a37565b610a48612f93565b6123ce612262565b6033805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586124033390565b6040516001600160a01b03909116815260200160405180910390a1565b61242e60ff80546001019055565b61243c60fe80546001019055565b600061244760ff5490565b905060405180610120016040528082815260200183815260200160008152602001600081526020016000815260200161010454815260200160006001600160a01b0316815260200160fc60009054906101000a90046001600160a01b03166001600160a01b0316633c0c45666040518163ffffffff1660e01b8152600401602060405180830381865afa1580156124e2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125069190613884565b6001600160a01b0390811682526000602092830181905284815261010080845260408083208651815586860151600182810191909155878301516002830155606088015160038301556080880151600483015560a0880151600583015560c088015160068301805491881673ffffffffffffffffffffffffffffffffffffffff1990921691909117905560e08801516007909201805498909401511515600160a01b027fffffffffffffffffffffff000000000000000000000000000000000000000000909816919095161795909517905585815261010183528381208054928301815580825292902001839055805491519091849184917fd6eddd1118d71820909c1197aa966dbc15ed6f508554252169cc3d5ccac756ca9161262c91815260200190565b60405180910390a3505050565b6000818152610100602052604081205415801590610c46575050600081815261010060205260409020541490565b60335460ff16610a485760405162461bcd60e51b815260206004820152601460248201527f5061757361626c653a206e6f74207061757365640000000000000000000000006044820152606401610a37565b6002606554141561270c5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610a37565b6002606555565b61271c81612639565b6127685760405162461bcd60e51b815260206004820152601160248201527f41756374696f6e206e6f7420666f756e640000000000000000000000000000006044820152606401610a37565b600061277382611aa8565b9050806101000151156127c85760405162461bcd60e51b815260206004820152601760248201527f41756374696f6e20616c726561647920736574746c65640000000000000000006044820152606401610a37565b60608101516128195760405162461bcd60e51b815260206004820152601560248201527f41756374696f6e20686173206e6f7420626567756e00000000000000000000006044820152606401610a37565b806080015142101561286d5760405162461bcd60e51b815260206004820152601560248201527f41756374696f6e20686173206e6f7420656e64656400000000000000000000006044820152606401610a37565b60008281526101006020526040902060070180547fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff16600160a01b1790556128b560fe612ffe565b60fb5460fc54604080517f3c0c456600000000000000000000000000000000000000000000000000000000815290516001600160a01b03938416936323b872dd931691633c0c45669160048083019260209291908290030181865afa158015612922573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129469190613884565b60c084015160208501516040516001600160e01b031960e086901b1681526001600160a01b0393841660048201529290911660248301526044820152606401600060405180830381600087803b15801561299f57600080fd5b505af11580156129b3573d6000803e3d6000fd5b505050506129c981602001518260400151613055565b60405182907f2f95e6505f529dd225ce705685fe55440c01f2824ac3fb4303f6eef4bd453ff490600090a25050565b6001606555565b60fc546001600160a01b03166324d7806c336040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602401602060405180830381865afa158015612a55573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a799190613869565b610f3b5760405162461bcd60e51b815260206004820152601c60248201527f43616c6c6572206d7573742062652061646d696e6973747261746f72000000006044820152606401610a37565b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff1615612afd57612af88361326e565b505050565b826001600160a01b03166352d1902d6040518163ffffffff1660e01b8152600401602060405180830381865afa925050508015612b57575060408051601f3d908101601f19168201909252612b5491810190613910565b60015b612bc95760405162461bcd60e51b815260206004820152602e60248201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960448201527f6f6e206973206e6f7420555550530000000000000000000000000000000000006064820152608401610a37565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc8114612c5e5760405162461bcd60e51b815260206004820152602960248201527f45524331393637557067726164653a20756e737570706f727465642070726f7860448201527f6961626c655555494400000000000000000000000000000000000000000000006064820152608401610a37565b50612af8838383613339565b612c72612667565b6033805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa33612403565b612d0660405180610120016040528060008152602001600081526020016000815260200160008152602001600081526020016000815260200160006001600160a01b0316815260200160006001600160a01b031681526020016000151581525090565b5060009081526101006020818152604092839020835161012081018552815481526001820154928101929092526002810154938201939093526003830154606082015260048301546080820152600583015460a082015260068301546001600160a01b0390811660c083015260079093015492831660e0820152600160a01b90920460ff1615159082015290565b612d9e8282612e9e565b61155a5761010260009054906101000a90046001600160a01b03166001600160a01b031663d0e30db0826040518263ffffffff1660e01b81526004016000604051808303818588803b158015612df357600080fd5b505af1158015612e07573d6000803e3d6000fd5b5050610102546040517fa9059cbb0000000000000000000000000000000000000000000000000000000081526001600160a01b03878116600483015260248201879052909116935063a9059cbb925060440190506020604051808303816000875af1158015612e7a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612af89190613869565b6040805160008082526020820190925281906001600160a01b03851690617530908590604051612ece9190613929565b600060405180830381858888f193505050503d8060008114612f0c576040519150601f19603f3d011682016040523d82523d6000602084013e612f11565b606091505b509095945050505050565b600054610100900460ff16612f875760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608401610a37565b6033805460ff19169055565b600054610100900460ff166129f85760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608401610a37565b80548061304d5760405162461bcd60e51b815260206004820152601b60248201527f436f756e7465723a2064656372656d656e74206f766572666c6f7700000000006044820152606401610a37565b600019019055565b60fb546040517f4b3d267f000000000000000000000000000000000000000000000000000000008152600481018490526000916001600160a01b031690634b3d267f90602401600060405180830381865afa1580156130b8573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526130e09190810190613945565b9050600060fc60009054906101000a90046001600160a01b03166001600160a01b0316633c0c45666040518163ffffffff1660e01b8152600401602060405180830381865afa158015613137573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061315b9190613884565b905060006064610108548561317091906138a1565b61317a91906138c0565b905060006064610107548661318f91906138a1565b61319991906138c0565b905060006131a782846138e2565b6131b19087613842565b85516001600160a01b0316600090815261010a60205260409020549091506131da9084906138e2565b85516001600160a01b03908116600090815261010a6020908152604080832094909455880151909116815220546132129083906138e2565b6020808701516001600160a01b03908116600090815261010a9092526040808320939093558616815220546132489082906138e2565b6001600160a01b03909416600090815261010a6020526040902093909355505050505050565b6001600160a01b0381163b6132eb5760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201527f6f74206120636f6e7472616374000000000000000000000000000000000000006064820152608401610a37565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b61334283613364565b60008251118061334f5750805b15612af85761335e83836133a4565b50505050565b61336d8161326e565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b60606133c98383604051806060016040528060278152602001613a33602791396133d0565b9392505050565b6060600080856001600160a01b0316856040516133ed9190613929565b600060405180830381855af49150503d8060008114613428576040519150601f19603f3d011682016040523d82523d6000602084013e61342d565b606091505b509150915061343e86838387613448565b9695505050505050565b606083156134b45782516134ad576001600160a01b0385163b6134ad5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610a37565b50816134be565b6134be83836134c6565b949350505050565b8151156134d65781518083602001fd5b8060405162461bcd60e51b8152600401610a3791906137f9565b6001600160a01b0381168114610f3b57600080fd5b803560ff8116811461351657600080fd5b919050565b6000806000806000806000806000806101408b8d03121561353b57600080fd5b8a35613546816134f0565b995060208b0135613556816134f0565b985060408b0135613566816134f0565b975060608b0135965060808b0135955060a08b0135945061358960c08c01613505565b935060e08b013592506101008b013591506101208b013590509295989b9194979a5092959850565b6000602082840312156135c357600080fd5b81356133c9816134f0565b6000602082840312156135e057600080fd5b5035919050565b6000602082840312156135f957600080fd5b6133c982613505565b634e487b7160e01b600052604160045260246000fd5b60405160a0810167ffffffffffffffff8111828210171561363b5761363b613602565b60405290565b604051601f8201601f1916810167ffffffffffffffff8111828210171561366a5761366a613602565b604052919050565b600067ffffffffffffffff82111561368c5761368c613602565b50601f01601f191660200190565b600080604083850312156136ad57600080fd5b82356136b8816134f0565b9150602083013567ffffffffffffffff8111156136d457600080fd5b8301601f810185136136e557600080fd5b80356136f86136f382613672565b613641565b81815286602083850101111561370d57600080fd5b816020840160208301376000602083830101528093505050509250929050565b6000806040838503121561374057600080fd5b50508035926020909101359150565b600061012082019050825182526020830151602083015260408301516040830152606083015160608301526080830151608083015260a083015160a083015260c08301516001600160a01b0380821660c08501528060e08601511660e08501525050610100808401516137c58285018215159052565b505092915050565b60005b838110156137e85781810151838201526020016137d0565b8381111561335e5750506000910152565b60208152600082518060208401526138188160408501602087016137cd565b601f01601f19169190910160400192915050565b634e487b7160e01b600052601160045260246000fd5b6000828210156138545761385461382c565b500390565b8051801515811461351657600080fd5b60006020828403121561387b57600080fd5b6133c982613859565b60006020828403121561389657600080fd5b81516133c9816134f0565b60008160001904831182151516156138bb576138bb61382c565b500290565b6000826138dd57634e487b7160e01b600052601260045260246000fd5b500490565b600082198211156138f5576138f561382c565b500190565b634e487b7160e01b600052603260045260246000fd5b60006020828403121561392257600080fd5b5051919050565b6000825161393b8184602087016137cd565b9190910192915050565b6000602080838503121561395857600080fd5b825167ffffffffffffffff8082111561397057600080fd5b9084019060a0828703121561398457600080fd5b61398c613618565b8251613997816134f0565b8152828401516139a6816134f0565b818501526040830151828111156139bc57600080fd5b83019150601f820187136139cf57600080fd5b81516139dd6136f382613672565b81815288868386010111156139f157600080fd5b613a00828783018887016137cd565b604083015250613a1260608401613859565b6060820152613a2360808401613859565b6080820152969550505050505056fe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a2646970667358221220e9fc3424377a9c02967c2e1f3fb988232e035618e798d8c0f0095212c715c5ac64736f6c634300080c0033",
  "deployedBytecode": "0x6080604052600436106102e75760003560e01c8063659dd2b411610182578063b148440f116100d5578063d178687a11610084578063f071bf4f11610061578063f071bf4f14610960578063f6be71d114610977578063ffa1ad741461099757005b8063d178687a14610904578063db2e1eed14610932578063ec91f2a41461094957005b8063b68bb0ba116100b2578063b68bb0ba146108a4578063c2062005146108c4578063ce9c7c0d146108e457005b8063b148440f14610829578063b296024d14610857578063b53fb5081461088457005b80638299f9f911610131578063a340cf791161010e578063a340cf7914610790578063a3f4df7e146107be578063a8586f7b1461081457005b80638299f9f9146107285780638456cb59146107485780639e7123871461075d57005b806369f378871161015f57806369f37887146106bb5780637120334b146106db57806378bd7935146106fb57005b8063659dd2b414610672578063666077c91461068557806369a6e9c6146106a557005b80633799cd571161023a5780634f1ef286116101e9578063571a26a0116101c6578063571a26a01461057b5780635c975abb1461064557806363338b171461065d57005b80634f1ef2861461053e57806352d1902d1461055157806356d42bb31461056657005b80633f4ba83a116102175780633f4ba83a146104d05780633fc8cef3146104e557806346ca0f4d1461051e57005b80633799cd57146104605780633b6e0ef5146104905780633c0868f0146104b057005b8063279a0147116102965780632e993611116102735780632e993611146104005780633659cfe61461042057806336ebdb381461044057005b8063279a01471461039957806328b9e726146103b95780632a1e1ee1146103e957005b80630fb5a6b4116102c45780630fb5a6b41461035857806312065fe01461036f5780631f7418971461038257005b806301810a96146102f05780630acc9e09146103055780630ad2f0c31461032557005b366102ee57005b005b3480156102fc57600080fd5b506102ee6109e0565b34801561031157600080fd5b506102ee61032036600461351b565b610a4a565b34801561033157600080fd5b506103456103403660046135b1565b610c16565b6040519081526020015b60405180910390f35b34801561036457600080fd5b506103456101065481565b34801561037b57600080fd5b5047610345565b34801561038e57600080fd5b506103456101095481565b3480156103a557600080fd5b506102ee6103b43660046135ce565b610c4c565b3480156103c557600080fd5b506103d96103d43660046135ce565b610f3e565b604051901515815260200161034f565b3480156103f557600080fd5b506103456101085481565b34801561040c57600080fd5b506102ee61041b3660046135ce565b610f71565b34801561042c57600080fd5b506102ee61043b3660046135b1565b610f94565b34801561044c57600080fd5b506102ee61045b3660046135e7565b61110d565b34801561046c57600080fd5b506103d961047b3660046135ce565b60009081526101016020526040902054151590565b34801561049c57600080fd5b506102ee6104ab3660046135ce565b61121d565b3480156104bc57600080fd5b506103d96104cb3660046135ce565b611318565b3480156104dc57600080fd5b506102ee611323565b3480156104f157600080fd5b5061010254610506906001600160a01b031681565b6040516001600160a01b03909116815260200161034f565b34801561052a57600080fd5b5060fb54610506906001600160a01b031681565b6102ee61054c36600461369a565b6113f1565b34801561055d57600080fd5b5061034561155e565b34801561057257600080fd5b50610345611623565b34801561058757600080fd5b506105f36105963660046135ce565b61010060205260009081526040902080546001820154600283015460038401546004850154600586015460068701546007909701549596949593949293919290916001600160a01b0391821691811690600160a01b900460ff1689565b60408051998a5260208a0198909852968801959095526060870193909352608086019190915260a08501526001600160a01b0390811660c08501521660e083015215156101008201526101200161034f565b34801561065157600080fd5b5060335460ff166103d9565b34801561066957600080fd5b50610345611633565b6102ee6106803660046135ce565b61163e565b34801561069157600080fd5b506102ee6106a03660046135ce565b611959565b3480156106b157600080fd5b5061034560fd5481565b3480156106c757600080fd5b506103456106d636600461372d565b61197a565b3480156106e757600080fd5b506102ee6106f63660046135ce565b6119ac565b34801561070757600080fd5b5061071b6107163660046135ce565b611aa8565b60405161034f919061374f565b34801561073457600080fd5b5060fc54610506906001600160a01b031681565b34801561075457600080fd5b506102ee611b14565b34801561076957600080fd5b506103d96107783660046135ce565b60009081526101006020526040902060040154421190565b34801561079c57600080fd5b506103456107ab3660046135b1565b61010b6020526000908152604090205481565b3480156107ca57600080fd5b506108076040518060400160405280601181526020017f4554532041756374696f6e20486f75736500000000000000000000000000000081525081565b60405161034f91906137f9565b34801561082057600080fd5b50610345606481565b34801561083557600080fd5b506103456108443660046135b1565b61010a6020526000908152604090205481565b34801561086357600080fd5b50610105546108729060ff1681565b60405160ff909116815260200161034f565b34801561089057600080fd5b5061071b61089f3660046135ce565b611be2565b3480156108b057600080fd5b506102ee6108bf36600461372d565b611dbf565b3480156108d057600080fd5b506102ee6108df3660046135b1565b611f55565b3480156108f057600080fd5b506102ee6108ff3660046135ce565b61206a565b34801561091057600080fd5b5061034561091f3660046135ce565b6000908152610101602052604090205490565b34801561093e57600080fd5b506103456101045481565b34801561095557600080fd5b506103456101035481565b34801561096c57600080fd5b506103456101075481565b34801561098357600080fd5b506102ee6109923660046135ce565b612166565b3480156109a357600080fd5b506108076040518060400160405280600581526020017f302e302e3100000000000000000000000000000000000000000000000000000081525081565b6109e8612262565b60fd5460fe5410610a405760405162461bcd60e51b815260206004820152601560248201527f4e6f206f70656e2061756374696f6e20736c6f7473000000000000000000000060448201526064015b60405180910390fd5b610a486122b5565b565b600054610100900460ff1615808015610a6a5750600054600160ff909116105b80610a845750303b158015610a84575060005460ff166001145b610af65760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a65640000000000000000000000000000000000006064820152608401610a37565b6000805460ff191660011790558015610b19576000805461ff0019166101001790555b610b216122e0565b610b29612353565b610b316123c6565b60fb80546001600160a01b03808e1673ffffffffffffffffffffffffffffffffffffffff199283161790925560fc80548d84169083161790556101028054928c1692909116919091179055610b8760fe60009055565b600060ff55610b958861121d565b610b9e8561110d565b610ba784612166565b610bb08661206a565b610bb9876119ac565b610bc38284611dbf565b8015610c09576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b5050505050505050505050565b6001600160a01b038116600090815261010b602090815260408083205461010a909252822054610c469190613842565b92915050565b60fc546001600160a01b03166358594dc4336040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602401602060405180830381865afa158015610ca2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cc69190613869565b610d125760405162461bcd60e51b815260206004820152601960248201527f43616c6c6572206e6f742061756374696f6e206f7261636c65000000000000006044820152606401610a37565b60fc60009054906101000a90046001600160a01b03166001600160a01b0316633c0c45666040518163ffffffff1660e01b8152600401602060405180830381865afa158015610d65573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d899190613884565b60fb546040517f6352211e000000000000000000000000000000000000000000000000000000008152600481018490526001600160a01b039283169290911690636352211e90602401602060405180830381865afa158015610def573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e139190613884565b6001600160a01b031614610e695760405162461bcd60e51b815260206004820152601560248201527f43544147206e6f74206f776e65642062792045545300000000000000000000006044820152606401610a37565b60fd5460fe5410610ebc5760405162461bcd60e51b815260206004820152601560248201527f4e6f206f70656e2061756374696f6e20736c6f747300000000000000000000006044820152606401610a37565b6000818152610101602052604090205415610f32576000610edc82611be2565b9050806101000151610f305760405162461bcd60e51b815260206004820152600e60248201527f41756374696f6e206578697374730000000000000000000000000000000000006044820152606401610a37565b505b610f3b81612420565b50565b6000610f4982612639565b8015610c4657505060009081526101006020526040902060070154600160a01b900460ff1690565b610f79612667565b610f816126b9565b610f8a81612713565b610f3b6001606555565b306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614156110225760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201526b19195b1959d85d1958d85b1b60a21b6064820152608401610a37565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031661107d7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc546001600160a01b031690565b6001600160a01b0316146110e85760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201526b6163746976652070726f787960a01b6064820152608401610a37565b6110f1816129ff565b60408051600080825260208201909252610f3b91839190612ac5565b60fc546001600160a01b03166324d7806c336040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602401602060405180830381865afa158015611163573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111879190613869565b6111d35760405162461bcd60e51b815260206004820152601c60248201527f43616c6c6572206d7573742062652061646d696e6973747261746f72000000006044820152606401610a37565b610105805460ff191660ff83169081179091556040519081527ff4c67399e687b01a76a7d787b61d2f66f108fe083db1432dfd5efb35e20978c2906020015b60405180910390a150565b60fc546001600160a01b03166324d7806c336040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602401602060405180830381865afa158015611273573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112979190613869565b6112e35760405162461bcd60e51b815260206004820152601c60248201527f43616c6c6572206d7573742062652061646d696e6973747261746f72000000006044820152606401610a37565b60fd8190556040518181527f16e2e3ae9f2743d8576c746a1919a5317347ed51021f4cddaf26b4f8806f419490602001611212565b6000610c4682612639565b60fc546001600160a01b03166324d7806c336040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602401602060405180830381865afa158015611379573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061139d9190613869565b6113e95760405162461bcd60e51b815260206004820152601c60248201527f43616c6c6572206d7573742062652061646d696e6973747261746f72000000006044820152606401610a37565b610a48612c6a565b306001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016141561147f5760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201526b19195b1959d85d1958d85b1b60a21b6064820152608401610a37565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166114da7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc546001600160a01b031690565b6001600160a01b0316146115455760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201526b6163746976652070726f787960a01b6064820152608401610a37565b61154e826129ff565b61155a82826001612ac5565b5050565b6000306001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146115fe5760405162461bcd60e51b815260206004820152603860248201527f555550535570677261646561626c653a206d757374206e6f742062652063616c60448201527f6c6564207468726f7567682064656c656761746563616c6c00000000000000006064820152608401610a37565b507f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc90565b600061162e60ff5490565b905090565b600061162e60fe5490565b6116466126b9565b61164e612262565b61165781612639565b6116a35760405162461bcd60e51b815260206004820152601160248201527f41756374696f6e206e6f7420666f756e640000000000000000000000000000006044820152606401610a37565b60006116ae82612ca3565b60608101519091501561170e578060800151421061170e5760405162461bcd60e51b815260206004820152600d60248201527f41756374696f6e20656e646564000000000000000000000000000000000000006044820152606401610a37565b610104543410156117615760405162461bcd60e51b815260206004820152601f60248201527f4d7573742073656e64206174206c6561737420726573657276655072696365006044820152606401610a37565b61010554604082015160649161177c9160ff909116906138a1565b61178691906138c0565b816040015161179591906138e2565b3410156117e45760405162461bcd60e51b815260206004820152600b60248201527f42696420746f6f206c6f770000000000000000000000000000000000000000006044820152606401610a37565b60c08101516001600160a01b0381161561180657611806818360400151612d94565b60608201516118445761010654429060009061182290836138e2565b6000868152610100602052604090206003810193909355600490920191909155505b600083815261010060205260408120346002820155600601805473ffffffffffffffffffffffffffffffffffffffff19163317905560608301511561190957610103544284608001516118979190613842565b109050801561190957610103546118ae90426138e2565b6080840181815260008681526101006020526040908190206004019290925551905185917f6e912a3a9105bdd2af817ba5adc14e6c127c1035b5b648faa29ca0d58ab8ff4e9161190091815260200190565b60405180910390a25b6040805133815234602082015282151581830152905185917f1159164c56f277e6fc99c11731bd380e0347deb969b75523398734c252706ea3919081900360600190a2505050610f3b6001606555565b6119616126b9565b611969612262565b61197281612713565b610f8a6122b5565b610101602052816000526040600020818154811061199757600080fd5b90600052602060002001600091509150505481565b60fc546001600160a01b03166324d7806c336040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602401602060405180830381865afa158015611a02573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a269190613869565b611a725760405162461bcd60e51b815260206004820152601c60248201527f43616c6c6572206d7573742062652061646d696e6973747261746f72000000006044820152606401610a37565b6101038190556040518181527fd1ee265a58d7706a34825d0e7cede55bca991958637227dccd686911ae9c937090602001611212565b611b0b60405180610120016040528060008152602001600081526020016000815260200160008152602001600081526020016000815260200160006001600160a01b0316815260200160006001600160a01b031681526020016000151581525090565b610c4682612ca3565b60fc546001600160a01b03166324d7806c336040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602401602060405180830381865afa158015611b6a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b8e9190613869565b611bda5760405162461bcd60e51b815260206004820152601c60248201527f43616c6c6572206d7573742062652061646d696e6973747261746f72000000006044820152606401610a37565b610a486123c6565b611c4560405180610120016040528060008152602001600081526020016000815260200160008152602001600081526020016000815260200160006001600160a01b0316815260200160006001600160a01b031681526020016000151581525090565b60008281526101016020526040902054611ca15760405162461bcd60e51b815260206004820152601760248201527f4e6f2061756374696f6e7320666f7220746f6b656e49640000000000000000006044820152606401610a37565b60008281526101016020908152604080832080548251818502810185019093528083529192909190830182828015611cf857602002820191906000526020600020905b815481526020019060010190808311611ce4575b5050505050905061010060008260018451611d139190613842565b81518110611d2357611d236138fa565b6020908102919091018101518252818101929092526040908101600020815161012081018352815481526001820154938101939093526002810154918301919091526003810154606083015260048101546080830152600581015460a083015260068101546001600160a01b0390811660c084015260079091015490811660e0830152600160a01b900460ff1615156101008201529392505050565b60fc546001600160a01b03166324d7806c336040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602401602060405180830381865afa158015611e15573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e399190613869565b611e855760405162461bcd60e51b815260206004820152601c60248201527f43616c6c6572206d7573742062652061646d696e6973747261746f72000000006044820152606401610a37565b6064611e9182846138e2565b1115611edf5760405162461bcd60e51b815260206004820152601a60248201527f496e707574206d757374206e6f742065786365656420313030250000000000006044820152606401610a37565b61010982905561010881905580611ef7836064613842565b611f019190613842565b61010781905561010954610108546040805192835260208301919091528101919091527f6a59952a55f12772795fe6964c1b65f340b256f807578f311d3ce83f32f947679060600160405180910390a15050565b611f5d6126b9565b6000611f6882610c16565b9050600081118015611f7a5750478111155b1561205f576001600160a01b038216600090815261010b6020526040902054611fa49082906138e2565b6001600160a01b038316600090815261010b6020526040812091909155611fcb8383612e9e565b90508061201a5760405162461bcd60e51b815260206004820152600f60248201527f5472616e73666572206661696c656400000000000000000000000000000000006044820152606401610a37565b826001600160a01b03167f381b2269cade3eca66cdcb2ee190cab5c8562fa9cd63b9c8c29b76342abbde7e8360405161205591815260200190565b60405180910390a2505b50610f3b6001606555565b60fc546001600160a01b03166324d7806c336040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602401602060405180830381865afa1580156120c0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120e49190613869565b6121305760405162461bcd60e51b815260206004820152601c60248201527f43616c6c6572206d7573742062652061646d696e6973747261746f72000000006044820152606401610a37565b6101048190556040518181527f69e745465f7c298745d3703bcf0e583594428993c1c3920fea5d181c23e367ac90602001611212565b60fc546001600160a01b03166324d7806c336040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602401602060405180830381865afa1580156121bc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121e09190613869565b61222c5760405162461bcd60e51b815260206004820152601c60248201527f43616c6c6572206d7573742062652061646d696e6973747261746f72000000006044820152606401610a37565b6101068190556040518181527fcfbeaaafe85252eefcff52729a69be4e0a0fddc09618d6d15865b5c4c01794f990602001611212565b60335460ff1615610a485760405162461bcd60e51b815260206004820152601060248201527f5061757361626c653a20706175736564000000000000000000000000000000006044820152606401610a37565b6040517f96852275d2408028e5465d831c70b45436794e221b81ff364822d4b56a56845790600090a1565b600054610100900460ff1661234b5760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608401610a37565b610a48612f1c565b600054610100900460ff166123be5760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608401610a37565b610a48612f93565b6123ce612262565b6033805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586124033390565b6040516001600160a01b03909116815260200160405180910390a1565b61242e60ff80546001019055565b61243c60fe80546001019055565b600061244760ff5490565b905060405180610120016040528082815260200183815260200160008152602001600081526020016000815260200161010454815260200160006001600160a01b0316815260200160fc60009054906101000a90046001600160a01b03166001600160a01b0316633c0c45666040518163ffffffff1660e01b8152600401602060405180830381865afa1580156124e2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125069190613884565b6001600160a01b0390811682526000602092830181905284815261010080845260408083208651815586860151600182810191909155878301516002830155606088015160038301556080880151600483015560a0880151600583015560c088015160068301805491881673ffffffffffffffffffffffffffffffffffffffff1990921691909117905560e08801516007909201805498909401511515600160a01b027fffffffffffffffffffffff000000000000000000000000000000000000000000909816919095161795909517905585815261010183528381208054928301815580825292902001839055805491519091849184917fd6eddd1118d71820909c1197aa966dbc15ed6f508554252169cc3d5ccac756ca9161262c91815260200190565b60405180910390a3505050565b6000818152610100602052604081205415801590610c46575050600081815261010060205260409020541490565b60335460ff16610a485760405162461bcd60e51b815260206004820152601460248201527f5061757361626c653a206e6f74207061757365640000000000000000000000006044820152606401610a37565b6002606554141561270c5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610a37565b6002606555565b61271c81612639565b6127685760405162461bcd60e51b815260206004820152601160248201527f41756374696f6e206e6f7420666f756e640000000000000000000000000000006044820152606401610a37565b600061277382611aa8565b9050806101000151156127c85760405162461bcd60e51b815260206004820152601760248201527f41756374696f6e20616c726561647920736574746c65640000000000000000006044820152606401610a37565b60608101516128195760405162461bcd60e51b815260206004820152601560248201527f41756374696f6e20686173206e6f7420626567756e00000000000000000000006044820152606401610a37565b806080015142101561286d5760405162461bcd60e51b815260206004820152601560248201527f41756374696f6e20686173206e6f7420656e64656400000000000000000000006044820152606401610a37565b60008281526101006020526040902060070180547fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff16600160a01b1790556128b560fe612ffe565b60fb5460fc54604080517f3c0c456600000000000000000000000000000000000000000000000000000000815290516001600160a01b03938416936323b872dd931691633c0c45669160048083019260209291908290030181865afa158015612922573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129469190613884565b60c084015160208501516040516001600160e01b031960e086901b1681526001600160a01b0393841660048201529290911660248301526044820152606401600060405180830381600087803b15801561299f57600080fd5b505af11580156129b3573d6000803e3d6000fd5b505050506129c981602001518260400151613055565b60405182907f2f95e6505f529dd225ce705685fe55440c01f2824ac3fb4303f6eef4bd453ff490600090a25050565b6001606555565b60fc546001600160a01b03166324d7806c336040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602401602060405180830381865afa158015612a55573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a799190613869565b610f3b5760405162461bcd60e51b815260206004820152601c60248201527f43616c6c6572206d7573742062652061646d696e6973747261746f72000000006044820152606401610a37565b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff1615612afd57612af88361326e565b505050565b826001600160a01b03166352d1902d6040518163ffffffff1660e01b8152600401602060405180830381865afa925050508015612b57575060408051601f3d908101601f19168201909252612b5491810190613910565b60015b612bc95760405162461bcd60e51b815260206004820152602e60248201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960448201527f6f6e206973206e6f7420555550530000000000000000000000000000000000006064820152608401610a37565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc8114612c5e5760405162461bcd60e51b815260206004820152602960248201527f45524331393637557067726164653a20756e737570706f727465642070726f7860448201527f6961626c655555494400000000000000000000000000000000000000000000006064820152608401610a37565b50612af8838383613339565b612c72612667565b6033805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa33612403565b612d0660405180610120016040528060008152602001600081526020016000815260200160008152602001600081526020016000815260200160006001600160a01b0316815260200160006001600160a01b031681526020016000151581525090565b5060009081526101006020818152604092839020835161012081018552815481526001820154928101929092526002810154938201939093526003830154606082015260048301546080820152600583015460a082015260068301546001600160a01b0390811660c083015260079093015492831660e0820152600160a01b90920460ff1615159082015290565b612d9e8282612e9e565b61155a5761010260009054906101000a90046001600160a01b03166001600160a01b031663d0e30db0826040518263ffffffff1660e01b81526004016000604051808303818588803b158015612df357600080fd5b505af1158015612e07573d6000803e3d6000fd5b5050610102546040517fa9059cbb0000000000000000000000000000000000000000000000000000000081526001600160a01b03878116600483015260248201879052909116935063a9059cbb925060440190506020604051808303816000875af1158015612e7a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612af89190613869565b6040805160008082526020820190925281906001600160a01b03851690617530908590604051612ece9190613929565b600060405180830381858888f193505050503d8060008114612f0c576040519150601f19603f3d011682016040523d82523d6000602084013e612f11565b606091505b509095945050505050565b600054610100900460ff16612f875760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608401610a37565b6033805460ff19169055565b600054610100900460ff166129f85760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608401610a37565b80548061304d5760405162461bcd60e51b815260206004820152601b60248201527f436f756e7465723a2064656372656d656e74206f766572666c6f7700000000006044820152606401610a37565b600019019055565b60fb546040517f4b3d267f000000000000000000000000000000000000000000000000000000008152600481018490526000916001600160a01b031690634b3d267f90602401600060405180830381865afa1580156130b8573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526130e09190810190613945565b9050600060fc60009054906101000a90046001600160a01b03166001600160a01b0316633c0c45666040518163ffffffff1660e01b8152600401602060405180830381865afa158015613137573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061315b9190613884565b905060006064610108548561317091906138a1565b61317a91906138c0565b905060006064610107548661318f91906138a1565b61319991906138c0565b905060006131a782846138e2565b6131b19087613842565b85516001600160a01b0316600090815261010a60205260409020549091506131da9084906138e2565b85516001600160a01b03908116600090815261010a6020908152604080832094909455880151909116815220546132129083906138e2565b6020808701516001600160a01b03908116600090815261010a9092526040808320939093558616815220546132489082906138e2565b6001600160a01b03909416600090815261010a6020526040902093909355505050505050565b6001600160a01b0381163b6132eb5760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201527f6f74206120636f6e7472616374000000000000000000000000000000000000006064820152608401610a37565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b61334283613364565b60008251118061334f5750805b15612af85761335e83836133a4565b50505050565b61336d8161326e565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b60606133c98383604051806060016040528060278152602001613a33602791396133d0565b9392505050565b6060600080856001600160a01b0316856040516133ed9190613929565b600060405180830381855af49150503d8060008114613428576040519150601f19603f3d011682016040523d82523d6000602084013e61342d565b606091505b509150915061343e86838387613448565b9695505050505050565b606083156134b45782516134ad576001600160a01b0385163b6134ad5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610a37565b50816134be565b6134be83836134c6565b949350505050565b8151156134d65781518083602001fd5b8060405162461bcd60e51b8152600401610a3791906137f9565b6001600160a01b0381168114610f3b57600080fd5b803560ff8116811461351657600080fd5b919050565b6000806000806000806000806000806101408b8d03121561353b57600080fd5b8a35613546816134f0565b995060208b0135613556816134f0565b985060408b0135613566816134f0565b975060608b0135965060808b0135955060a08b0135945061358960c08c01613505565b935060e08b013592506101008b013591506101208b013590509295989b9194979a5092959850565b6000602082840312156135c357600080fd5b81356133c9816134f0565b6000602082840312156135e057600080fd5b5035919050565b6000602082840312156135f957600080fd5b6133c982613505565b634e487b7160e01b600052604160045260246000fd5b60405160a0810167ffffffffffffffff8111828210171561363b5761363b613602565b60405290565b604051601f8201601f1916810167ffffffffffffffff8111828210171561366a5761366a613602565b604052919050565b600067ffffffffffffffff82111561368c5761368c613602565b50601f01601f191660200190565b600080604083850312156136ad57600080fd5b82356136b8816134f0565b9150602083013567ffffffffffffffff8111156136d457600080fd5b8301601f810185136136e557600080fd5b80356136f86136f382613672565b613641565b81815286602083850101111561370d57600080fd5b816020840160208301376000602083830101528093505050509250929050565b6000806040838503121561374057600080fd5b50508035926020909101359150565b600061012082019050825182526020830151602083015260408301516040830152606083015160608301526080830151608083015260a083015160a083015260c08301516001600160a01b0380821660c08501528060e08601511660e08501525050610100808401516137c58285018215159052565b505092915050565b60005b838110156137e85781810151838201526020016137d0565b8381111561335e5750506000910152565b60208152600082518060208401526138188160408501602087016137cd565b601f01601f19169190910160400192915050565b634e487b7160e01b600052601160045260246000fd5b6000828210156138545761385461382c565b500390565b8051801515811461351657600080fd5b60006020828403121561387b57600080fd5b6133c982613859565b60006020828403121561389657600080fd5b81516133c9816134f0565b60008160001904831182151516156138bb576138bb61382c565b500290565b6000826138dd57634e487b7160e01b600052601260045260246000fd5b500490565b600082198211156138f5576138f561382c565b500190565b634e487b7160e01b600052603260045260246000fd5b60006020828403121561392257600080fd5b5051919050565b6000825161393b8184602087016137cd565b9190910192915050565b6000602080838503121561395857600080fd5b825167ffffffffffffffff8082111561397057600080fd5b9084019060a0828703121561398457600080fd5b61398c613618565b8251613997816134f0565b8152828401516139a6816134f0565b818501526040830151828111156139bc57600080fd5b83019150601f820187136139cf57600080fd5b81516139dd6136f382613672565b81815288868386010111156139f157600080fd5b613a00828783018887016137cd565b604083015250613a1260608401613859565b6060820152613a2360808401613859565b6080820152969550505050505056fe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a2646970667358221220e9fc3424377a9c02967c2e1f3fb988232e035618e798d8c0f0095212c715c5ac64736f6c634300080c0033",
  "devdoc": {
    "author": "Ethereum Tag Service <team@ets.xyz>",
    "kind": "dev",
    "methods": {
      "constructor": {
        "custom:oz-upgrades-unsafe-allow": "constructor"
      },
      "drawDown(address)": {
        "params": {
          "_account": "Address of account being drawn down and which will receive the funds."
        }
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "proxiableUUID()": {
        "details": "Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate the implementation's compatibility when performing an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier."
      },
      "settleAuction(uint256)": {
        "details": "This function can only be called when the contract is paused."
      },
      "upgradeTo(address)": {
        "custom:oz-upgrades-unsafe-allow-reachable": "delegatecall",
        "details": "Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
      },
      "upgradeToAndCall(address,bytes)": {
        "custom:oz-upgrades-unsafe-allow-reachable": "delegatecall",
        "details": "Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
      }
    },
    "stateVariables": {
      "accrued": {
        "details": "Map for holding amount accrued to participant address wallets."
      },
      "auctions": {
        "details": "Mapping of auction ID to auction."
      },
      "auctionsByTokenId": {
        "details": "Mapping of tokenId to array of auction ids."
      },
      "creatorPercentage": {
        "details": "Percentage of auction proceeds allocated to CTAG Creator"
      },
      "duration": {
        "details": "The duration of a single auction"
      },
      "minBidIncrementPercentage": {
        "details": "The minimum percentage difference between the last bid amount and the current bid"
      },
      "paid": {
        "details": "Map for holding lifetime amount drawn down from accrued by participants."
      },
      "platformPercentage": {
        "details": "Percentage of auction proceeds allocated to ETS."
      },
      "relayerPercentage": {
        "details": "Percentage of auction proceeds allocated to CTAG Relayer."
      },
      "reservePrice": {
        "details": "The minimum price accepted in an auction"
      },
      "timeBuffer": {
        "details": "The minimum amount of time left in an auction after a new bid is created"
      },
      "weth": {
        "details": "The address of the WETH contract"
      }
    },
    "title": "ETSAuctionHouse",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "NAME()": {
        "notice": "Public constants"
      },
      "drawDown(address)": {
        "notice": "Function for withdrawing funds from an accrual account. Can be called by the account owner or on behalf of the account. Does nothing when there is nothing due to the account."
      },
      "maxAuctions()": {
        "notice": "Public variables"
      },
      "settleAuction(uint256)": {
        "notice": "Settle the auction."
      },
      "settleCurrentAndCreateNewAuction(uint256)": {
        "notice": "Settle auction, and release next auction."
      }
    },
    "notice": "ETSAuctionHouse contract governs the sale of Ethereum Tag Service composable tags (CTAGs).",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 915,
        "contract": "contracts/ETSAuctionHouse.sol:ETSAuctionHouse",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 918,
        "contract": "contracts/ETSAuctionHouse.sol:ETSAuctionHouse",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 3526,
        "contract": "contracts/ETSAuctionHouse.sol:ETSAuctionHouse",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 1236,
        "contract": "contracts/ETSAuctionHouse.sol:ETSAuctionHouse",
        "label": "_paused",
        "offset": 0,
        "slot": "51",
        "type": "t_bool"
      },
      {
        "astId": 1341,
        "contract": "contracts/ETSAuctionHouse.sol:ETSAuctionHouse",
        "label": "__gap",
        "offset": 0,
        "slot": "52",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 1357,
        "contract": "contracts/ETSAuctionHouse.sol:ETSAuctionHouse",
        "label": "_status",
        "offset": 0,
        "slot": "101",
        "type": "t_uint256"
      },
      {
        "astId": 1426,
        "contract": "contracts/ETSAuctionHouse.sol:ETSAuctionHouse",
        "label": "__gap",
        "offset": 0,
        "slot": "102",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 897,
        "contract": "contracts/ETSAuctionHouse.sol:ETSAuctionHouse",
        "label": "__gap",
        "offset": 0,
        "slot": "151",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 1213,
        "contract": "contracts/ETSAuctionHouse.sol:ETSAuctionHouse",
        "label": "__gap",
        "offset": 0,
        "slot": "201",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 11177,
        "contract": "contracts/ETSAuctionHouse.sol:ETSAuctionHouse",
        "label": "etsToken",
        "offset": 0,
        "slot": "251",
        "type": "t_contract(IETSToken)15465"
      },
      {
        "astId": 11180,
        "contract": "contracts/ETSAuctionHouse.sol:ETSAuctionHouse",
        "label": "etsAccessControls",
        "offset": 0,
        "slot": "252",
        "type": "t_contract(IETSAccessControls)14902"
      },
      {
        "astId": 11193,
        "contract": "contracts/ETSAuctionHouse.sol:ETSAuctionHouse",
        "label": "maxAuctions",
        "offset": 0,
        "slot": "253",
        "type": "t_uint256"
      },
      {
        "astId": 11196,
        "contract": "contracts/ETSAuctionHouse.sol:ETSAuctionHouse",
        "label": "activeAuctions",
        "offset": 0,
        "slot": "254",
        "type": "t_struct(Counter)3533_storage"
      },
      {
        "astId": 11199,
        "contract": "contracts/ETSAuctionHouse.sol:ETSAuctionHouse",
        "label": "auctionId",
        "offset": 0,
        "slot": "255",
        "type": "t_struct(Counter)3533_storage"
      },
      {
        "astId": 11205,
        "contract": "contracts/ETSAuctionHouse.sol:ETSAuctionHouse",
        "label": "auctions",
        "offset": 0,
        "slot": "256",
        "type": "t_mapping(t_uint256,t_struct(Auction)14923_storage)"
      },
      {
        "astId": 11211,
        "contract": "contracts/ETSAuctionHouse.sol:ETSAuctionHouse",
        "label": "auctionsByTokenId",
        "offset": 0,
        "slot": "257",
        "type": "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)"
      },
      {
        "astId": 11214,
        "contract": "contracts/ETSAuctionHouse.sol:ETSAuctionHouse",
        "label": "weth",
        "offset": 0,
        "slot": "258",
        "type": "t_address"
      },
      {
        "astId": 11217,
        "contract": "contracts/ETSAuctionHouse.sol:ETSAuctionHouse",
        "label": "timeBuffer",
        "offset": 0,
        "slot": "259",
        "type": "t_uint256"
      },
      {
        "astId": 11220,
        "contract": "contracts/ETSAuctionHouse.sol:ETSAuctionHouse",
        "label": "reservePrice",
        "offset": 0,
        "slot": "260",
        "type": "t_uint256"
      },
      {
        "astId": 11223,
        "contract": "contracts/ETSAuctionHouse.sol:ETSAuctionHouse",
        "label": "minBidIncrementPercentage",
        "offset": 0,
        "slot": "261",
        "type": "t_uint8"
      },
      {
        "astId": 11226,
        "contract": "contracts/ETSAuctionHouse.sol:ETSAuctionHouse",
        "label": "duration",
        "offset": 0,
        "slot": "262",
        "type": "t_uint256"
      },
      {
        "astId": 11229,
        "contract": "contracts/ETSAuctionHouse.sol:ETSAuctionHouse",
        "label": "creatorPercentage",
        "offset": 0,
        "slot": "263",
        "type": "t_uint256"
      },
      {
        "astId": 11232,
        "contract": "contracts/ETSAuctionHouse.sol:ETSAuctionHouse",
        "label": "relayerPercentage",
        "offset": 0,
        "slot": "264",
        "type": "t_uint256"
      },
      {
        "astId": 11235,
        "contract": "contracts/ETSAuctionHouse.sol:ETSAuctionHouse",
        "label": "platformPercentage",
        "offset": 0,
        "slot": "265",
        "type": "t_uint256"
      },
      {
        "astId": 11240,
        "contract": "contracts/ETSAuctionHouse.sol:ETSAuctionHouse",
        "label": "accrued",
        "offset": 0,
        "slot": "266",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 11245,
        "contract": "contracts/ETSAuctionHouse.sol:ETSAuctionHouse",
        "label": "paid",
        "offset": 0,
        "slot": "267",
        "type": "t_mapping(t_address,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_address_payable": {
        "encoding": "inplace",
        "label": "address payable",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IETSAccessControls)14902": {
        "encoding": "inplace",
        "label": "contract IETSAccessControls",
        "numberOfBytes": "20"
      },
      "t_contract(IETSToken)15465": {
        "encoding": "inplace",
        "label": "contract IETSToken",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256[])",
        "numberOfBytes": "32",
        "value": "t_array(t_uint256)dyn_storage"
      },
      "t_mapping(t_uint256,t_struct(Auction)14923_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct IETSAuctionHouse.Auction)",
        "numberOfBytes": "32",
        "value": "t_struct(Auction)14923_storage"
      },
      "t_struct(Auction)14923_storage": {
        "encoding": "inplace",
        "label": "struct IETSAuctionHouse.Auction",
        "members": [
          {
            "astId": 14906,
            "contract": "contracts/ETSAuctionHouse.sol:ETSAuctionHouse",
            "label": "auctionId",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 14908,
            "contract": "contracts/ETSAuctionHouse.sol:ETSAuctionHouse",
            "label": "tokenId",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 14910,
            "contract": "contracts/ETSAuctionHouse.sol:ETSAuctionHouse",
            "label": "amount",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 14912,
            "contract": "contracts/ETSAuctionHouse.sol:ETSAuctionHouse",
            "label": "startTime",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 14914,
            "contract": "contracts/ETSAuctionHouse.sol:ETSAuctionHouse",
            "label": "endTime",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 14916,
            "contract": "contracts/ETSAuctionHouse.sol:ETSAuctionHouse",
            "label": "reservePrice",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 14918,
            "contract": "contracts/ETSAuctionHouse.sol:ETSAuctionHouse",
            "label": "bidder",
            "offset": 0,
            "slot": "6",
            "type": "t_address_payable"
          },
          {
            "astId": 14920,
            "contract": "contracts/ETSAuctionHouse.sol:ETSAuctionHouse",
            "label": "auctioneer",
            "offset": 0,
            "slot": "7",
            "type": "t_address_payable"
          },
          {
            "astId": 14922,
            "contract": "contracts/ETSAuctionHouse.sol:ETSAuctionHouse",
            "label": "settled",
            "offset": 20,
            "slot": "7",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "256"
      },
      "t_struct(Counter)3533_storage": {
        "encoding": "inplace",
        "label": "struct CountersUpgradeable.Counter",
        "members": [
          {
            "astId": 3532,
            "contract": "contracts/ETSAuctionHouse.sol:ETSAuctionHouse",
            "label": "_value",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}