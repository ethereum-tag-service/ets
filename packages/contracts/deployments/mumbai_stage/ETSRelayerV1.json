{
  "address": "0x5aFbc0d9d7864A2d901e121124679e80b94f384f",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "relayerAddress",
          "type": "address"
        }
      ],
      "name": "RelayerOwnerChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "relayerAddress",
          "type": "address"
        }
      ],
      "name": "RelayerPauseToggledByOwner",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "inputs": [],
      "name": "IID_IETSRELAYER",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "NAME",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "VERSION",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "string",
              "name": "targetURI",
              "type": "string"
            },
            {
              "internalType": "string[]",
              "name": "tagStrings",
              "type": "string[]"
            },
            {
              "internalType": "string",
              "name": "recordType",
              "type": "string"
            }
          ],
          "internalType": "struct IETS.TaggingRecordRawInput[]",
          "name": "_rawInput",
          "type": "tuple[]"
        }
      ],
      "name": "applyTags",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newOwner",
          "type": "address"
        }
      ],
      "name": "changeOwner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "string",
              "name": "targetURI",
              "type": "string"
            },
            {
              "internalType": "string[]",
              "name": "tagStrings",
              "type": "string[]"
            },
            {
              "internalType": "string",
              "name": "recordType",
              "type": "string"
            }
          ],
          "internalType": "struct IETS.TaggingRecordRawInput",
          "name": "_rawInput",
          "type": "tuple"
        },
        {
          "internalType": "enum IETS.TaggingAction",
          "name": "_action",
          "type": "uint8"
        }
      ],
      "name": "computeTaggingFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "fee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "tagCount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "creator",
      "outputs": [
        {
          "internalType": "address payable",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ets",
      "outputs": [
        {
          "internalType": "contract IETS",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "etsAccessControls",
      "outputs": [
        {
          "internalType": "contract IETSAccessControls",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "etsTarget",
      "outputs": [
        {
          "internalType": "contract IETSTarget",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "etsToken",
      "outputs": [
        {
          "internalType": "contract IETSToken",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getCreator",
      "outputs": [
        {
          "internalType": "address payable",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string[]",
          "name": "_tags",
          "type": "string[]"
        }
      ],
      "name": "getOrCreateTagIds",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "_tagIds",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getOwner",
      "outputs": [
        {
          "internalType": "address payable",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRelayerName",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_relayerName",
          "type": "string"
        },
        {
          "internalType": "contract IETS",
          "name": "_ets",
          "type": "address"
        },
        {
          "internalType": "contract IETSToken",
          "name": "_etsToken",
          "type": "address"
        },
        {
          "internalType": "contract IETSTarget",
          "name": "_etsTarget",
          "type": "address"
        },
        {
          "internalType": "contract IETSAccessControls",
          "name": "_etsAccessControls",
          "type": "address"
        },
        {
          "internalType": "address payable",
          "name": "_creator",
          "type": "address"
        },
        {
          "internalType": "address payable",
          "name": "_owner",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isPaused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "relayerName",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "string",
              "name": "targetURI",
              "type": "string"
            },
            {
              "internalType": "string[]",
              "name": "tagStrings",
              "type": "string[]"
            },
            {
              "internalType": "string",
              "name": "recordType",
              "type": "string"
            }
          ],
          "internalType": "struct IETS.TaggingRecordRawInput[]",
          "name": "_rawInput",
          "type": "tuple[]"
        }
      ],
      "name": "removeTags",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "string",
              "name": "targetURI",
              "type": "string"
            },
            {
              "internalType": "string[]",
              "name": "tagStrings",
              "type": "string[]"
            },
            {
              "internalType": "string",
              "name": "recordType",
              "type": "string"
            }
          ],
          "internalType": "struct IETS.TaggingRecordRawInput[]",
          "name": "_rawInput",
          "type": "tuple[]"
        }
      ],
      "name": "replaceTags",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "version",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "numDeployments": 1,
  "solcInputHash": "602022f4d13556fbcfcb291cc0da90cb",
  "metadata": "{\"compiler\":{\"version\":\"0.8.12+commit.f00d7308\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"relayerAddress\",\"type\":\"address\"}],\"name\":\"RelayerOwnerChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"relayerAddress\",\"type\":\"address\"}],\"name\":\"RelayerPauseToggledByOwner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"IID_IETSRELAYER\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"NAME\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"VERSION\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"targetURI\",\"type\":\"string\"},{\"internalType\":\"string[]\",\"name\":\"tagStrings\",\"type\":\"string[]\"},{\"internalType\":\"string\",\"name\":\"recordType\",\"type\":\"string\"}],\"internalType\":\"struct IETS.TaggingRecordRawInput[]\",\"name\":\"_rawInput\",\"type\":\"tuple[]\"}],\"name\":\"applyTags\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"changeOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"targetURI\",\"type\":\"string\"},{\"internalType\":\"string[]\",\"name\":\"tagStrings\",\"type\":\"string[]\"},{\"internalType\":\"string\",\"name\":\"recordType\",\"type\":\"string\"}],\"internalType\":\"struct IETS.TaggingRecordRawInput\",\"name\":\"_rawInput\",\"type\":\"tuple\"},{\"internalType\":\"enum IETS.TaggingAction\",\"name\":\"_action\",\"type\":\"uint8\"}],\"name\":\"computeTaggingFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tagCount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"creator\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ets\",\"outputs\":[{\"internalType\":\"contract IETS\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"etsAccessControls\",\"outputs\":[{\"internalType\":\"contract IETSAccessControls\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"etsTarget\",\"outputs\":[{\"internalType\":\"contract IETSTarget\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"etsToken\",\"outputs\":[{\"internalType\":\"contract IETSToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCreator\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string[]\",\"name\":\"_tags\",\"type\":\"string[]\"}],\"name\":\"getOrCreateTagIds\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_tagIds\",\"type\":\"uint256[]\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRelayerName\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_relayerName\",\"type\":\"string\"},{\"internalType\":\"contract IETS\",\"name\":\"_ets\",\"type\":\"address\"},{\"internalType\":\"contract IETSToken\",\"name\":\"_etsToken\",\"type\":\"address\"},{\"internalType\":\"contract IETSTarget\",\"name\":\"_etsTarget\",\"type\":\"address\"},{\"internalType\":\"contract IETSAccessControls\",\"name\":\"_etsAccessControls\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"_creator\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"relayerName\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"targetURI\",\"type\":\"string\"},{\"internalType\":\"string[]\",\"name\":\"tagStrings\",\"type\":\"string[]\"},{\"internalType\":\"string\",\"name\":\"recordType\",\"type\":\"string\"}],\"internalType\":\"struct IETS.TaggingRecordRawInput[]\",\"name\":\"_rawInput\",\"type\":\"tuple[]\"}],\"name\":\"removeTags\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"targetURI\",\"type\":\"string\"},{\"internalType\":\"string[]\",\"name\":\"tagStrings\",\"type\":\"string[]\"},{\"internalType\":\"string\",\"name\":\"recordType\",\"type\":\"string\"}],\"internalType\":\"struct IETS.TaggingRecordRawInput[]\",\"name\":\"_rawInput\",\"type\":\"tuple[]\"}],\"name\":\"replaceTags\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"applyTags((string,string[],string)[])\":{\"params\":{\"_rawInput\":\"Raw client input data formed as TaggingRecordRawInput struct.\"}},\"changeOwner(address)\":{\"details\":\"This function can only be called by the owner when the contract is paused.\",\"params\":{\"newOwner\":\"Address of the new contract owner.\"}},\"computeTaggingFee((string,string[],string),uint8)\":{\"params\":{\"_action\":\"Integer representing action to be performed according to enum TaggingAction.\",\"_rawInput\":\"Raw client input data formed as TaggingRecordRawInput struct.\"},\"returns\":{\"fee\":\"Calculated tagging fee in ETH/Matic\",\"tagCount\":\"Number of new tags being added to tagging record.\"}},\"constructor\":{\"custom:oz-upgrades-unsafe-allow\":\"constructor\"},\"getCreator()\":{\"returns\":{\"_0\":\"address of the creator of the Relayer contract.\"}},\"getOrCreateTagIds(string[])\":{\"params\":{\"_tags\":\"Array of tag strings.\"},\"returns\":{\"_tagIds\":\"Array of Id of CTAG Ids.\"}},\"getOwner()\":{\"returns\":{\"_0\":\"address of contract owner.\"}},\"getRelayerName()\":{\"returns\":{\"_0\":\"name of the Relayer contract as a string.\"}},\"isPaused()\":{\"details\":\"Pause functionality should be provided by OpenZeppelin Pausable utility.\",\"returns\":{\"_0\":\"boolean: true for paused; false for not paused.\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"pause()\":{\"details\":\"This function can only be called by the owner when the contract is unpaused.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"removeTags((string,string[],string)[])\":{\"params\":{\"_rawInput\":\"Raw client input data formed as TaggingRecordRawInput struct.\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"replaceTags((string,string[],string)[])\":{\"params\":{\"_rawInput\":\"Raw client input data formed as TaggingRecordRawInput struct.\"}},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"unpause()\":{\"details\":\"This function can only be called by the owner when the contract is paused.\"}},\"stateVariables\":{\"ets\":{\"details\":\"Address and interface for ETS Core.\"},\"etsAccessControls\":{\"details\":\"Address and interface for ETS Access Controls.\"},\"etsTarget\":{\"details\":\"Address and interface for ETS Target.\"},\"etsToken\":{\"details\":\"Address and interface for ETS Token\"},\"relayerName\":{\"details\":\"Public name for Relayer instance.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"applyTags((string,string[],string)[])\":{\"notice\":\"Apply one or more tags to a targetURI using tagging record raw client input data.\"},\"changeOwner(address)\":{\"notice\":\"Transfer this contract to a new owner.\"},\"computeTaggingFee((string,string[],string),uint8)\":{\"notice\":\"Compute tagging fee for raw input and desired action.\"},\"creator()\":{\"notice\":\"Address that built this smart contract.\"},\"getCreator()\":{\"notice\":\"Returns address of an IETSRelayer contract creator.\"},\"getOrCreateTagIds(string[])\":{\"notice\":\"Get or create CTAG tokens from tag strings. Combo function that accepts a tag strings and returns corresponding CTAG token Id if it exists, or if it doesn't exist, creates a new CTAG and then returns corresponding Id. Only ETS Publisher contracts may call this function.\"},\"getOwner()\":{\"notice\":\"Returns address of an IETSRelayer contract owner.\"},\"getRelayerName()\":{\"notice\":\"Returns human readable name for this IETSRelayer contract.\"},\"isPaused()\":{\"notice\":\"Check whether this contract has been pasued by the owner.\"},\"pause()\":{\"notice\":\"Pause this relayer contract.\"},\"removeTags((string,string[],string)[])\":{\"notice\":\"Remove one or more tags from a tagging record using raw data for record lookup.\"},\"replaceTags((string,string[],string)[])\":{\"notice\":\"Replace entire tag set in tagging record using raw data for record lookup. If supplied tag strings don't have CTAGs, new ones are minted.\"},\"unpause()\":{\"notice\":\"Unpause this relayer contract.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/relayers/ETSRelayerV1.sol\":\"ETSRelayerV1\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControlUpgradeable {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0xb8f5302f12138c5561362e88a78d061573e6298b7a1a5afe84a1e2c8d4d5aeaa\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x4075622496acc77fd6d4de4cc30a8577a744d5c75afad33fdeacf1704d6eda98\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x89be10e757d242e9b18d5a32c9fbe2019f6d63052bbe46397a430a1d60d7f794\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    function __Pausable_init() internal onlyInitializing {\\n        __Pausable_init_unchained();\\n    }\\n\\n    function __Pausable_init_unchained() internal onlyInitializing {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x40c636b4572ff5f1dc50cf22097e93c0723ee14eff87e99ac2b02636eeca1250\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == _ENTERED;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xb82ef33f43b6b96109687d91b39c94573fdccaaa423fe28e8ba0977b31c023e0\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721Upgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xbe63437e37e32162d5d11ea8f11a44378c092b4bcbb05b51a813fe4bf33297d4\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9c80f545915582e63fe206c6ce27cbe85a86fc10b9cd2a0e8c9488fb7c2ee422\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x9a3b990bd56d139df3e454a9edf1c64668530b5a77fc32eb063bc206f958274a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\"},\"contracts/interfaces/IETS.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n/**\\n * @title IETS\\n * @author Ethereum Tag Service <team@ets.xyz>\\n *\\n *  \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\n *  \\u2588\\u2588\\u2554\\u2550\\u2550\\u2550\\u2550\\u255d\\u255a\\u2550\\u2550\\u2588\\u2588\\u2554\\u2550\\u2550\\u255d\\u2588\\u2588\\u2554\\u2550\\u2550\\u2550\\u2550\\u255d\\n *  \\u2588\\u2588\\u2588\\u2588\\u2588\\u2557     \\u2588\\u2588\\u2551   \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\n *  \\u2588\\u2588\\u2554\\u2550\\u2550\\u255d     \\u2588\\u2588\\u2551   \\u255a\\u2550\\u2550\\u2550\\u2550\\u2588\\u2588\\u2551\\n *  \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557   \\u2588\\u2588\\u2551   \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2551`\\n *  \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d   \\u255a\\u2550\\u255d   \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\n *\\n * @notice This is the interface for the ETS.sol core contract that records ETS TaggingRecords to the blockchain.\\n */\\n\\npragma solidity ^0.8.10;\\n\\ninterface IETS {\\n    /**\\n     * @notice Data structure for raw client input data.\\n     *\\n     * @param targetURI Unique resource identifier string, eg. \\\"https://google.com\\\"\\n     * @param tagStrings Array of hashtag strings, eg. [\\\"#Love, \\\"#Blue\\\"]\\n     * @param recordType Arbitrary identifier for type of tagging record, eg. \\\"Bookmark\\\"\\n     */\\n    struct TaggingRecordRawInput {\\n        string targetURI;\\n        string[] tagStrings;\\n        string recordType;\\n    }\\n\\n    /**\\n     * @notice Data structure for an Ethereum Tag Service \\\"tagging record\\\".\\n     *\\n     * The TaggingRecord is the fundamental data structure of ETS and reflects \\\"who tagged what, where and why\\\".\\n     *\\n     * Every Tagging record has a unique Id computed from the hashed composite of targetId, recordType, tagger and\\n     * relayer addresses cast as a uint256. see computeTaggingRecordId()\\n     *\\n     * Given this design, a tagger who tags the same URI with the same tags and recordType via two different relayers\\n     * would produce two TaggingRecords in ETS.\\n     *\\n     * @param tagIds Ids of CTAG token(s).\\n     * @param targetId Id of target being tagged.\\n     * @param recordType Arbitrary identifier for type of tagging record.\\n     * @param relayer Address of Relayer contract that wrote tagging record.\\n     * @param tagger Address of wallet that initiated tagging record via relayer.\\n     */\\n    struct TaggingRecord {\\n        uint256[] tagIds;\\n        uint256 targetId;\\n        string recordType;\\n        address relayer;\\n        address tagger;\\n    }\\n\\n    /**\\n     * @dev Action types available for tags in a tagging record.\\n     *\\n     * 0 - APPEND Add tags to a tagging record.\\n     * 1 - REPLACE Replace (overwrite) tags in a tagging record.\\n     * 2 - REMOVE Remove tags in a tagging record.\\n     */\\n    enum TaggingAction {\\n        APPEND,\\n        REPLACE,\\n        REMOVE\\n    }\\n\\n    /**\\n     * @dev emitted when the ETS Access Controls is set.\\n     *\\n     * @param newAccessControls contract address access controls is set to.\\n     */\\n    event AccessControlsSet(address newAccessControls);\\n\\n    /**\\n     * @dev emitted when ETS tagging fee is set.\\n     *\\n     * @param newTaggingFee new tagging fee.\\n     */\\n    event TaggingFeeSet(uint256 newTaggingFee);\\n\\n    /**\\n     * @dev emitted when participant distribution percentages are set.\\n     *\\n     * @param platformPercentage percentage of tagging fee allocated to ETS.\\n     * @param relayerPercentage percentage of tagging fee allocated to relayer of record for CTAG being used in tagging record.\\n     */\\n    event PercentagesSet(uint256 platformPercentage, uint256 relayerPercentage);\\n\\n    /**\\n     * @dev emitted when a new tagging record is recorded within ETS.\\n     *\\n     * @param taggingRecordId Unique identifier of tagging record.\\n     */\\n    event TaggingRecordCreated(uint256 taggingRecordId);\\n\\n    /**\\n     * @dev emitted when a tagging record is updated.\\n     *\\n     * @param taggingRecordId tagging record being updated.\\n     * @param action Type of update applied as TaggingAction enum.\\n     */\\n    event TaggingRecordUpdated(uint256 taggingRecordId, TaggingAction action);\\n\\n    /**\\n     * @dev emitted when ETS participant draws down funds accrued to their contract or wallet.\\n     *\\n     * @param who contract or wallet address being drawn down.\\n     * @param amount amount being drawn down.\\n     */\\n    event FundsWithdrawn(address indexed who, uint256 amount);\\n\\n    // ============ PUBLIC INTERFACE ============\\n\\n    /**\\n     * @notice Create a new tagging record.\\n     *\\n     * Requirements:\\n     *\\n     *   - Caller must be relayer contract.\\n     *   - CTAG(s) and TargetId must exist.\\n     *\\n     * @param _tagIds Array of CTAG token Ids.\\n     * @param _targetId targetId of the URI being tagged. See ETSTarget.sol\\n     * @param _recordType Arbitrary identifier for type of tagging record.\\n     * @param _tagger Address calling Relayer contract to create tagging record.\\n     */\\n    function createTaggingRecord(\\n        uint256[] memory _tagIds,\\n        uint256 _targetId,\\n        string calldata _recordType,\\n        address _tagger\\n    ) external payable;\\n\\n    /**\\n     * @notice Get or create CTAG token from tag string.\\n     *\\n     * Combo function that accepts a tag string and returns corresponding CTAG token Id if it exists,\\n     * or if it doesn't exist, creates a new CTAG and then returns corresponding Id.\\n     *\\n     * Only ETS Relayer contracts may call this function.\\n     *\\n     * @param _tag Tag string.\\n     * @param _creator Address credited with creating CTAG.\\n     * @return tokenId Id of CTAG token.\\n     */\\n    function getOrCreateTagId(\\n        string calldata _tag,\\n        address payable _creator\\n    ) external payable returns (uint256 tokenId);\\n\\n    /**\\n     * @notice Create CTAG token from tag string.\\n     *\\n     * Reverts if tag exists or is invalid.\\n     *\\n     * Only ETS Relayer contracts may call this function.\\n     *\\n     * @param _tag Tag string.\\n     * @param _creator Address credited with creating CTAG.\\n     * @return tokenId Id of CTAG token.\\n     */\\n    function createTag(string calldata _tag, address payable _creator) external payable returns (uint256 tokenId);\\n\\n    /**\\n     * @notice Apply one or more tags to a targetURI using tagging record raw client input data.\\n     *\\n     * Like it's sister function applyTagsWithCompositeKey, records new ETS Tagging Record or appends tags to an\\n     * existing record if found to already exist. This function differs in that it creates new ETS target records\\n     * and CTAG tokens for novel targetURIs and hastag strings respectively. This function can only be called by\\n     * Relayer contracts.\\n     *\\n     * @param _rawInput Raw client input data formed as TaggingRecordRawInput struct.\\n     * @param _tagger Address that calls Relayer to tag a targetURI.\\n     */\\n    function applyTagsWithRawInput(TaggingRecordRawInput calldata _rawInput, address payable _tagger) external payable;\\n\\n    /**\\n     * @notice Apply one or more tags to a targetId using using tagging record composite key.\\n     *\\n     * Records new ETS Tagging Record to the blockchain or appends tags if Tagging Record already exists. CTAGs and\\n     * targetId are created if they don't exist. Caller must be Relayer contract.\\n     *\\n     * @param _tagIds Array of CTAG token Ids.\\n     * @param _targetId targetId of the URI being tagged. See ETSTarget.sol\\n     * @param _recordType Arbitrary identifier for type of tagging record.\\n     * @param _tagger Address of that calls Relayer to create tagging record.\\n     */\\n    function applyTagsWithCompositeKey(\\n        uint256[] calldata _tagIds,\\n        uint256 _targetId,\\n        string memory _recordType,\\n        address payable _tagger\\n    ) external payable;\\n\\n    /**\\n     * @notice Replace entire tag set in tagging record using raw data for record lookup.\\n     *\\n     * If supplied tag strings don't have CTAGs, new ones are minted.\\n     *\\n     * @param _rawInput Raw client input data formed as TaggingRecordRawInput struct.\\n     * @param _tagger Address that calls Relayer to tag a targetURI.\\n     */\\n    function replaceTagsWithRawInput(\\n        TaggingRecordRawInput calldata _rawInput,\\n        address payable _tagger\\n    ) external payable;\\n\\n    /**\\n     * @notice Replace entire tag set in tagging record using composite key for record lookup.\\n     *\\n     * This function overwrites the tags in a tagging record with the supplied tags, only\\n     * charging for the new tags in the replacement set.\\n     *\\n     * @param _tagIds Array of CTAG token Ids.\\n     * @param _targetId targetId of the URI being tagged. See ETSTarget.sol\\n     * @param _recordType Arbitrary identifier for type of tagging record.\\n     * @param _tagger Address of that calls Relayer to create tagging record.\\n     */\\n    function replaceTagsWithCompositeKey(\\n        uint256[] calldata _tagIds,\\n        uint256 _targetId,\\n        string memory _recordType,\\n        address payable _tagger\\n    ) external payable;\\n\\n    /**\\n     * @notice Remove one or more tags from a tagging record using raw data for record lookup.\\n     *\\n     * @param _rawInput Raw client input data formed as TaggingRecordRawInput struct.\\n     * @param _tagger Address that calls Relayer to tag a targetURI.\\n     */\\n    function removeTagsWithRawInput(TaggingRecordRawInput calldata _rawInput, address _tagger) external;\\n\\n    /**\\n     * @notice Remove one or more tags from a tagging record using composite key for record lookup.\\n     *\\n     * @param _tagIds Array of CTAG token Ids.\\n     * @param _targetId targetId of the URI being tagged. See ETSTarget.sol\\n     * @param _recordType Arbitrary identifier for type of tagging record.\\n     * @param _tagger Address of that calls Relayer to create tagging record.\\n     */\\n    function removeTagsWithCompositeKey(\\n        uint256[] calldata _tagIds,\\n        uint256 _targetId,\\n        string memory _recordType,\\n        address payable _tagger\\n    ) external;\\n\\n    /**\\n     * @notice Append one or more tags to a tagging record.\\n     *\\n     * @param _taggingRecordId tagging record being updated.\\n     * @param _tagIds Array of CTAG token Ids.\\n     */\\n    function appendTags(uint256 _taggingRecordId, uint256[] calldata _tagIds) external payable;\\n\\n    /**\\n     * @notice Replaces tags in tagging record.\\n     *\\n     * This function overwrites the tags in a tagging record with the supplied tags, only\\n     * charging for the new tags in the replacement set.\\n     *\\n     * @param _taggingRecordId tagging record being updated.\\n     * @param _tagIds Array of CTAG token Ids.\\n     */\\n    function replaceTags(uint256 _taggingRecordId, uint256[] calldata _tagIds) external payable;\\n\\n    /**\\n     * @notice Remove one or more tags from a tagging record.\\n     *\\n     * @param _taggingRecordId tagging record being updated.\\n     * @param _tagIds Array of CTAG token Ids.\\n     */\\n    function removeTags(uint256 _taggingRecordId, uint256[] calldata _tagIds) external;\\n\\n    /**\\n     * @notice Function for withdrawing funds from an accrual account. Can be called by the account owner\\n     * or on behalf of the account. Does nothing when there is nothing due to the account.\\n     *\\n     * @param _account Address of account being drawn down and which will receive the funds.\\n     */\\n    function drawDown(address payable _account) external;\\n\\n    // ============ PUBLIC VIEW FUNCTIONS ============\\n\\n    /**\\n     * @notice Compute a taggingRecordId from raw input.\\n     *\\n     * @param _rawInput Raw client input data formed as TaggingRecordRawInput struct.\\n     * @param _relayer Address of tagging record Relayer contract.\\n     * @param _tagger Address interacting with Relayer to tag content (\\\"Tagger\\\").\\n     *\\n     * @return taggingRecordId Unique identifier for a tagging record.\\n     */\\n    function computeTaggingRecordIdFromRawInput(\\n        TaggingRecordRawInput calldata _rawInput,\\n        address _relayer,\\n        address _tagger\\n    ) external view returns (uint256 taggingRecordId);\\n\\n    /**\\n     * @notice Compute & return a taggingRecordId.\\n     *\\n     * Every TaggingRecord in ETS is mapped to by it's taggingRecordId. This Id is a composite key\\n     * composed of targetId, recordType, relayer contract address and tagger address hashed and cast as a uint256.\\n     *\\n     * @param _targetId Id of target being tagged (see ETSTarget.sol).\\n     * @param _recordType Arbitrary identifier for type of tagging record.\\n     * @param _relayer Address of tagging record Relayer contract.\\n     * @param _tagger Address interacting with Relayer to tag content (\\\"Tagger\\\").\\n     *\\n     * @return taggingRecordId Unique identifier for a tagging record.\\n     */\\n    function computeTaggingRecordIdFromCompositeKey(\\n        uint256 _targetId,\\n        string memory _recordType,\\n        address _relayer,\\n        address _tagger\\n    ) external pure returns (uint256 taggingRecordId);\\n\\n    /**\\n     * @notice Compute tagging fee for raw input and desired action.\\n     *\\n     * @param _rawInput Raw client input data formed as TaggingRecordRawInput struct.\\n     * @param _relayer Address of tagging record Relayer contract.\\n     * @param _tagger Address interacting with Relayer to tag content (\\\"Tagger\\\").\\n     * @param _action Integer representing action to be performed according to enum TaggingAction.\\n     *\\n     * @return fee Calculated tagging fee in ETH/Matic\\n     * @return tagCount Number of new tags being added to tagging record.\\n     */\\n    function computeTaggingFeeFromRawInput(\\n        TaggingRecordRawInput memory _rawInput,\\n        address _relayer,\\n        address _tagger,\\n        TaggingAction _action\\n    ) external view returns (uint256 fee, uint256 tagCount);\\n\\n    /**\\n     * @notice Compute tagging fee for CTAGs, tagging record composite key and desired action.\\n     *\\n     * @param _tagIds Array of CTAG token Ids.\\n     * @param _relayer Address of tagging record Relayer contract.\\n     * @param _tagger Address interacting with Relayer to tag content (\\\"Tagger\\\").\\n     * @param _action Integer representing action to be performed according to enum TaggingAction.\\n     *\\n     * @return fee Calculated tagging fee in ETH/Matic\\n     * @return tagCount Number of new tags being added to tagging record.\\n     */\\n    function computeTaggingFeeFromCompositeKey(\\n        uint256[] memory _tagIds,\\n        uint256 _targetId,\\n        string calldata _recordType,\\n        address _relayer,\\n        address _tagger,\\n        TaggingAction _action\\n    ) external view returns (uint256 fee, uint256 tagCount);\\n\\n    /**\\n     * @notice Compute tagging fee for CTAGs, tagging record id and desired action.\\n     *\\n     * If the global, service wide tagging fee is set (see ETS.taggingFee() & ETS.setTaggingFee()) ETS charges a per tag for all\\n     * new tags applied to a tagging record. This applies to both new tagging records and modified tagging records.\\n     *\\n     * Computing the tagging fee involves checking to see if a tagging record exists and if so, given the desired action\\n     * (append or replace) determining the number of new tags being added and multiplying by the ETS per tag fee.\\n     *\\n     * @param _taggingRecordId Id of tagging record.\\n     * @param _tagIds Array of CTAG token Ids.\\n     * @param _action Integer representing action to be performed according to enum TaggingAction.\\n     *\\n     * @return fee Calculated tagging fee in ETH/Matic\\n     * @return tagCount Number of new tags being added to tagging record.\\n     */\\n    function computeTaggingFee(\\n        uint256 _taggingRecordId,\\n        uint256[] memory _tagIds,\\n        TaggingAction _action\\n    ) external view returns (uint256 fee, uint256 tagCount);\\n\\n    /**\\n     * @notice Retrieve a tagging record from it's raw input.\\n     *\\n     * @param _rawInput Raw client input data formed as TaggingRecordRawInput struct.\\n     * @param _relayer Address of tagging record Relayer contract.\\n     * @param _tagger Address interacting with Relayer to tag content (\\\"Tagger\\\").\\n     *\\n     * @return tagIds CTAG token ids.\\n     * @return targetId TargetId that was tagged.\\n     * @return recordType Type of tagging record.\\n     * @return relayer Address of tagging record Relayer contract.\\n     * @return tagger Address interacting with Relayer to tag content (\\\"Tagger\\\").\\n     */\\n    function getTaggingRecordFromRawInput(\\n        TaggingRecordRawInput memory _rawInput,\\n        address _relayer,\\n        address _tagger\\n    )\\n        external\\n        view\\n        returns (uint256[] memory tagIds, uint256 targetId, string memory recordType, address relayer, address tagger);\\n\\n    /**\\n     * @notice Retrieve a tagging record from composite key parts.\\n     *\\n     * @param _targetId Id of target being tagged.\\n     * @param _recordType Arbitrary identifier for type of tagging record.\\n     * @param _relayer Address of Relayer contract that wrote tagging record.\\n     * @param _tagger Address of wallet that initiated tagging record via relayer.\\n     *\\n     * @return tagIds CTAG token ids.\\n     * @return targetId TargetId that was tagged.\\n     * @return recordType Type of tagging record.\\n     * @return relayer Address of tagging record Relayer contract.\\n     * @return tagger Address interacting with Relayer to tag content (\\\"Tagger\\\").\\n     */\\n    function getTaggingRecordFromCompositeKey(\\n        uint256 _targetId,\\n        string memory _recordType,\\n        address _relayer,\\n        address _tagger\\n    )\\n        external\\n        view\\n        returns (uint256[] memory tagIds, uint256 targetId, string memory recordType, address relayer, address tagger);\\n\\n    /**\\n     * @notice Retrieve a tagging record from Id.\\n     *\\n     * @param _id taggingRecordId.\\n     *\\n     * @return tagIds CTAG token ids.\\n     * @return targetId TargetId that was tagged.\\n     * @return recordType Type of tagging record.\\n     * @return relayer Address of tagging record Relayer contract.\\n     * @return tagger Address interacting with Relayer to tag content (\\\"Tagger\\\").\\n     */\\n    function getTaggingRecordFromId(\\n        uint256 _id\\n    )\\n        external\\n        view\\n        returns (uint256[] memory tagIds, uint256 targetId, string memory recordType, address relayer, address tagger);\\n\\n    /**\\n     * @notice Check that a tagging record exists for given raw input.\\n     *\\n     * @param _rawInput Raw client input data formed as TaggingRecordRawInput struct.\\n     * @param _relayer Address of tagging record Relayer contract.\\n     * @param _tagger Address interacting with Relayer to tag content (\\\"Tagger\\\").\\n     *\\n     * @return boolean; true for exists, false for not.\\n     */\\n    function taggingRecordExistsByRawInput(\\n        TaggingRecordRawInput memory _rawInput,\\n        address _relayer,\\n        address _tagger\\n    ) external view returns (bool);\\n\\n    /**\\n     * @notice Check that a tagging record exists by it's componsite key parts.\\n     *\\n     * @param _targetId Id of target being tagged.\\n     * @param _recordType Arbitrary identifier for type of tagging record.\\n     * @param _relayer Address of Relayer contract that wrote tagging record.\\n     * @param _tagger Address of wallet that initiated tagging record via relayer.\\n     *\\n     * @return boolean; true for exists, false for not.\\n     */\\n    function taggingRecordExistsByCompositeKey(\\n        uint256 _targetId,\\n        string memory _recordType,\\n        address _relayer,\\n        address _tagger\\n    ) external view returns (bool);\\n\\n    /**\\n     * @notice Check that a tagging record exsits by it's Id.\\n     *\\n     * @param _taggingRecordId taggingRecordId.\\n     *\\n     * @return boolean; true for exists, false for not.\\n     */\\n    function taggingRecordExists(uint256 _taggingRecordId) external view returns (bool);\\n\\n    /**\\n     * @notice Function to check how much MATIC has been accrued by an address factoring in amount paid out.\\n     *\\n     * @param _account Address of the account being queried.\\n     * @return _due Amount of WEI in MATIC due to account.\\n     */\\n    function totalDue(address _account) external view returns (uint256 _due);\\n\\n    /**\\n     * @notice Function to retrieve the ETS platform tagging fee.\\n     *\\n     * @return tagging fee.\\n     */\\n    function taggingFee() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xc9f0732f967b71fb8fefd79cfbed28bec9409c6242b7ac86ade3d484e3ee7261\",\"license\":\"MIT\"},\"contracts/interfaces/IETSAccessControls.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n/**\\n * @title IETSAccessControls\\n * @author Ethereum Tag Service <team@ets.xyz>\\n *\\n *  \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\n *  \\u2588\\u2588\\u2554\\u2550\\u2550\\u2550\\u2550\\u255d\\u255a\\u2550\\u2550\\u2588\\u2588\\u2554\\u2550\\u2550\\u255d\\u2588\\u2588\\u2554\\u2550\\u2550\\u2550\\u2550\\u255d\\n *  \\u2588\\u2588\\u2588\\u2588\\u2588\\u2557     \\u2588\\u2588\\u2551   \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\n *  \\u2588\\u2588\\u2554\\u2550\\u2550\\u255d     \\u2588\\u2588\\u2551   \\u255a\\u2550\\u2550\\u2550\\u2550\\u2588\\u2588\\u2551\\n *  \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557   \\u2588\\u2588\\u2551   \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2551`\\n *  \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d   \\u255a\\u2550\\u255d   \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\n *\\n * @notice This is the interface for the ETSAccessControls contract which allows ETS Core Dev\\n * Team to administer roles and control access to various parts of the ETS Platform.\\n * ETSAccessControls contract contains a mix of public and administrator only functions.\\n */\\n\\npragma solidity ^0.8.10;\\n\\nimport { IAccessControlUpgradeable } from \\\"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol\\\";\\n\\ninterface IETSAccessControls is IAccessControlUpgradeable {\\n    /**\\n     * @dev emitted when the ETS Platform address is set.\\n     *\\n     * @param newAddress wallet address platform is being set to.\\n     * @param prevAddress previous platform address.\\n     */\\n    event PlatformSet(address newAddress, address prevAddress);\\n\\n    /**\\n     * @dev emitted when a Relayer contract is added & enabled in ETS.\\n     *\\n     * Relayer contracts are not required implement all ETS Core API functions. Therefore, to ease\\n     * testing of ETS Core API fuinctions, ETS permits addition of ETS owned wallet addresses as Relayers.\\n     *\\n     * @param relayer Relayer contract address.\\n     */\\n    event RelayerAdded(address relayer);\\n\\n    /**\\n     * @dev emitted when a Relayer contract is paused or unpaused.\\n     *\\n     * @param relayer Address that had pause toggled.\\n     */\\n    event RelayerLockToggled(address relayer);\\n\\n    /**\\n     * @notice Sets the Platform wallet address. Can only be called by address with DEFAULT_ADMIN_ROLE.\\n     *\\n     * @param _platform The new Platform address to set.\\n     */\\n    function setPlatform(address payable _platform) external;\\n\\n    /**\\n     * @notice Adds a Relayer contract to ETS. Can only be called by address\\n     * with DEFAULT_ADMIN_ROLE.\\n     *\\n     * @param _relayer Address of the Relayer contract. Must conform to IETSRelayer.\\n     * @param _name Human readable name of the Relayer.\\n     * @param _owner Address of relayer owner.\\n     */\\n    function registerRelayer(address _relayer, string calldata _name, address _owner) external;\\n\\n    /**\\n     * @notice Pause relayer given the relayer owner address. Callable by Platform only.\\n     *\\n     * @param _relayerOwner Address of the Relayer owner.\\n     */\\n    function pauseRelayerByOwnerAddress(address _relayerOwner) external;\\n\\n    /**\\n     * @notice Change the relayer owner as stored in ETSAccessControls. Callable from Relayer only.\\n     * Called via changeOwner() on a relayer.\\n     *\\n     * @param _currentOwner Address of the current relayer owner.\\n     * @param _newOwner Address of the new relayer owner.\\n     */\\n    function changeRelayerOwner(address _currentOwner, address _newOwner) external;\\n\\n    /**\\n     * @notice Pauses/Unpauses a Relayer contract. Can only be called by address\\n     * with DEFAULT_ADMIN_ROLE.\\n     *\\n     * @param _relayer Address of the Relayer contract.\\n     */\\n    function toggleRelayerLock(address _relayer) external;\\n\\n    /**\\n     * @notice Sets the role admin for a given role. An address with role admin can grant or\\n     * revoke that role for other addresses. Can only be called by address with DEFAULT_ADMIN_ROLE.\\n     *\\n     * @param _role bytes32 representation of role being administered.\\n     * @param _adminRole bytes32 representation of administering role.\\n     */\\n    function setRoleAdmin(bytes32 _role, bytes32 _adminRole) external;\\n\\n    /**\\n     * @notice Checks whether given address has SMART_CONTRACT role.\\n     *\\n     * @param _addr Address being checked.\\n     * @return boolean True if address has SMART_CONTRACT role.\\n     */\\n    function isSmartContract(address _addr) external view returns (bool);\\n\\n    /**\\n     * @notice Checks whether given address has DEFAULT_ADMIN_ROLE role.\\n     *\\n     * @param _addr Address being checked.\\n     * @return boolean True if address has DEFAULT_ADMIN_ROLE role.\\n     */\\n    function isAdmin(address _addr) external view returns (bool);\\n\\n    /**\\n     * @notice Checks whether given address has AUCTION_ORACLE_ROLE role.\\n     *\\n     * @param _addr Address being checked.\\n     * @return boolean True if address has AUCTION_ORACLE_ROLE role.\\n     */\\n    function isAuctionOracle(address _addr) external view returns (bool);\\n\\n    /**\\n     * @notice Checks whether given address can act as relayer factory.\\n     *\\n     * @param _addr Address being checked.\\n     * @return boolean True if address can act as relayer factory.\\n     */\\n    function isRelayerFactory(address _addr) external view returns (bool);\\n\\n    /**\\n     * @notice Checks whether given address is a relayer.\\n     *\\n     * @param _addr Address being checked.\\n     * @return boolean True if address can be a relayer.\\n     */\\n    function isRelayer(address _addr) external view returns (bool);\\n\\n    /**\\n     * @notice Checks whether given address is a registered Relayer and not paused.\\n     *\\n     * @param _addr Address being checked.\\n     * @return boolean True if address is a Relayer and not paused.\\n     */\\n    function isRelayerAndNotPaused(address _addr) external view returns (bool);\\n\\n    /**\\n     * @notice Checks relayer is paused by ETS Platform.\\n     *\\n     * @param _addr Address being checked.\\n     * @return boolean True if relayer address is paused by platform.\\n     */\\n    function isRelayerLocked(address _addr) external view returns (bool);\\n\\n    /**\\n     * @notice Checks whether given address owns a relayer.\\n     *\\n     * @param _addr Address being checked.\\n     * @return boolean True if address owns a relayer.\\n     */\\n    function isRelayerByOwner(address _addr) external view returns (bool);\\n\\n    /**\\n     * @notice Checks whether given address has RELAYER_ADMIN role.\\n     *\\n     * @param _addr Address being checked.\\n     * @return boolean True if address has RELAYER_ADMIN role.\\n     */\\n    function isRelayerAdmin(address _addr) external view returns (bool);\\n\\n    /**\\n     * @notice Checks whether given Relayer Name is a registered Relayer.\\n     *\\n     * @param _name Name being checked.\\n     * @return boolean True if _name is a Relayer.\\n     */\\n    function isRelayerByName(string calldata _name) external view returns (bool);\\n\\n    /**\\n     * @notice Checks whether given address is a registered Relayer.\\n     *\\n     * @param _addr Address being checked.\\n     * @return boolean True if address is a registered Relayer.\\n     */\\n    function isRelayerByAddress(address _addr) external view returns (bool);\\n\\n    /**\\n     * @notice Get relayer address from it's name.\\n     *\\n     * @param _name Name of relayer.\\n     * @return Address of relayer.\\n     */\\n    function getRelayerAddressFromName(string calldata _name) external view returns (address);\\n\\n    /**\\n     * @notice Get relayer name from it's address.\\n     *\\n     * @param _address Adsdress of relayer.\\n     * @return Name of relayer.\\n     */\\n    function getRelayerNameFromAddress(address _address) external view returns (string calldata);\\n\\n    /**\\n     * @notice Get relayer address from its owner address.\\n     *\\n     * @param _address address of relayer owner.\\n     * @return Address of relayer.\\n     */\\n    function getRelayerAddressFromOwner(address _address) external view returns (address);\\n\\n    /**\\n     * @notice Returns wallet address for ETS Platform.\\n     *\\n     * @return ETS Platform address.\\n     */\\n    function getPlatformAddress() external view returns (address payable);\\n}\\n\",\"keccak256\":\"0x0948eb19ab50fdd3cb1ac728be863567c9cefd4da0e4ecc2b3b052020c86ed74\",\"license\":\"MIT\"},\"contracts/interfaces/IETSTarget.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n/**\\n * @title IETSTarget\\n * @author Ethereum Tag Service <team@ets.xyz>\\n *\\n *  \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\n *  \\u2588\\u2588\\u2554\\u2550\\u2550\\u2550\\u2550\\u255d\\u255a\\u2550\\u2550\\u2588\\u2588\\u2554\\u2550\\u2550\\u255d\\u2588\\u2588\\u2554\\u2550\\u2550\\u2550\\u2550\\u255d\\n *  \\u2588\\u2588\\u2588\\u2588\\u2588\\u2557     \\u2588\\u2588\\u2551   \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\n *  \\u2588\\u2588\\u2554\\u2550\\u2550\\u255d     \\u2588\\u2588\\u2551   \\u255a\\u2550\\u2550\\u2550\\u2550\\u2588\\u2588\\u2551\\n *  \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557   \\u2588\\u2588\\u2551   \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2551`\\n *  \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d   \\u255a\\u2550\\u255d   \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\n *\\n * @notice This is the standard interface for the core ETSTarget.sol contract. It includes both public\\n * and administration functions.\\n *\\n * In ETS, a \\\"Target\\\" is our data structure, stored onchain, that references/points to a URI. Target records\\n * are identified in ETS by their Id (targetId) which is a unsigned integer computed from the URI string.\\n * Target Ids are combined with CTAG Ids by ETS core (ETS.sol) to form \\\"Tagging Records\\\".\\n *\\n * For context, from Wikipedia, URI is short for Uniform Resource Identifier and is a unique sequence of\\n * characters that identifies a logical or physical resource used by web technologies. URIs may be used to\\n * identify anything, including real-world objects, such as people and places, concepts, or information\\n * resources such as web pages and books.\\n *\\n * For our purposes, as much as possible, we are restricting our interpretation of URIs to the more technical\\n * parameters defined by the IETF in [RFC3986](https://www.rfc-editor.org/rfc/rfc3986). For newer protocols, such\\n * as blockchains, For newer protocols, such as blockchains we will lean on newer emerging URI standards such\\n * as the [Blink](https://w3c-ccg.github.io/blockchain-links) and [BIP-122](https://github.com/bitcoin/bips/blob/master/bip-0122.mediawiki)\\n *\\n * One the thing to keep in mind with URIs & ETS Targets is that differently shaped URIs can sometimes point to the same\\n * resource. The effect of that is that different Target IDs in ETS can similarly point to the same resource.\\n */\\n\\npragma solidity ^0.8.10;\\n\\ninterface IETSTarget {\\n    /**\\n     * @notice Data structure for an ETS Target.\\n     *\\n     * @param targetURI Unique resource identifier Target points to\\n     * @param createdBy Address of IETSTargetTagger implementation that created Target\\n     * @param enriched block timestamp when Target was last enriched. Defaults to 0\\n     * @param httpStatus https status of last response from ETSEnrichTarget API eg. \\\"404\\\", \\\"200\\\". defaults to 0\\n     * @param ipfsHash ipfsHash of additional metadata for Target collected by ETSEnrichTarget API\\n     */\\n    struct Target {\\n        string targetURI;\\n        address createdBy;\\n        uint256 enriched;\\n        uint256 httpStatus;\\n        string ipfsHash;\\n    }\\n\\n    /**\\n     * @dev emitted when the ETSAccessControls is set.\\n     *\\n     * @param etsAccessControls contract address ETSAccessControls is set to.\\n     */\\n    event AccessControlsSet(address etsAccessControls);\\n\\n    /**\\n     * @dev emitted when the ETSEnrichTarget API address is set.\\n     *\\n     * @param etsEnrichTarget contract address ETSEnrichTarget is set to.\\n     */\\n    event EnrichTargetSet(address etsEnrichTarget);\\n\\n    /**\\n     * @dev emitted when a new Target is created.\\n     *\\n     * @param targetId Unique Id of new Target.\\n     */\\n    event TargetCreated(uint256 targetId);\\n\\n    /**\\n     * @dev emitted when an existing Target is updated.\\n     *\\n     * @param targetId Id of Target being updated.\\n     */\\n    event TargetUpdated(uint256 targetId);\\n\\n    /**\\n     * @notice Sets ETSEnrichTarget contract address so that Target metadata enrichment\\n     * functions can be called from ETSTarget.\\n     *\\n     * @param _etsEnrichTarget Address of ETSEnrichTarget contract.\\n     */\\n    function setEnrichTarget(address _etsEnrichTarget) external;\\n\\n    /**\\n     * @notice Get ETS targetId from URI.\\n     *\\n     * Combo function that given a URI string will return it's ETS targetId if it exists,\\n     * or create a new Target record and return corresponding targetId.\\n     *\\n     * @param _targetURI URI passed in as string\\n     * @return Id of ETS Target record\\n     */\\n    function getOrCreateTargetId(string memory _targetURI) external returns (uint256);\\n\\n    /**\\n     * @notice Create a Target record and return it's targetId.\\n     *\\n     * @param _targetURI URI passed in as string\\n     * @return targetId Id of ETS Target record\\n     */\\n    function createTarget(string memory _targetURI) external returns (uint256 targetId);\\n\\n    /**\\n     * @notice Update a Target record.\\n     *\\n     * @param _targetId Id of Target being updated.\\n     * @param _targetURI Unique resource identifier Target points to.\\n     * @param _enriched block timestamp when Target was last enriched\\n     * @param _httpStatus https status of last response from ETSEnrichTarget API eg. \\\"404\\\", \\\"200\\\". defaults to 0\\n     * @param _ipfsHash ipfsHash of additional metadata for Target collected by ETSEnrichTarget API\\n\\n     * @return success true when Target is successfully updated.\\n     */\\n    function updateTarget(\\n        uint256 _targetId,\\n        string calldata _targetURI,\\n        uint256 _enriched,\\n        uint256 _httpStatus,\\n        string calldata _ipfsHash\\n    ) external returns (bool success);\\n\\n    /**\\n     * @notice Function to deterministically compute & return a targetId.\\n     *\\n     * Every Target in ETS is mapped to by it's targetId. This Id is computed from\\n     * the target URI sting hashed and cast as a uint256.\\n     *\\n     * Note: Function does not verify if Target record exists.\\n     *\\n     * @param _targetURI Unique resource identifier Target record points to.\\n     * @return targetId Id of the potential Target record.\\n     */\\n    function computeTargetId(string memory _targetURI) external view returns (uint256 targetId);\\n\\n    /**\\n     * @notice Check that a Target record exists for a given URI string.\\n     *\\n     * @param _targetURI Unique resource identifier Target record points to.\\n     * @return true if Target record exists; false if not.\\n     */\\n    function targetExistsByURI(string memory _targetURI) external view returns (bool);\\n\\n    /**\\n     * @notice Check that a Target record exists for a given computed targetId.\\n     *\\n     * @param _targetId targetId uint computed from URI via computeTargetId().\\n     * @return true if Target record exists; false if not.\\n     */\\n    function targetExistsById(uint256 _targetId) external view returns (bool);\\n\\n    /**\\n     * @notice Retrieve a Target record for a given URI string.\\n     *\\n     * Note: returns a struct with empty members when no Target exists.\\n     *\\n     * @param _targetURI Unique resource identifier Target record points to.\\n     * @return Target record.\\n     */\\n    function getTargetByURI(string memory _targetURI) external view returns (Target memory);\\n\\n    /**\\n     * @notice Retrieve a Target record for a computed targetId.\\n     *\\n     * Note: returns a struct with empty members when no Target exists.\\n     *\\n     * @param _targetId targetId uint computed from URI via computeTargetId().\\n     * @return Target record.\\n     */\\n    function getTargetById(uint256 _targetId) external view returns (Target memory);\\n}\\n\",\"keccak256\":\"0xb6c3a34352303df2ced14765c40d27bf712597c37be7b2a4c0736843bac731b5\",\"license\":\"MIT\"},\"contracts/interfaces/IETSToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n/**\\n * @title IETSToken\\n * @author Ethereum Tag Service <team@ets.xyz>\\n *\\n *  \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\n *  \\u2588\\u2588\\u2554\\u2550\\u2550\\u2550\\u2550\\u255d\\u255a\\u2550\\u2550\\u2588\\u2588\\u2554\\u2550\\u2550\\u255d\\u2588\\u2588\\u2554\\u2550\\u2550\\u2550\\u2550\\u255d\\n *  \\u2588\\u2588\\u2588\\u2588\\u2588\\u2557     \\u2588\\u2588\\u2551   \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\n *  \\u2588\\u2588\\u2554\\u2550\\u2550\\u255d     \\u2588\\u2588\\u2551   \\u255a\\u2550\\u2550\\u2550\\u2550\\u2588\\u2588\\u2551\\n *  \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557   \\u2588\\u2588\\u2551   \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2551`\\n *  \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d   \\u255a\\u2550\\u255d   \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\n *\\n * @notice This is the interface for the ETSToken.sol core contract that governs the creation & management\\n * of Ethereum Tag Service composable tags (CTAGs).\\n *\\n * CTAGs are ERC-721 non-fungible tokens that store a single tag string and origin attribution data including\\n * a \\\"Relayer\\\" address and a \\\"Creator\\\" address. The tag string must conform to a few simple validation rules.\\n *\\n * CTAGs are identified in ETS by their Id (tagId) which is an unsigned integer computed from the lowercased\\n * tag \\\"display\\\" string. Given this, only one CTAG exists for a tag string regardless of its case. For\\n * example, #Punks, #punks and #PUNKS all resolve to the same CTAG.\\n *\\n * CTAG Ids are combined with Target Ids (see ETSTarget.sol) by ETS core (ETS.sol) to form \\\"Tagging Records\\\".\\n *\\n * CTAGs may only be generated by Relayer contracts (see examples/ETSRelayer.sol) via ETS core (ETS.sol)\\n */\\n\\npragma solidity ^0.8.10;\\n\\nimport { IERC721Upgradeable } from \\\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol\\\";\\n\\ninterface IETSToken is IERC721Upgradeable {\\n    /**\\n     * @notice Data structure for CTAG Token.\\n     *\\n     * Only premium and reserved flags are editable.\\n     *\\n     * @param relayer Address of IETSTargetTagger implementation that created CTAG.\\n     * @param creator Address interacting with relayer to initiate CTAG creation.\\n     * @param display Display version of CTAG string.\\n     * @param premium ETS governed boolean flag to identify a CTAG as premium/higher value.\\n     * @param reserved ETS governed boolean flag to restrict a CTAG from release to auction.\\n     */\\n    struct Tag {\\n        address relayer;\\n        address creator;\\n        string display;\\n        bool premium;\\n        bool reserved;\\n    }\\n\\n    // Events\\n\\n    /**\\n     * @dev emitted when the maximum character length of CTAG display string is set.\\n     *\\n     * @param maxStringLength maximum character length of string.\\n     */\\n    event TagMaxStringLengthSet(uint256 maxStringLength);\\n\\n    /**\\n     * @dev emitted when the minimum character length of CTAG display string is set.\\n     *\\n     * @param minStringLength minimum character length of string.\\n     */\\n    event TagMinStringLengthSet(uint256 minStringLength);\\n\\n    /**\\n     * @dev emitted when the ownership term length of a CTAG is set.\\n     *\\n     * @param termLength Ownership term length in days.\\n     */\\n    event OwnershipTermLengthSet(uint256 termLength);\\n\\n    /**\\n     * @dev emitted when the ETS core contract is set.\\n     *\\n     * @param ets ets core contract address.\\n     */\\n    event ETSCoreSet(address ets);\\n\\n    /**\\n     * @dev emitted when the ETS Access Controls is set.\\n     *\\n     * @param etsAccessControls contract address access controls is set to.\\n     */\\n    event AccessControlsSet(address etsAccessControls);\\n\\n    /**\\n     * @dev emitted when a tag string is flagged/unflagged as premium prior to minting.\\n     *\\n     * @param tag tag string being flagged.\\n     * @param isPremium boolean true for premium/false not premium.\\n     */\\n    event PremiumTagPreSet(string tag, bool isPremium);\\n\\n    /**\\n     * @dev emitted when a CTAG is flagged/unflagged as premium subsequent to minting.\\n     *\\n     * @param tagId Id of CTAG token.\\n     * @param isPremium boolean true for premium/false not premium.\\n     */\\n    event PremiumFlagSet(uint256 tagId, bool isPremium);\\n\\n    /**\\n     * @dev emitted when a CTAG is flagged/unflagged as reserved subsequent to minting.\\n     *\\n     * @param tagId Id of CTAG token.\\n     * @param isReserved boolean true for reserved/false for not reserved.\\n     */\\n    event ReservedFlagSet(uint256 tagId, bool isReserved);\\n\\n    /**\\n     * @dev emitted when CTAG token is renewed.\\n     *\\n     * @param tokenId Id of CTAG token.\\n     * @param caller address of renewer.\\n     */\\n    event TagRenewed(uint256 indexed tokenId, address indexed caller);\\n\\n    /**\\n     * @dev emitted when CTAG token is recycled back to ETS.\\n     *\\n     * @param tokenId Id of CTAG token.\\n     * @param caller address of recycler.\\n     */\\n    event TagRecycled(uint256 indexed tokenId, address indexed caller);\\n\\n    // ============ OWNER INTERFACE ============\\n\\n    /**\\n     * @notice admin function to set maximum character length of CTAG display string.\\n     *\\n     * @param _tagMaxStringLength maximum character length of string.\\n     */\\n    function setTagMaxStringLength(uint256 _tagMaxStringLength) external;\\n\\n    /**\\n     * @notice Admin function to set minimum  character length of CTAG display string.\\n     *\\n     * @param _tagMinStringLength minimum character length of string.\\n     */\\n    function setTagMinStringLength(uint256 _tagMinStringLength) external;\\n\\n    /**\\n     * @notice Admin function to set the ownership term length of a CTAG is set.\\n     *\\n     * @param _ownershipTermLength Ownership term length in days.\\n     */\\n    function setOwnershipTermLength(uint256 _ownershipTermLength) external;\\n\\n    /**\\n     * @notice Admin function to flag/unflag tag string(s) as premium prior to minting.\\n     *\\n     * @param _tags Array of tag strings.\\n     * @param _isPremium Boolean true for premium, false for not premium.\\n     */\\n    function preSetPremiumTags(string[] calldata _tags, bool _isPremium) external;\\n\\n    /**\\n     * @notice Admin function to flag/unflag CTAG(s) as premium.\\n     *\\n     * @param _tokenIds Array of CTAG Ids.\\n     * @param _isPremium Boolean true for premium, false for not premium.\\n     */\\n    function setPremiumFlag(uint256[] calldata _tokenIds, bool _isPremium) external;\\n\\n    /**\\n     * @notice Admin function to flag/unflag CTAG(s) as reserved.\\n     *\\n     * Tags flagged as reserved cannot be auctioned.\\n     *\\n     * @param _tokenIds Array of CTAG Ids.\\n     * @param _reserved Boolean true for reserved, false for not reserved.\\n     */\\n    function setReservedFlag(uint256[] calldata _tokenIds, bool _reserved) external;\\n\\n    // ============ PUBLIC INTERFACE ============\\n\\n    /**\\n     * @notice Get CTAG token Id from tag string.\\n     *\\n     * Combo function that accepts a tag string and returns it's CTAG token Id if it exists,\\n     * or creates a new CTAG and returns corresponding Id.\\n     *\\n     * Only ETS Core can call this function.\\n     *\\n     * @param _tag Tag string.\\n     * @param _relayer Address of Relayer contract calling ETS Core.\\n     * @param _creator Address credited with creating CTAG.\\n     * @return tokenId Id of CTAG token.\\n     */\\n    function getOrCreateTagId(\\n        string calldata _tag,\\n        address payable _relayer,\\n        address payable _creator\\n    ) external payable returns (uint256 tokenId);\\n\\n    /**\\n     * @notice Create CTAG token from tag string.\\n     *\\n     * Reverts if tag exists or is invalid.\\n     *\\n     * Only ETS Core can call this function.\\n     *\\n     * @param _tag Tag string.\\n     * @param _creator Address credited with creating CTAG.\\n     * @return tokenId Id of CTAG token.\\n     */\\n    function createTag(\\n        string calldata _tag,\\n        address payable _relayer,\\n        address payable _creator\\n    ) external payable returns (uint256 tokenId);\\n\\n    /**\\n     * @notice Renews ownership term of a CTAG.\\n     *\\n     * A \\\"CTAG ownership term\\\" is utilized to prevent CTAGs from being abandoned or inaccessable\\n     * due to lost private keys.\\n     *\\n     * Any wallet address may renew the term of a CTAG for an owner. When renewed, the term\\n     * is extended from the current block timestamp plus the ownershipTermLength public variable.\\n     *\\n     * @param _tokenId Id of CTAG token.\\n     */\\n    function renewTag(uint256 _tokenId) external;\\n\\n    /**\\n     * @notice Recycles a CTAG back to ETS.\\n     *\\n     * When ownership term of a CTAG has expired, any wallet or contract may call this function\\n     * to recycle the tag back to ETS. Once recycled, a tag may be auctioned again.\\n     *\\n     * @param _tokenId Id of CTAG token.\\n     */\\n    function recycleTag(uint256 _tokenId) external;\\n\\n    // ============ PUBLIC VIEW FUNCTIONS ============\\n\\n    /**\\n     * @notice Function to deterministically compute & return a CTAG token Id.\\n     *\\n     * Every CTAG token and it's associated data struct is mapped to by it's token Id. This Id is computed\\n     * from the \\\"display\\\" tag string lowercased, hashed and cast as an unsigned integer.\\n     *\\n     * Note: Function does not verify if CTAG record exists.\\n     *\\n     * @param _tag Tag string.\\n     * @return Id of potential CTAG token id.\\n     */\\n    function computeTagId(string memory _tag) external pure returns (uint256);\\n\\n    /**\\n     * @notice Check that a CTAG token exists for a given tag string.\\n     *\\n     * @param _tag Tag string.\\n     * @return true if CTAG token exists; false if not.\\n     */\\n    function tagExistsByString(string calldata _tag) external view returns (bool);\\n\\n    /**\\n     * @notice Check that CTAG token exists for a given computed token Id.\\n     *\\n     * @param _tokenId Token Id uint computed from tag string via computeTargetId().\\n     * @return true if CTAG token exists; false if not.\\n     */\\n    function tagExistsById(uint256 _tokenId) external view returns (bool);\\n\\n    /**\\n     * @notice Check if CTAG token ownership term has expired.\\n     *\\n     * @param _tokenId Token Id uint computed from tag string via computeTargetId().\\n     * @return true if CTAG ownership term has expired; false if not.\\n     */\\n    function tagOwnershipTermExpired(uint256 _tokenId) external view returns (bool);\\n\\n    /**\\n     * @notice Retrieve a CTAG record for a given tag string.\\n     *\\n     * Note: returns a struct with empty members when no CTAG exists.\\n     *\\n     * @param _tag Tag string.\\n     * @return CTAG record as Tag struct.\\n     */\\n    function getTagByString(string calldata _tag) external view returns (Tag memory);\\n\\n    /**\\n     * @notice Retrieve a CTAG record for a given token Id.\\n     *\\n     * Note: returns a struct with empty members when no CTAG exists.\\n     *\\n     * @param _tokenId CTAG token Id.\\n     * @return CTAG record as Tag struct.\\n     */\\n    function getTagById(uint256 _tokenId) external view returns (Tag memory);\\n\\n    /**\\n     * @notice Retrieve wallet address for ETS Platform.\\n     *\\n     * @return wallet address for ETS Platform.\\n     */\\n    function getPlatformAddress() external view returns (address payable);\\n\\n    /**\\n     * @notice Retrieve Creator address for a CTAG token.\\n     *\\n     * @param _tokenId CTAG token Id.\\n     * @return _creator Creator address of the CTAG.\\n     */\\n    function getCreatorAddress(uint256 _tokenId) external view returns (address);\\n\\n    /**\\n     * @notice Retrieve last renewal block timestamp for a CTAG.\\n     *\\n     * @param _tokenId CTAG token Id.\\n     * @return Block timestamp.\\n     */\\n    function getLastRenewed(uint256 _tokenId) external view returns (uint256);\\n\\n    /**\\n     * @notice Retrieve CTAG ownership term length global setting.\\n     *\\n     * @return Term length in days.\\n     */\\n    function getOwnershipTermLength() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xe82f096b9cb9d70211a119401a6b1714073d40a388b6d0a20f78e5cd908cccd8\",\"license\":\"MIT\"},\"contracts/libraries/UintArrayUtils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.10;\\n\\n// Adapted from Cryptofin labs Array Utilities\\n// https://github.com/cryptofinlabs/cryptofin-solidity/blob/master/contracts/array-utils/AddressArrayUtils.sol\\n\\nlibrary UintArrayUtils {\\n    /**\\n     * Finds the index of the first occurrence of the given element.\\n     * @param A The input array to search\\n     * @param a The value to find\\n     * @return Returns (index and isIn) for the first occurrence starting from index 0\\n     */\\n    function indexOf(uint256[] memory A, uint256 a) internal pure returns (uint256, bool) {\\n        uint256 length = A.length;\\n        for (uint256 i = 0; i < length; i++) {\\n            if (A[i] == a) {\\n                return (i, true);\\n            }\\n        }\\n        return (0, false);\\n    }\\n\\n    /**\\n     * Returns true if the value is present in the list. Uses indexOf internally.\\n     * @param A The input array to search\\n     * @param a The value to find\\n     * @return Returns isIn for the first occurrence starting from index 0\\n     */\\n    function contains(uint256[] memory A, uint256 a) internal pure returns (bool) {\\n        (, bool isIn) = indexOf(A, a);\\n        return isIn;\\n    }\\n\\n    /**\\n     * Computes the difference of two arrays. Assumes there are no duplicates.\\n     * @param A The first array\\n     * @param B The second array\\n     * @return A - B; an array of values in A not found in B.\\n     */\\n    function difference(uint256[] memory A, uint256[] memory B) internal pure returns (uint256[] memory) {\\n        uint256 length = A.length;\\n        bool[] memory includeMap = new bool[](length);\\n        uint256 count = 0;\\n        // First count the new length because can't push for in-memory arrays\\n        for (uint256 i = 0; i < length; i++) {\\n            uint256 e = A[i];\\n            if (!contains(B, e)) {\\n                includeMap[i] = true;\\n                count++;\\n            }\\n        }\\n        uint256[] memory newItems = new uint256[](count);\\n        uint256 j = 0;\\n        for (uint256 i = 0; i < length; i++) {\\n            if (includeMap[i]) {\\n                newItems[j] = A[i];\\n                j++;\\n            }\\n        }\\n        return newItems;\\n    }\\n\\n    /**\\n     * Returns the intersection of two arrays. Arrays are treated as collections, so duplicates are kept.\\n     * @param A The first array\\n     * @param B The second array\\n     * @return The intersection of the two arrays\\n     */\\n    function intersect(uint256[] memory A, uint256[] memory B) internal pure returns (uint256[] memory) {\\n        uint256 length = A.length;\\n        bool[] memory includeMap = new bool[](length);\\n        uint256 newLength = 0;\\n        for (uint256 i = 0; i < length; i++) {\\n            if (contains(B, A[i])) {\\n                includeMap[i] = true;\\n                newLength++;\\n            }\\n        }\\n        uint256[] memory newArray = new uint256[](newLength);\\n        uint256 j = 0;\\n        for (uint256 i = 0; i < length; i++) {\\n            if (includeMap[i]) {\\n                newArray[j] = A[i];\\n                j++;\\n            }\\n        }\\n        return newArray;\\n    }\\n\\n    /**\\n     * Returns the combination of two arrays\\n     * @param A The first array\\n     * @param B The second array\\n     * @return Returns A extended by B\\n     */\\n    function extend(uint256[] memory A, uint256[] memory B) internal pure returns (uint256[] memory) {\\n        uint256 aLength = A.length;\\n        uint256 bLength = B.length;\\n        uint256[] memory newArray = new uint256[](aLength + bLength);\\n        for (uint256 i = 0; i < aLength; i++) {\\n            newArray[i] = A[i];\\n        }\\n        for (uint256 i = 0; i < bLength; i++) {\\n            newArray[aLength + i] = B[i];\\n        }\\n        return newArray;\\n    }\\n}\\n\",\"keccak256\":\"0xaa77a18dd714b2947b83bd29af205dcec67950bbd0569e5237a1dbd29224192f\",\"license\":\"MIT\"},\"contracts/relayers/ETSRelayerV1.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n/**\\n * @title ETS Relayer Version 1\\n * @author Ethereum Tag Service <team@ets.xyz>\\n *\\n *  \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\n *  \\u2588\\u2588\\u2554\\u2550\\u2550\\u2550\\u2550\\u255d\\u255a\\u2550\\u2550\\u2588\\u2588\\u2554\\u2550\\u2550\\u255d\\u2588\\u2588\\u2554\\u2550\\u2550\\u2550\\u2550\\u255d\\n *  \\u2588\\u2588\\u2588\\u2588\\u2588\\u2557     \\u2588\\u2588\\u2551   \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\n *  \\u2588\\u2588\\u2554\\u2550\\u2550\\u255d     \\u2588\\u2588\\u2551   \\u255a\\u2550\\u2550\\u2550\\u2550\\u2588\\u2588\\u2551\\n *  \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557   \\u2588\\u2588\\u2551   \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2551\\n *  \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d   \\u255a\\u2550\\u255d   \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\n *\\n * @notice Version 1 of upgradeable beacon proxy contract pointed to by ETSRelayerBeacon.sol\\n */\\n\\npragma solidity ^0.8.10;\\n\\nimport { IETS } from \\\"../interfaces/IETS.sol\\\";\\nimport { IETSToken } from \\\"../interfaces/IETSToken.sol\\\";\\nimport { IETSTarget } from \\\"../interfaces/IETSTarget.sol\\\";\\nimport { IETSRelayer } from \\\"./interfaces/IETSRelayer.sol\\\";\\nimport { IETSAccessControls } from \\\"../interfaces/IETSAccessControls.sol\\\";\\nimport { UintArrayUtils } from \\\"../libraries/UintArrayUtils.sol\\\";\\n\\nimport { Initializable } from \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport { ReentrancyGuardUpgradeable } from \\\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\\\";\\nimport { ERC165Upgradeable } from \\\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\\\";\\nimport { OwnableUpgradeable } from \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport { PausableUpgradeable } from \\\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\\\";\\n\\ncontract ETSRelayerV1 is\\n    IETSRelayer,\\n    Initializable,\\n    ERC165Upgradeable,\\n    OwnableUpgradeable,\\n    PausableUpgradeable,\\n    ReentrancyGuardUpgradeable\\n{\\n    using UintArrayUtils for uint256[];\\n\\n    /// @dev Address and interface for ETS Core.\\n    IETS public ets;\\n\\n    /// @dev Address and interface for ETS Token\\n    IETSToken public etsToken;\\n\\n    /// @dev Address and interface for ETS Target.\\n    IETSTarget public etsTarget;\\n\\n    /// @dev Address and interface for ETS Access Controls.\\n    IETSAccessControls public etsAccessControls;\\n\\n    // Public constants\\n    string public constant NAME = \\\"ETS Relayer\\\";\\n    string public constant VERSION = \\\"0.1-Beta\\\";\\n    bytes4 public constant IID_IETSRELAYER = type(IETSRelayer).interfaceId;\\n\\n    // Public variables\\n\\n    /// @notice Address that built this smart contract.\\n    address payable public creator;\\n\\n    /// @dev Public name for Relayer instance.\\n    string public relayerName;\\n\\n    /// Modifiers\\n    modifier onlyRelayerAdmin() {\\n        require(\\n            _msgSender() == owner() || etsAccessControls.hasRole(keccak256(\\\"RELAYER_ADMIN_ROLE\\\"), _msgSender()),\\n            \\\"Caller not relayer admin\\\"\\n        );\\n        _;\\n    }\\n\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\n    constructor() {\\n        _disableInitializers();\\n    }\\n\\n    function initialize(\\n        string memory _relayerName,\\n        IETS _ets,\\n        IETSToken _etsToken,\\n        IETSTarget _etsTarget,\\n        IETSAccessControls _etsAccessControls,\\n        address payable _creator,\\n        address payable _owner\\n    ) public initializer {\\n        __Pausable_init();\\n        __Ownable_init();\\n        __ReentrancyGuard_init();\\n        relayerName = _relayerName;\\n        ets = _ets;\\n        etsToken = _etsToken;\\n        etsTarget = _etsTarget;\\n        etsAccessControls = _etsAccessControls;\\n        creator = _creator;\\n        transferOwnership(_owner);\\n    }\\n\\n    // ============ OWNER INTERFACE ============\\n\\n    /// @inheritdoc IETSRelayer\\n    function pause() public onlyRelayerAdmin {\\n        _pause();\\n        emit RelayerPauseToggledByOwner(address(this));\\n    }\\n\\n    /// @inheritdoc IETSRelayer\\n    function unpause() public onlyRelayerAdmin {\\n        // Check that relayer is not paused by platform.\\n        require(!etsAccessControls.isRelayerLocked(address(this)), \\\"Unpausing not permitted\\\");\\n        require(etsToken.balanceOf(owner()) > 0, \\\"Owner must hold CTAG\\\");\\n        _unpause();\\n        emit RelayerPauseToggledByOwner(address(this));\\n    }\\n\\n    /// @inheritdoc IETSRelayer\\n    function changeOwner(address _newOwner) public whenPaused onlyOwner {\\n        // TODO: check that new owner doesn't already have relayer?\\n        etsAccessControls.changeRelayerOwner(owner(), _newOwner);\\n        transferOwnership(_newOwner);\\n        emit RelayerOwnerChanged(address(this));\\n    }\\n\\n    // ============ PUBLIC INTERFACE ============\\n\\n    /// @inheritdoc IETSRelayer\\n    function applyTags(IETS.TaggingRecordRawInput[] calldata _rawInput) public payable whenNotPaused {\\n        uint256 taggingFee = ets.taggingFee();\\n        for (uint256 i; i < _rawInput.length; ++i) {\\n            _applyTags(_rawInput[i], payable(msg.sender), taggingFee);\\n        }\\n    }\\n\\n    /// @inheritdoc IETSRelayer\\n    function replaceTags(IETS.TaggingRecordRawInput[] calldata _rawInput) public payable whenNotPaused {\\n        uint256 taggingFee = ets.taggingFee();\\n        for (uint256 i; i < _rawInput.length; ++i) {\\n            _replaceTags(_rawInput[i], payable(msg.sender), taggingFee);\\n        }\\n    }\\n\\n    /// @inheritdoc IETSRelayer\\n    function removeTags(IETS.TaggingRecordRawInput[] calldata _rawInput) public payable whenNotPaused {\\n        for (uint256 i; i < _rawInput.length; ++i) {\\n            _removeTags(_rawInput[i], payable(msg.sender));\\n        }\\n    }\\n\\n    /// @inheritdoc IETSRelayer\\n    function getOrCreateTagIds(\\n        string[] calldata _tags\\n    ) public payable whenNotPaused returns (uint256[] memory _tagIds) {\\n        // First let's derive tagIds for the tagStrings.\\n        uint256[] memory tagIds = new uint256[](_tags.length);\\n        for (uint256 i; i < _tags.length; ++i) {\\n            // for new CTAGs msg.sender is logged as \\\"creator\\\" and this contract is \\\"relayer\\\"\\n            tagIds[i] = ets.getOrCreateTagId(_tags[i], payable(msg.sender));\\n        }\\n        return tagIds;\\n    }\\n\\n    // ============ PUBLIC VIEW FUNCTIONS ============\\n\\n    function version() external view virtual returns (string memory) {\\n        return VERSION;\\n    }\\n\\n    /// @inheritdoc ERC165Upgradeable\\n    function supportsInterface(\\n        bytes4 interfaceId\\n    ) public view virtual override(ERC165Upgradeable, IETSRelayer) returns (bool) {\\n        return interfaceId == IID_IETSRELAYER || super.supportsInterface(interfaceId);\\n    }\\n\\n    /// @inheritdoc IETSRelayer\\n    function isPaused() public view virtual returns (bool) {\\n        return paused();\\n    }\\n\\n    /// @inheritdoc IETSRelayer\\n    function getOwner() public view virtual returns (address payable) {\\n        return payable(owner());\\n    }\\n\\n    /// @inheritdoc IETSRelayer\\n    function getRelayerName() public view returns (string memory) {\\n        return relayerName;\\n    }\\n\\n    /// @inheritdoc IETSRelayer\\n    function getCreator() public view returns (address payable) {\\n        return creator;\\n    }\\n\\n    /// @inheritdoc IETSRelayer\\n    function computeTaggingFee(\\n        IETS.TaggingRecordRawInput calldata _rawInput,\\n        IETS.TaggingAction _action\\n    ) public view returns (uint256 fee, uint256 tagCount) {\\n        return ets.computeTaggingFeeFromRawInput(_rawInput, address(this), msg.sender, _action);\\n    }\\n\\n    function getBalance() public view returns (uint) {\\n        return address(this).balance;\\n    }\\n\\n    // ============ INTERNAL FUNCTIONS ============\\n\\n    function _applyTags(\\n        IETS.TaggingRecordRawInput calldata _rawInput,\\n        address payable _tagger,\\n        uint256 _taggingFee\\n    ) internal {\\n        uint256 valueToSendForTagging = 0;\\n        if (_taggingFee > 0) {\\n            // This is either a new tagging record or an existing record that's being appended to.\\n            // Either way, we need to assess the tagging fees.\\n            uint256 actualTagCount = 0;\\n            (valueToSendForTagging, actualTagCount) = ets.computeTaggingFeeFromRawInput(\\n                _rawInput,\\n                address(this),\\n                _tagger,\\n                IETS.TaggingAction.APPEND\\n            );\\n            require(address(this).balance >= valueToSendForTagging, \\\"Insufficient funds\\\");\\n        }\\n\\n        // Call the core applyTagsWithRawInput() function to record new or append to exsiting tagging record.\\n        ets.applyTagsWithRawInput{ value: valueToSendForTagging }(_rawInput, _tagger);\\n    }\\n\\n    function _replaceTags(\\n        IETS.TaggingRecordRawInput calldata _rawInput,\\n        address payable _tagger,\\n        uint256 _taggingFee\\n    ) internal {\\n        uint256 valueToSendForTagging = 0;\\n        if (_taggingFee > 0) {\\n            // This is either a new tagging record or an existing record that's being appended to.\\n            // Either way, we need to assess the tagging fees.\\n            uint256 actualTagCount = 0;\\n            (valueToSendForTagging, actualTagCount) = ets.computeTaggingFeeFromRawInput(\\n                _rawInput,\\n                address(this),\\n                _tagger,\\n                IETS.TaggingAction.REPLACE\\n            );\\n            require(address(this).balance >= valueToSendForTagging, \\\"Insufficient funds\\\");\\n        }\\n\\n        // Finally, call the core replaceTags() function to update the tagging record.\\n        ets.replaceTagsWithRawInput{ value: valueToSendForTagging }(_rawInput, _tagger);\\n    }\\n\\n    function _removeTags(IETS.TaggingRecordRawInput calldata _rawInput, address payable _tagger) internal {\\n        ets.removeTagsWithRawInput(_rawInput, _tagger);\\n    }\\n\\n    /* solhint-disable */\\n    receive() external payable {}\\n\\n    fallback() external payable {}\\n    /* solhint-enable */\\n}\\n\",\"keccak256\":\"0xaf41031b66c13d6ff78207af981141870c699e8c7b8d606c2b908f28f99fb722\",\"license\":\"MIT\"},\"contracts/relayers/interfaces/IETSRelayer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n/**\\n * @title IETSRelayer\\n * @author Ethereum Tag Service <team@ets.xyz>\\n *\\n *  \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\n *  \\u2588\\u2588\\u2554\\u2550\\u2550\\u2550\\u2550\\u255d\\u255a\\u2550\\u2550\\u2588\\u2588\\u2554\\u2550\\u2550\\u255d\\u2588\\u2588\\u2554\\u2550\\u2550\\u2550\\u2550\\u255d\\n *  \\u2588\\u2588\\u2588\\u2588\\u2588\\u2557     \\u2588\\u2588\\u2551   \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\n *  \\u2588\\u2588\\u2554\\u2550\\u2550\\u255d     \\u2588\\u2588\\u2551   \\u255a\\u2550\\u2550\\u2550\\u2550\\u2588\\u2588\\u2551\\n *  \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557   \\u2588\\u2588\\u2551   \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2551`\\n *  \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d   \\u255a\\u2550\\u255d   \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\n *\\n * @notice Minimum interface required for ETS Relayer proxy.\\n */\\n\\npragma solidity ^0.8.10;\\n\\nimport { IETS } from \\\"../../interfaces/IETS.sol\\\";\\n\\ninterface IETSRelayer {\\n    /**\\n     * @dev Emitted when an IETSRelayer contract is paused/unpaused by owner.\\n     *\\n     * @param relayerAddress Address of relayer contract.\\n     */\\n    event RelayerPauseToggledByOwner(address relayerAddress);\\n\\n    /**\\n     * @dev Emitted when an IETSRelayer contract has changed owners.\\n     *\\n     * @param relayerAddress Address of relayer contract.\\n     */\\n    event RelayerOwnerChanged(address relayerAddress);\\n\\n    // ============ OWNER INTERFACE ============\\n\\n    /**\\n     * @notice Pause this relayer contract.\\n     * @dev This function can only be called by the owner when the contract is unpaused.\\n     */\\n    function pause() external;\\n\\n    /**\\n     * @notice Unpause this relayer contract.\\n     * @dev This function can only be called by the owner when the contract is paused.\\n     */\\n    function unpause() external;\\n\\n    /**\\n     * @notice Transfer this contract to a new owner.\\n     *\\n     * @dev This function can only be called by the owner when the contract is paused.\\n     *\\n     * @param newOwner Address of the new contract owner.\\n     */\\n    function changeOwner(address newOwner) external;\\n\\n    // ============ PUBLIC VIEW FUNCTIONS ============\\n\\n    /**\\n     * @notice Broadcast support for IETSRelayer interface to external contracts.\\n     *\\n     * @dev ETSCore will only add relayer contracts that implement IETSRelayer interface.\\n     * Your implementation should broadcast that it implements IETSRelayer interface.\\n     *\\n     * @return boolean: true if this contract implements the interface defined by\\n     * `interfaceId`\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n\\n    /**\\n     * @notice Check whether this contract has been pasued by the owner.\\n     *\\n     * @dev Pause functionality should be provided by OpenZeppelin Pausable utility.\\n     * @return boolean: true for paused; false for not paused.\\n     */\\n    function isPaused() external view returns (bool);\\n\\n    /**\\n     * @notice Returns address of an IETSRelayer contract owner.\\n     *\\n     * @return address of contract owner.\\n     */\\n    function getOwner() external view returns (address payable);\\n\\n    /**\\n     * @notice Returns human readable name for this IETSRelayer contract.\\n     *\\n     * @return name of the Relayer contract as a string.\\n     */\\n    function getRelayerName() external view returns (string memory);\\n\\n    /**\\n     * @notice Returns address of an IETSRelayer contract creator.\\n     *\\n     * @return address of the creator of the Relayer contract.\\n     */\\n    function getCreator() external view returns (address payable);\\n\\n    /**\\n     * @notice Apply one or more tags to a targetURI using tagging record raw client input data.\\n     *\\n     * @param _rawInput Raw client input data formed as TaggingRecordRawInput struct.\\n     */\\n    function applyTags(IETS.TaggingRecordRawInput[] calldata _rawInput) external payable;\\n\\n    /**\\n     * @notice Replace entire tag set in tagging record using raw data for record lookup.\\n     *\\n     * If supplied tag strings don't have CTAGs, new ones are minted.\\n     *\\n     * @param _rawInput Raw client input data formed as TaggingRecordRawInput struct.\\n     */\\n    function replaceTags(IETS.TaggingRecordRawInput[] calldata _rawInput) external payable;\\n\\n    /**\\n     * @notice Remove one or more tags from a tagging record using raw data for record lookup.\\n     *\\n     * @param _rawInput Raw client input data formed as TaggingRecordRawInput struct.\\n     */\\n    function removeTags(IETS.TaggingRecordRawInput[] calldata _rawInput) external payable;\\n\\n    /**\\n     * @notice Get or create CTAG tokens from tag strings.\\n     *\\n     * Combo function that accepts a tag strings and returns corresponding CTAG token Id if it exists,\\n     * or if it doesn't exist, creates a new CTAG and then returns corresponding Id.\\n     *\\n     * Only ETS Publisher contracts may call this function.\\n     *\\n     * @param _tags Array of tag strings.\\n     * @return _tagIds Array of Id of CTAG Ids.\\n     */\\n    function getOrCreateTagIds(string[] calldata _tags) external payable returns (uint256[] memory _tagIds);\\n\\n    /**\\n     * @notice Compute tagging fee for raw input and desired action.\\n     *\\n     * @param _rawInput Raw client input data formed as TaggingRecordRawInput struct.\\n     * @param _action Integer representing action to be performed according to enum TaggingAction.\\n     *\\n     * @return fee Calculated tagging fee in ETH/Matic\\n     * @return tagCount Number of new tags being added to tagging record.\\n     */\\n    function computeTaggingFee(\\n        IETS.TaggingRecordRawInput calldata _rawInput,\\n        IETS.TaggingAction _action\\n    ) external view returns (uint256 fee, uint256 tagCount);\\n}\\n\",\"keccak256\":\"0x156b4d211031a728288f4f3d9900664cc3da648b2acf2393afb8ed6037b1cd7e\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5061001961001e565b6100dd565b600054610100900460ff161561008a5760405162461bcd60e51b815260206004820152602760248201527f496e697469616c697a61626c653a20636f6e747261637420697320696e697469604482015266616c697a696e6760c81b606482015260840160405180910390fd5b60005460ff908116146100db576000805460ff191660ff9081179091556040519081527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b565b6120a880620000ed6000396000f3fe6080604052600436106101ae5760003560e01c8063613facdd116100eb578063a3f4df7e1161008f578063f2fde38b11610061578063f2fde38b146104d6578063f796e587146104f6578063f8c8ef0914610516578063ffa1ad741461054b57005b8063a3f4df7e14610443578063a6f9dae11461048c578063b187bd26146104ac578063e12bcd68146104c157005b80638299f9f9116100c85780638299f9f9146103db5780638456cb59146103fb578063893d20e8146104105780638da5cb5b1461042557005b8063613facdd1461037d578063715018a614610392578063743b7b1f146103a757005b80633f4ba83a1161015257806354fd4d501161012f57806354fd4d50146102eb57806356c63489146103255780635c975abb146103455780635edab3ed1461035d57005b80633f4ba83a146102a357806342a7bfa5146102b857806346ca0f4d146102cb57005b80630f9becab1161018b5780630f9becab146102425780631002bc831461025557806312065fe01461026857806315ccda221461028357005b806301ffc9a7146101b757806302d05d3f146101ec5780630ee2cb101461022457005b366101b557005b005b3480156101c357600080fd5b506101d76101d2366004611a04565b61057f565b60405190151581526020015b60405180910390f35b3480156101f857600080fd5b5060ff5461020c906001600160a01b031681565b6040516001600160a01b0390911681526020016101e3565b34801561023057600080fd5b5060ff546001600160a01b031661020c565b6101b5610250366004611a7a565b6105cf565b6101b5610263366004611a7a565b610696565b34801561027457600080fd5b506040514781526020016101e3565b34801561028f57600080fd5b5060fb5461020c906001600160a01b031681565b3480156102af57600080fd5b506101b56106eb565b6101b56102c6366004611a7a565b6109dc565b3480156102d757600080fd5b5060fc5461020c906001600160a01b031681565b3480156102f757600080fd5b50604080518082019091526008815267302e312d4265746160c01b60208201525b6040516101e39190611abc565b34801561033157600080fd5b5060fd5461020c906001600160a01b031681565b34801561035157600080fd5b5060975460ff166101d7565b61037061036b366004611a7a565b610a9d565b6040516101e39190611b11565b34801561038957600080fd5b50610318610bc5565b34801561039e57600080fd5b506101b5610c58565b3480156103b357600080fd5b506103c263b050394f60e01b81565b6040516001600160e01b031990911681526020016101e3565b3480156103e757600080fd5b5060fe5461020c906001600160a01b031681565b34801561040757600080fd5b506101b5610c6c565b34801561041c57600080fd5b5061020c610d75565b34801561043157600080fd5b506065546001600160a01b031661020c565b34801561044f57600080fd5b506103186040518060400160405280600b81526020017f4554532052656c6179657200000000000000000000000000000000000000000081525081565b34801561049857600080fd5b506101b56104a7366004611b6a565b610d8e565b3480156104b857600080fd5b506101d7610e61565b3480156104cd57600080fd5b50610318610e6f565b3480156104e257600080fd5b506101b56104f1366004611b6a565b610efe565b34801561050257600080fd5b506101b5610511366004611bad565b610f8e565b34801561052257600080fd5b50610536610531366004611cc2565b611146565b604080519283526020830191909152016101e3565b34801561055757600080fd5b5061031860405180604001604052806008815260200167302e312d4265746160c01b81525081565b60006001600160e01b0319821663b050394f60e01b14806105c957507f01ffc9a7000000000000000000000000000000000000000000000000000000006001600160e01b03198316145b92915050565b6105d76111cd565b60fb546040805163fe52656f60e01b815290516000926001600160a01b03169163fe52656f9160048083019260209291908290030181865afa158015610621573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106459190611d1d565b905060005b828110156106905761068084848381811061066757610667611d36565b90506020028101906106799190611d4c565b3384611220565b61068981611d6c565b905061064a565b50505050565b61069e6111cd565b60005b818110156106e6576106d68383838181106106be576106be611d36565b90506020028101906106d09190611d4c565b3361137c565b6106df81611d6c565b90506106a1565b505050565b6065546001600160a01b03163314806107a0575060fe546001600160a01b03166391d148547f619071fe1792701f31c1707f419d418b505e01c7642551568874b32ede501d74336040516001600160e01b031960e085901b16815260048101929092526001600160a01b03166024820152604401602060405180830381865afa15801561077c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107a09190611d95565b6107f15760405162461bcd60e51b815260206004820152601860248201527f43616c6c6572206e6f742072656c617965722061646d696e000000000000000060448201526064015b60405180910390fd5b60fe546040517fa8e2f2350000000000000000000000000000000000000000000000000000000081523060048201526001600160a01b039091169063a8e2f23590602401602060405180830381865afa158015610852573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108769190611d95565b156108c35760405162461bcd60e51b815260206004820152601760248201527f556e70617573696e67206e6f74207065726d697474656400000000000000000060448201526064016107e8565b60fc546000906001600160a01b03166370a082316108e96065546001600160a01b031690565b6040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602401602060405180830381865afa15801561092d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109519190611d1d565b1161099e5760405162461bcd60e51b815260206004820152601460248201527f4f776e6572206d75737420686f6c64204354414700000000000000000000000060448201526064016107e8565b6109a66113fd565b6040513081527fa3705e5a8cf0800dce2d7a76b8737622cbd3b3e9682c53da9eeccd99ad809373906020015b60405180910390a1565b6109e46111cd565b60fb546040805163fe52656f60e01b815290516000926001600160a01b03169163fe52656f9160048083019260209291908290030181865afa158015610a2e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a529190611d1d565b905060005b8281101561069057610a8d848483818110610a7457610a74611d36565b9050602002810190610a869190611d4c565b338461144a565b610a9681611d6c565b9050610a57565b6060610aa76111cd565b60008267ffffffffffffffff811115610ac257610ac2611b87565b604051908082528060200260200182016040528015610aeb578160200160208202803683370190505b50905060005b83811015610bbd5760fb546001600160a01b031663a27eee3c868684818110610b1c57610b1c611d36565b9050602002810190610b2e9190611db7565b336040518463ffffffff1660e01b8152600401610b4d93929190611e27565b6020604051808303816000875af1158015610b6c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b909190611d1d565b828281518110610ba257610ba2611d36565b6020908102919091010152610bb681611d6c565b9050610af1565b509392505050565b60606101008054610bd590611e54565b80601f0160208091040260200160405190810160405280929190818152602001828054610c0190611e54565b8015610c4e5780601f10610c2357610100808354040283529160200191610c4e565b820191906000526020600020905b815481529060010190602001808311610c3157829003601f168201915b5050505050905090565b610c6061156d565b610c6a60006115c7565b565b6065546001600160a01b0316331480610d21575060fe546001600160a01b03166391d148547f619071fe1792701f31c1707f419d418b505e01c7642551568874b32ede501d74336040516001600160e01b031960e085901b16815260048101929092526001600160a01b03166024820152604401602060405180830381865afa158015610cfd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d219190611d95565b610d6d5760405162461bcd60e51b815260206004820152601860248201527f43616c6c6572206e6f742072656c617965722061646d696e000000000000000060448201526064016107e8565b6109a6611626565b6000610d896065546001600160a01b031690565b905090565b610d96611663565b610d9e61156d565b60fe546001600160a01b0316638e0ed37c610dc16065546001600160a01b031690565b6040516001600160e01b031960e084901b1681526001600160a01b0391821660048201529084166024820152604401600060405180830381600087803b158015610e0a57600080fd5b505af1158015610e1e573d6000803e3d6000fd5b50505050610e2b81610efe565b6040513081527f1896d39287b56639e55216c3dd2e10fe8adaab5264319ac3cc7020668ac6f1699060200160405180910390a150565b6000610d8960975460ff1690565b6101008054610e7d90611e54565b80601f0160208091040260200160405190810160405280929190818152602001828054610ea990611e54565b8015610ef65780601f10610ecb57610100808354040283529160200191610ef6565b820191906000526020600020905b815481529060010190602001808311610ed957829003601f168201915b505050505081565b610f0661156d565b6001600160a01b038116610f825760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f646472657373000000000000000000000000000000000000000000000000000060648201526084016107e8565b610f8b816115c7565b50565b600054610100900460ff1615808015610fae5750600054600160ff909116105b80610fc85750303b158015610fc8575060005460ff166001145b61103a5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a656400000000000000000000000000000000000060648201526084016107e8565b6000805460ff19166001179055801561105d576000805461ff0019166101001790555b6110656116b5565b61106d611728565b61107561179b565b8751611089906101009060208b019061196b565b5060fb805473ffffffffffffffffffffffffffffffffffffffff199081166001600160a01b038a81169190911790925560fc8054821689841617905560fd8054821688841617905560fe8054821687841617905560ff80549091169185169190911790556110f682610efe565b801561113c576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b5050505050505050565b60fb54604051630927cfbb60e21b815260009182916001600160a01b039091169063249f3eec90611181908790309033908990600401611fe1565b6040805180830381865afa15801561119d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111c19190612023565b915091505b9250929050565b60975460ff1615610c6a5760405162461bcd60e51b815260206004820152601060248201527f5061757361626c653a207061757365640000000000000000000000000000000060448201526064016107e8565b600081156112f75760fb54604051630927cfbb60e21b81526000916001600160a01b03169063249f3eec9061126090889030908990600190600401611fe1565b6040805180830381865afa15801561127c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112a09190612023565b9092509050478211156112f55760405162461bcd60e51b815260206004820152601260248201527f496e73756666696369656e742066756e6473000000000000000000000000000060448201526064016107e8565b505b60fb546040517f70a306f70000000000000000000000000000000000000000000000000000000081526001600160a01b03909116906370a306f79083906113449088908890600401612047565b6000604051808303818588803b15801561135d57600080fd5b505af1158015611371573d6000803e3d6000fd5b505050505050505050565b60fb546040517f7e2babd00000000000000000000000000000000000000000000000000000000081526001600160a01b0390911690637e2babd0906113c79085908590600401612047565b600060405180830381600087803b1580156113e157600080fd5b505af11580156113f5573d6000803e3d6000fd5b505050505050565b611405611663565b6097805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b0390911681526020016109d2565b600081156115205760fb54604051630927cfbb60e21b81526000916001600160a01b03169063249f3eec90611489908890309089908790600401611fe1565b6040805180830381865afa1580156114a5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114c99190612023565b90925090504782111561151e5760405162461bcd60e51b815260206004820152601260248201527f496e73756666696369656e742066756e6473000000000000000000000000000060448201526064016107e8565b505b60fb546040517f01f1e2d80000000000000000000000000000000000000000000000000000000081526001600160a01b03909116906301f1e2d89083906113449088908890600401612047565b6065546001600160a01b03163314610c6a5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016107e8565b606580546001600160a01b0383811673ffffffffffffffffffffffffffffffffffffffff19831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b61162e6111cd565b6097805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586114323390565b60975460ff16610c6a5760405162461bcd60e51b815260206004820152601460248201527f5061757361626c653a206e6f742070617573656400000000000000000000000060448201526064016107e8565b600054610100900460ff166117205760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b60648201526084016107e8565b610c6a61180e565b600054610100900460ff166117935760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b60648201526084016107e8565b610c6a611885565b600054610100900460ff166118065760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b60648201526084016107e8565b610c6a6118f9565b600054610100900460ff166118795760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b60648201526084016107e8565b6097805460ff19169055565b600054610100900460ff166118f05760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b60648201526084016107e8565b610c6a336115c7565b600054610100900460ff166119645760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b60648201526084016107e8565b600160c955565b82805461197790611e54565b90600052602060002090601f01602090048101928261199957600085556119df565b82601f106119b257805160ff19168380011785556119df565b828001600101855582156119df579182015b828111156119df5782518255916020019190600101906119c4565b506119eb9291506119ef565b5090565b5b808211156119eb57600081556001016119f0565b600060208284031215611a1657600080fd5b81356001600160e01b031981168114611a2e57600080fd5b9392505050565b60008083601f840112611a4757600080fd5b50813567ffffffffffffffff811115611a5f57600080fd5b6020830191508360208260051b85010111156111c657600080fd5b60008060208385031215611a8d57600080fd5b823567ffffffffffffffff811115611aa457600080fd5b611ab085828601611a35565b90969095509350505050565b600060208083528351808285015260005b81811015611ae957858101830151858201604001528201611acd565b81811115611afb576000604083870101525b50601f01601f1916929092016040019392505050565b6020808252825182820181905260009190848201906040850190845b81811015611b4957835183529284019291840191600101611b2d565b50909695505050505050565b6001600160a01b0381168114610f8b57600080fd5b600060208284031215611b7c57600080fd5b8135611a2e81611b55565b634e487b7160e01b600052604160045260246000fd5b8035611ba881611b55565b919050565b600080600080600080600060e0888a031215611bc857600080fd5b873567ffffffffffffffff80821115611be057600080fd5b818a0191508a601f830112611bf457600080fd5b813581811115611c0657611c06611b87565b604051601f8201601f19908116603f01168101908382118183101715611c2e57611c2e611b87565b816040528281528d6020848701011115611c4757600080fd5b82602086016020830137600060208483010152809b505050505050611c6e60208901611b9d565b9550611c7c60408901611b9d565b9450611c8a60608901611b9d565b9350611c9860808901611b9d565b9250611ca660a08901611b9d565b9150611cb460c08901611b9d565b905092959891949750929550565b60008060408385031215611cd557600080fd5b823567ffffffffffffffff811115611cec57600080fd5b830160608186031215611cfe57600080fd5b9150602083013560038110611d1257600080fd5b809150509250929050565b600060208284031215611d2f57600080fd5b5051919050565b634e487b7160e01b600052603260045260246000fd5b60008235605e19833603018112611d6257600080fd5b9190910192915050565b6000600019821415611d8e57634e487b7160e01b600052601160045260246000fd5b5060010190565b600060208284031215611da757600080fd5b81518015158114611a2e57600080fd5b6000808335601e19843603018112611dce57600080fd5b83018035915067ffffffffffffffff821115611de957600080fd5b6020019150368190038213156111c657600080fd5b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b604081526000611e3b604083018587611dfe565b90506001600160a01b0383166020830152949350505050565b600181811c90821680611e6857607f821691505b60208210811415611e8957634e487b7160e01b600052602260045260246000fd5b50919050565b6000808335601e19843603018112611ea657600080fd5b830160208101925035905067ffffffffffffffff811115611ec657600080fd5b8036038313156111c657600080fd5b6000611ee18283611e8f565b60608552611ef3606086018284611dfe565b915050602080840135601e19853603018112611f0e57600080fd5b8401818101903567ffffffffffffffff811115611f2a57600080fd5b8060051b803603871315611f3d57600080fd5b87850384890152818552840183018385018360005b84811015611f8c57878403601f19018352611f6d8287611e8f565b611f78868284611dfe565b955050509186019190860190600101611f52565b505050611f9c6040880188611e8f565b955093508781036040890152611fb3818686611dfe565b98975050505050505050565b60038110611fdd57634e487b7160e01b600052602160045260246000fd5b9052565b608081526000611ff46080830187611ed5565b6001600160a01b03868116602085015285166040840152905061201a6060830184611fbf565b95945050505050565b6000806040838503121561203657600080fd5b505080516020909101519092909150565b60408152600061205a6040830185611ed5565b90506001600160a01b0383166020830152939250505056fea264697066735822122056d78f4d6023318db939dce3344502451b2d7589472fac945e3c6fc595d4ce0364736f6c634300080c0033",
  "deployedBytecode": "0x6080604052600436106101ae5760003560e01c8063613facdd116100eb578063a3f4df7e1161008f578063f2fde38b11610061578063f2fde38b146104d6578063f796e587146104f6578063f8c8ef0914610516578063ffa1ad741461054b57005b8063a3f4df7e14610443578063a6f9dae11461048c578063b187bd26146104ac578063e12bcd68146104c157005b80638299f9f9116100c85780638299f9f9146103db5780638456cb59146103fb578063893d20e8146104105780638da5cb5b1461042557005b8063613facdd1461037d578063715018a614610392578063743b7b1f146103a757005b80633f4ba83a1161015257806354fd4d501161012f57806354fd4d50146102eb57806356c63489146103255780635c975abb146103455780635edab3ed1461035d57005b80633f4ba83a146102a357806342a7bfa5146102b857806346ca0f4d146102cb57005b80630f9becab1161018b5780630f9becab146102425780631002bc831461025557806312065fe01461026857806315ccda221461028357005b806301ffc9a7146101b757806302d05d3f146101ec5780630ee2cb101461022457005b366101b557005b005b3480156101c357600080fd5b506101d76101d2366004611a04565b61057f565b60405190151581526020015b60405180910390f35b3480156101f857600080fd5b5060ff5461020c906001600160a01b031681565b6040516001600160a01b0390911681526020016101e3565b34801561023057600080fd5b5060ff546001600160a01b031661020c565b6101b5610250366004611a7a565b6105cf565b6101b5610263366004611a7a565b610696565b34801561027457600080fd5b506040514781526020016101e3565b34801561028f57600080fd5b5060fb5461020c906001600160a01b031681565b3480156102af57600080fd5b506101b56106eb565b6101b56102c6366004611a7a565b6109dc565b3480156102d757600080fd5b5060fc5461020c906001600160a01b031681565b3480156102f757600080fd5b50604080518082019091526008815267302e312d4265746160c01b60208201525b6040516101e39190611abc565b34801561033157600080fd5b5060fd5461020c906001600160a01b031681565b34801561035157600080fd5b5060975460ff166101d7565b61037061036b366004611a7a565b610a9d565b6040516101e39190611b11565b34801561038957600080fd5b50610318610bc5565b34801561039e57600080fd5b506101b5610c58565b3480156103b357600080fd5b506103c263b050394f60e01b81565b6040516001600160e01b031990911681526020016101e3565b3480156103e757600080fd5b5060fe5461020c906001600160a01b031681565b34801561040757600080fd5b506101b5610c6c565b34801561041c57600080fd5b5061020c610d75565b34801561043157600080fd5b506065546001600160a01b031661020c565b34801561044f57600080fd5b506103186040518060400160405280600b81526020017f4554532052656c6179657200000000000000000000000000000000000000000081525081565b34801561049857600080fd5b506101b56104a7366004611b6a565b610d8e565b3480156104b857600080fd5b506101d7610e61565b3480156104cd57600080fd5b50610318610e6f565b3480156104e257600080fd5b506101b56104f1366004611b6a565b610efe565b34801561050257600080fd5b506101b5610511366004611bad565b610f8e565b34801561052257600080fd5b50610536610531366004611cc2565b611146565b604080519283526020830191909152016101e3565b34801561055757600080fd5b5061031860405180604001604052806008815260200167302e312d4265746160c01b81525081565b60006001600160e01b0319821663b050394f60e01b14806105c957507f01ffc9a7000000000000000000000000000000000000000000000000000000006001600160e01b03198316145b92915050565b6105d76111cd565b60fb546040805163fe52656f60e01b815290516000926001600160a01b03169163fe52656f9160048083019260209291908290030181865afa158015610621573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106459190611d1d565b905060005b828110156106905761068084848381811061066757610667611d36565b90506020028101906106799190611d4c565b3384611220565b61068981611d6c565b905061064a565b50505050565b61069e6111cd565b60005b818110156106e6576106d68383838181106106be576106be611d36565b90506020028101906106d09190611d4c565b3361137c565b6106df81611d6c565b90506106a1565b505050565b6065546001600160a01b03163314806107a0575060fe546001600160a01b03166391d148547f619071fe1792701f31c1707f419d418b505e01c7642551568874b32ede501d74336040516001600160e01b031960e085901b16815260048101929092526001600160a01b03166024820152604401602060405180830381865afa15801561077c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107a09190611d95565b6107f15760405162461bcd60e51b815260206004820152601860248201527f43616c6c6572206e6f742072656c617965722061646d696e000000000000000060448201526064015b60405180910390fd5b60fe546040517fa8e2f2350000000000000000000000000000000000000000000000000000000081523060048201526001600160a01b039091169063a8e2f23590602401602060405180830381865afa158015610852573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108769190611d95565b156108c35760405162461bcd60e51b815260206004820152601760248201527f556e70617573696e67206e6f74207065726d697474656400000000000000000060448201526064016107e8565b60fc546000906001600160a01b03166370a082316108e96065546001600160a01b031690565b6040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602401602060405180830381865afa15801561092d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109519190611d1d565b1161099e5760405162461bcd60e51b815260206004820152601460248201527f4f776e6572206d75737420686f6c64204354414700000000000000000000000060448201526064016107e8565b6109a66113fd565b6040513081527fa3705e5a8cf0800dce2d7a76b8737622cbd3b3e9682c53da9eeccd99ad809373906020015b60405180910390a1565b6109e46111cd565b60fb546040805163fe52656f60e01b815290516000926001600160a01b03169163fe52656f9160048083019260209291908290030181865afa158015610a2e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a529190611d1d565b905060005b8281101561069057610a8d848483818110610a7457610a74611d36565b9050602002810190610a869190611d4c565b338461144a565b610a9681611d6c565b9050610a57565b6060610aa76111cd565b60008267ffffffffffffffff811115610ac257610ac2611b87565b604051908082528060200260200182016040528015610aeb578160200160208202803683370190505b50905060005b83811015610bbd5760fb546001600160a01b031663a27eee3c868684818110610b1c57610b1c611d36565b9050602002810190610b2e9190611db7565b336040518463ffffffff1660e01b8152600401610b4d93929190611e27565b6020604051808303816000875af1158015610b6c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b909190611d1d565b828281518110610ba257610ba2611d36565b6020908102919091010152610bb681611d6c565b9050610af1565b509392505050565b60606101008054610bd590611e54565b80601f0160208091040260200160405190810160405280929190818152602001828054610c0190611e54565b8015610c4e5780601f10610c2357610100808354040283529160200191610c4e565b820191906000526020600020905b815481529060010190602001808311610c3157829003601f168201915b5050505050905090565b610c6061156d565b610c6a60006115c7565b565b6065546001600160a01b0316331480610d21575060fe546001600160a01b03166391d148547f619071fe1792701f31c1707f419d418b505e01c7642551568874b32ede501d74336040516001600160e01b031960e085901b16815260048101929092526001600160a01b03166024820152604401602060405180830381865afa158015610cfd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d219190611d95565b610d6d5760405162461bcd60e51b815260206004820152601860248201527f43616c6c6572206e6f742072656c617965722061646d696e000000000000000060448201526064016107e8565b6109a6611626565b6000610d896065546001600160a01b031690565b905090565b610d96611663565b610d9e61156d565b60fe546001600160a01b0316638e0ed37c610dc16065546001600160a01b031690565b6040516001600160e01b031960e084901b1681526001600160a01b0391821660048201529084166024820152604401600060405180830381600087803b158015610e0a57600080fd5b505af1158015610e1e573d6000803e3d6000fd5b50505050610e2b81610efe565b6040513081527f1896d39287b56639e55216c3dd2e10fe8adaab5264319ac3cc7020668ac6f1699060200160405180910390a150565b6000610d8960975460ff1690565b6101008054610e7d90611e54565b80601f0160208091040260200160405190810160405280929190818152602001828054610ea990611e54565b8015610ef65780601f10610ecb57610100808354040283529160200191610ef6565b820191906000526020600020905b815481529060010190602001808311610ed957829003601f168201915b505050505081565b610f0661156d565b6001600160a01b038116610f825760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f646472657373000000000000000000000000000000000000000000000000000060648201526084016107e8565b610f8b816115c7565b50565b600054610100900460ff1615808015610fae5750600054600160ff909116105b80610fc85750303b158015610fc8575060005460ff166001145b61103a5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a656400000000000000000000000000000000000060648201526084016107e8565b6000805460ff19166001179055801561105d576000805461ff0019166101001790555b6110656116b5565b61106d611728565b61107561179b565b8751611089906101009060208b019061196b565b5060fb805473ffffffffffffffffffffffffffffffffffffffff199081166001600160a01b038a81169190911790925560fc8054821689841617905560fd8054821688841617905560fe8054821687841617905560ff80549091169185169190911790556110f682610efe565b801561113c576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b5050505050505050565b60fb54604051630927cfbb60e21b815260009182916001600160a01b039091169063249f3eec90611181908790309033908990600401611fe1565b6040805180830381865afa15801561119d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111c19190612023565b915091505b9250929050565b60975460ff1615610c6a5760405162461bcd60e51b815260206004820152601060248201527f5061757361626c653a207061757365640000000000000000000000000000000060448201526064016107e8565b600081156112f75760fb54604051630927cfbb60e21b81526000916001600160a01b03169063249f3eec9061126090889030908990600190600401611fe1565b6040805180830381865afa15801561127c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112a09190612023565b9092509050478211156112f55760405162461bcd60e51b815260206004820152601260248201527f496e73756666696369656e742066756e6473000000000000000000000000000060448201526064016107e8565b505b60fb546040517f70a306f70000000000000000000000000000000000000000000000000000000081526001600160a01b03909116906370a306f79083906113449088908890600401612047565b6000604051808303818588803b15801561135d57600080fd5b505af1158015611371573d6000803e3d6000fd5b505050505050505050565b60fb546040517f7e2babd00000000000000000000000000000000000000000000000000000000081526001600160a01b0390911690637e2babd0906113c79085908590600401612047565b600060405180830381600087803b1580156113e157600080fd5b505af11580156113f5573d6000803e3d6000fd5b505050505050565b611405611663565b6097805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b0390911681526020016109d2565b600081156115205760fb54604051630927cfbb60e21b81526000916001600160a01b03169063249f3eec90611489908890309089908790600401611fe1565b6040805180830381865afa1580156114a5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114c99190612023565b90925090504782111561151e5760405162461bcd60e51b815260206004820152601260248201527f496e73756666696369656e742066756e6473000000000000000000000000000060448201526064016107e8565b505b60fb546040517f01f1e2d80000000000000000000000000000000000000000000000000000000081526001600160a01b03909116906301f1e2d89083906113449088908890600401612047565b6065546001600160a01b03163314610c6a5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016107e8565b606580546001600160a01b0383811673ffffffffffffffffffffffffffffffffffffffff19831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b61162e6111cd565b6097805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586114323390565b60975460ff16610c6a5760405162461bcd60e51b815260206004820152601460248201527f5061757361626c653a206e6f742070617573656400000000000000000000000060448201526064016107e8565b600054610100900460ff166117205760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b60648201526084016107e8565b610c6a61180e565b600054610100900460ff166117935760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b60648201526084016107e8565b610c6a611885565b600054610100900460ff166118065760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b60648201526084016107e8565b610c6a6118f9565b600054610100900460ff166118795760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b60648201526084016107e8565b6097805460ff19169055565b600054610100900460ff166118f05760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b60648201526084016107e8565b610c6a336115c7565b600054610100900460ff166119645760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b60648201526084016107e8565b600160c955565b82805461197790611e54565b90600052602060002090601f01602090048101928261199957600085556119df565b82601f106119b257805160ff19168380011785556119df565b828001600101855582156119df579182015b828111156119df5782518255916020019190600101906119c4565b506119eb9291506119ef565b5090565b5b808211156119eb57600081556001016119f0565b600060208284031215611a1657600080fd5b81356001600160e01b031981168114611a2e57600080fd5b9392505050565b60008083601f840112611a4757600080fd5b50813567ffffffffffffffff811115611a5f57600080fd5b6020830191508360208260051b85010111156111c657600080fd5b60008060208385031215611a8d57600080fd5b823567ffffffffffffffff811115611aa457600080fd5b611ab085828601611a35565b90969095509350505050565b600060208083528351808285015260005b81811015611ae957858101830151858201604001528201611acd565b81811115611afb576000604083870101525b50601f01601f1916929092016040019392505050565b6020808252825182820181905260009190848201906040850190845b81811015611b4957835183529284019291840191600101611b2d565b50909695505050505050565b6001600160a01b0381168114610f8b57600080fd5b600060208284031215611b7c57600080fd5b8135611a2e81611b55565b634e487b7160e01b600052604160045260246000fd5b8035611ba881611b55565b919050565b600080600080600080600060e0888a031215611bc857600080fd5b873567ffffffffffffffff80821115611be057600080fd5b818a0191508a601f830112611bf457600080fd5b813581811115611c0657611c06611b87565b604051601f8201601f19908116603f01168101908382118183101715611c2e57611c2e611b87565b816040528281528d6020848701011115611c4757600080fd5b82602086016020830137600060208483010152809b505050505050611c6e60208901611b9d565b9550611c7c60408901611b9d565b9450611c8a60608901611b9d565b9350611c9860808901611b9d565b9250611ca660a08901611b9d565b9150611cb460c08901611b9d565b905092959891949750929550565b60008060408385031215611cd557600080fd5b823567ffffffffffffffff811115611cec57600080fd5b830160608186031215611cfe57600080fd5b9150602083013560038110611d1257600080fd5b809150509250929050565b600060208284031215611d2f57600080fd5b5051919050565b634e487b7160e01b600052603260045260246000fd5b60008235605e19833603018112611d6257600080fd5b9190910192915050565b6000600019821415611d8e57634e487b7160e01b600052601160045260246000fd5b5060010190565b600060208284031215611da757600080fd5b81518015158114611a2e57600080fd5b6000808335601e19843603018112611dce57600080fd5b83018035915067ffffffffffffffff821115611de957600080fd5b6020019150368190038213156111c657600080fd5b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b604081526000611e3b604083018587611dfe565b90506001600160a01b0383166020830152949350505050565b600181811c90821680611e6857607f821691505b60208210811415611e8957634e487b7160e01b600052602260045260246000fd5b50919050565b6000808335601e19843603018112611ea657600080fd5b830160208101925035905067ffffffffffffffff811115611ec657600080fd5b8036038313156111c657600080fd5b6000611ee18283611e8f565b60608552611ef3606086018284611dfe565b915050602080840135601e19853603018112611f0e57600080fd5b8401818101903567ffffffffffffffff811115611f2a57600080fd5b8060051b803603871315611f3d57600080fd5b87850384890152818552840183018385018360005b84811015611f8c57878403601f19018352611f6d8287611e8f565b611f78868284611dfe565b955050509186019190860190600101611f52565b505050611f9c6040880188611e8f565b955093508781036040890152611fb3818686611dfe565b98975050505050505050565b60038110611fdd57634e487b7160e01b600052602160045260246000fd5b9052565b608081526000611ff46080830187611ed5565b6001600160a01b03868116602085015285166040840152905061201a6060830184611fbf565b95945050505050565b6000806040838503121561203657600080fd5b505080516020909101519092909150565b60408152600061205a6040830185611ed5565b90506001600160a01b0383166020830152939250505056fea264697066735822122056d78f4d6023318db939dce3344502451b2d7589472fac945e3c6fc595d4ce0364736f6c634300080c0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "applyTags((string,string[],string)[])": {
        "params": {
          "_rawInput": "Raw client input data formed as TaggingRecordRawInput struct."
        }
      },
      "changeOwner(address)": {
        "details": "This function can only be called by the owner when the contract is paused.",
        "params": {
          "newOwner": "Address of the new contract owner."
        }
      },
      "computeTaggingFee((string,string[],string),uint8)": {
        "params": {
          "_action": "Integer representing action to be performed according to enum TaggingAction.",
          "_rawInput": "Raw client input data formed as TaggingRecordRawInput struct."
        },
        "returns": {
          "fee": "Calculated tagging fee in ETH/Matic",
          "tagCount": "Number of new tags being added to tagging record."
        }
      },
      "constructor": {
        "custom:oz-upgrades-unsafe-allow": "constructor"
      },
      "getCreator()": {
        "returns": {
          "_0": "address of the creator of the Relayer contract."
        }
      },
      "getOrCreateTagIds(string[])": {
        "params": {
          "_tags": "Array of tag strings."
        },
        "returns": {
          "_tagIds": "Array of Id of CTAG Ids."
        }
      },
      "getOwner()": {
        "returns": {
          "_0": "address of contract owner."
        }
      },
      "getRelayerName()": {
        "returns": {
          "_0": "name of the Relayer contract as a string."
        }
      },
      "isPaused()": {
        "details": "Pause functionality should be provided by OpenZeppelin Pausable utility.",
        "returns": {
          "_0": "boolean: true for paused; false for not paused."
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "pause()": {
        "details": "This function can only be called by the owner when the contract is unpaused."
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "removeTags((string,string[],string)[])": {
        "params": {
          "_rawInput": "Raw client input data formed as TaggingRecordRawInput struct."
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "replaceTags((string,string[],string)[])": {
        "params": {
          "_rawInput": "Raw client input data formed as TaggingRecordRawInput struct."
        }
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "unpause()": {
        "details": "This function can only be called by the owner when the contract is paused."
      }
    },
    "stateVariables": {
      "ets": {
        "details": "Address and interface for ETS Core."
      },
      "etsAccessControls": {
        "details": "Address and interface for ETS Access Controls."
      },
      "etsTarget": {
        "details": "Address and interface for ETS Target."
      },
      "etsToken": {
        "details": "Address and interface for ETS Token"
      },
      "relayerName": {
        "details": "Public name for Relayer instance."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "applyTags((string,string[],string)[])": {
        "notice": "Apply one or more tags to a targetURI using tagging record raw client input data."
      },
      "changeOwner(address)": {
        "notice": "Transfer this contract to a new owner."
      },
      "computeTaggingFee((string,string[],string),uint8)": {
        "notice": "Compute tagging fee for raw input and desired action."
      },
      "creator()": {
        "notice": "Address that built this smart contract."
      },
      "getCreator()": {
        "notice": "Returns address of an IETSRelayer contract creator."
      },
      "getOrCreateTagIds(string[])": {
        "notice": "Get or create CTAG tokens from tag strings. Combo function that accepts a tag strings and returns corresponding CTAG token Id if it exists, or if it doesn't exist, creates a new CTAG and then returns corresponding Id. Only ETS Publisher contracts may call this function."
      },
      "getOwner()": {
        "notice": "Returns address of an IETSRelayer contract owner."
      },
      "getRelayerName()": {
        "notice": "Returns human readable name for this IETSRelayer contract."
      },
      "isPaused()": {
        "notice": "Check whether this contract has been pasued by the owner."
      },
      "pause()": {
        "notice": "Pause this relayer contract."
      },
      "removeTags((string,string[],string)[])": {
        "notice": "Remove one or more tags from a tagging record using raw data for record lookup."
      },
      "replaceTags((string,string[],string)[])": {
        "notice": "Replace entire tag set in tagging record using raw data for record lookup. If supplied tag strings don't have CTAGs, new ones are minted."
      },
      "unpause()": {
        "notice": "Unpause this relayer contract."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 912,
        "contract": "contracts/relayers/ETSRelayerV1.sol:ETSRelayerV1",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 915,
        "contract": "contracts/relayers/ETSRelayerV1.sol:ETSRelayerV1",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 4159,
        "contract": "contracts/relayers/ETSRelayerV1.sol:ETSRelayerV1",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 3508,
        "contract": "contracts/relayers/ETSRelayerV1.sol:ETSRelayerV1",
        "label": "__gap",
        "offset": 0,
        "slot": "51",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 419,
        "contract": "contracts/relayers/ETSRelayerV1.sol:ETSRelayerV1",
        "label": "_owner",
        "offset": 0,
        "slot": "101",
        "type": "t_address"
      },
      {
        "astId": 539,
        "contract": "contracts/relayers/ETSRelayerV1.sol:ETSRelayerV1",
        "label": "__gap",
        "offset": 0,
        "slot": "102",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 1231,
        "contract": "contracts/relayers/ETSRelayerV1.sol:ETSRelayerV1",
        "label": "_paused",
        "offset": 0,
        "slot": "151",
        "type": "t_bool"
      },
      {
        "astId": 1336,
        "contract": "contracts/relayers/ETSRelayerV1.sol:ETSRelayerV1",
        "label": "__gap",
        "offset": 0,
        "slot": "152",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 1351,
        "contract": "contracts/relayers/ETSRelayerV1.sol:ETSRelayerV1",
        "label": "_status",
        "offset": 0,
        "slot": "201",
        "type": "t_uint256"
      },
      {
        "astId": 1420,
        "contract": "contracts/relayers/ETSRelayerV1.sol:ETSRelayerV1",
        "label": "__gap",
        "offset": 0,
        "slot": "202",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 16289,
        "contract": "contracts/relayers/ETSRelayerV1.sol:ETSRelayerV1",
        "label": "ets",
        "offset": 0,
        "slot": "251",
        "type": "t_contract(IETS)14647"
      },
      {
        "astId": 16293,
        "contract": "contracts/relayers/ETSRelayerV1.sol:ETSRelayerV1",
        "label": "etsToken",
        "offset": 0,
        "slot": "252",
        "type": "t_contract(IETSToken)15396"
      },
      {
        "astId": 16297,
        "contract": "contracts/relayers/ETSRelayerV1.sol:ETSRelayerV1",
        "label": "etsTarget",
        "offset": 0,
        "slot": "253",
        "type": "t_contract(IETSTarget)15159"
      },
      {
        "astId": 16301,
        "contract": "contracts/relayers/ETSRelayerV1.sol:ETSRelayerV1",
        "label": "etsAccessControls",
        "offset": 0,
        "slot": "254",
        "type": "t_contract(IETSAccessControls)14833"
      },
      {
        "astId": 16316,
        "contract": "contracts/relayers/ETSRelayerV1.sol:ETSRelayerV1",
        "label": "creator",
        "offset": 0,
        "slot": "255",
        "type": "t_address_payable"
      },
      {
        "astId": 16319,
        "contract": "contracts/relayers/ETSRelayerV1.sol:ETSRelayerV1",
        "label": "relayerName",
        "offset": 0,
        "slot": "256",
        "type": "t_string_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_address_payable": {
        "encoding": "inplace",
        "label": "address payable",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IETS)14647": {
        "encoding": "inplace",
        "label": "contract IETS",
        "numberOfBytes": "20"
      },
      "t_contract(IETSAccessControls)14833": {
        "encoding": "inplace",
        "label": "contract IETSAccessControls",
        "numberOfBytes": "20"
      },
      "t_contract(IETSTarget)15159": {
        "encoding": "inplace",
        "label": "contract IETSTarget",
        "numberOfBytes": "20"
      },
      "t_contract(IETSToken)15396": {
        "encoding": "inplace",
        "label": "contract IETSToken",
        "numberOfBytes": "20"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}