{
  "address": "0x46056073E5917Dd5883Ad24d51A20AD6dF5730E9",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "etsAccessControls",
          "type": "address"
        }
      ],
      "name": "AccessControlsSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "previousAdmin",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newAdmin",
          "type": "address"
        }
      ],
      "name": "AdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "beacon",
          "type": "address"
        }
      ],
      "name": "BeaconUpgraded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "ets",
          "type": "address"
        }
      ],
      "name": "ETSCoreSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "termLength",
          "type": "uint256"
        }
      ],
      "name": "OwnershipTermLengthSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tagId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "isPremium",
          "type": "bool"
        }
      ],
      "name": "PremiumFlagSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "tag",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "isPremium",
          "type": "bool"
        }
      ],
      "name": "PremiumTagPreSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tagId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "isReserved",
          "type": "bool"
        }
      ],
      "name": "ReservedFlagSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "maxStringLength",
          "type": "uint256"
        }
      ],
      "name": "TagMaxStringLengthSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "minStringLength",
          "type": "uint256"
        }
      ],
      "name": "TagMinStringLengthSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        }
      ],
      "name": "TagRecycled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        }
      ],
      "name": "TagRenewed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "implementation",
          "type": "address"
        }
      ],
      "name": "Upgraded",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "NAME",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "burn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_tag",
          "type": "string"
        }
      ],
      "name": "computeTagId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_tag",
          "type": "string"
        },
        {
          "internalType": "address payable",
          "name": "_relayer",
          "type": "address"
        },
        {
          "internalType": "address payable",
          "name": "_creator",
          "type": "address"
        }
      ],
      "name": "createTag",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ets",
      "outputs": [
        {
          "internalType": "contract IETS",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "etsAccessControls",
      "outputs": [
        {
          "internalType": "contract IETSAccessControls",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "getCreatorAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "getLastRenewed",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_tag",
          "type": "string"
        },
        {
          "internalType": "address payable",
          "name": "_relayer",
          "type": "address"
        },
        {
          "internalType": "address payable",
          "name": "_creator",
          "type": "address"
        }
      ],
      "name": "getOrCreateTag",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "relayer",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "creator",
              "type": "address"
            },
            {
              "internalType": "string",
              "name": "display",
              "type": "string"
            },
            {
              "internalType": "bool",
              "name": "premium",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "reserved",
              "type": "bool"
            }
          ],
          "internalType": "struct IETSToken.Tag",
          "name": "tag",
          "type": "tuple"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_tag",
          "type": "string"
        },
        {
          "internalType": "address payable",
          "name": "_relayer",
          "type": "address"
        },
        {
          "internalType": "address payable",
          "name": "_creator",
          "type": "address"
        }
      ],
      "name": "getOrCreateTagId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getOwnershipTermLength",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPlatformAddress",
      "outputs": [
        {
          "internalType": "address payable",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "getTagById",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "relayer",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "creator",
              "type": "address"
            },
            {
              "internalType": "string",
              "name": "display",
              "type": "string"
            },
            {
              "internalType": "bool",
              "name": "premium",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "reserved",
              "type": "bool"
            }
          ],
          "internalType": "struct IETSToken.Tag",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_tag",
          "type": "string"
        }
      ],
      "name": "getTagByString",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "relayer",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "creator",
              "type": "address"
            },
            {
              "internalType": "string",
              "name": "display",
              "type": "string"
            },
            {
              "internalType": "bool",
              "name": "premium",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "reserved",
              "type": "bool"
            }
          ],
          "internalType": "struct IETSToken.Tag",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IETSAccessControls",
          "name": "_etsAccessControls",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_tagMinStringLength",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_tagMaxStringLength",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_ownershipTermLength",
          "type": "uint256"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "name": "isTagPremium",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ownershipTermLength",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string[]",
          "name": "_tags",
          "type": "string[]"
        },
        {
          "internalType": "bool",
          "name": "_enabled",
          "type": "bool"
        }
      ],
      "name": "preSetPremiumTags",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "proxiableUUID",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "recycleTag",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "renewTag",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IETSAccessControls",
          "name": "_accessControls",
          "type": "address"
        }
      ],
      "name": "setAccessControls",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IETS",
          "name": "_ets",
          "type": "address"
        }
      ],
      "name": "setETSCore",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_ownershipTermLength",
          "type": "uint256"
        }
      ],
      "name": "setOwnershipTermLength",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "_tokenIds",
          "type": "uint256[]"
        },
        {
          "internalType": "bool",
          "name": "_isPremium",
          "type": "bool"
        }
      ],
      "name": "setPremiumFlag",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "_tokenIds",
          "type": "uint256[]"
        },
        {
          "internalType": "bool",
          "name": "_reserved",
          "type": "bool"
        }
      ],
      "name": "setReservedFlag",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tagMaxStringLength",
          "type": "uint256"
        }
      ],
      "name": "setTagMaxStringLength",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tagMinStringLength",
          "type": "uint256"
        }
      ],
      "name": "setTagMinStringLength",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "tagExistsById",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_tag",
          "type": "string"
        }
      ],
      "name": "tagExistsByString",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tagMaxStringLength",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tagMinStringLength",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "tagOwnershipTermExpired",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "tokenIdToLastRenewed",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "tokenIdToTag",
      "outputs": [
        {
          "internalType": "address",
          "name": "relayer",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "creator",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "display",
          "type": "string"
        },
        {
          "internalType": "bool",
          "name": "premium",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "reserved",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unPause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        }
      ],
      "name": "upgradeTo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "upgradeToAndCall",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    }
  ],
  "numDeployments": 1,
  "solcInputHash": "602022f4d13556fbcfcb291cc0da90cb",
  "metadata": "{\"compiler\":{\"version\":\"0.8.12+commit.f00d7308\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"etsAccessControls\",\"type\":\"address\"}],\"name\":\"AccessControlsSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\"}],\"name\":\"BeaconUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"ets\",\"type\":\"address\"}],\"name\":\"ETSCoreSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"termLength\",\"type\":\"uint256\"}],\"name\":\"OwnershipTermLengthSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tagId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isPremium\",\"type\":\"bool\"}],\"name\":\"PremiumFlagSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"tag\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isPremium\",\"type\":\"bool\"}],\"name\":\"PremiumTagPreSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tagId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isReserved\",\"type\":\"bool\"}],\"name\":\"ReservedFlagSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxStringLength\",\"type\":\"uint256\"}],\"name\":\"TagMaxStringLengthSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minStringLength\",\"type\":\"uint256\"}],\"name\":\"TagMinStringLengthSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"TagRecycled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"TagRenewed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"NAME\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_tag\",\"type\":\"string\"}],\"name\":\"computeTagId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_tag\",\"type\":\"string\"},{\"internalType\":\"address payable\",\"name\":\"_relayer\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"_creator\",\"type\":\"address\"}],\"name\":\"createTag\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ets\",\"outputs\":[{\"internalType\":\"contract IETS\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"etsAccessControls\",\"outputs\":[{\"internalType\":\"contract IETSAccessControls\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getCreatorAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getLastRenewed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_tag\",\"type\":\"string\"},{\"internalType\":\"address payable\",\"name\":\"_relayer\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"_creator\",\"type\":\"address\"}],\"name\":\"getOrCreateTag\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"relayer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"display\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"premium\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"reserved\",\"type\":\"bool\"}],\"internalType\":\"struct IETSToken.Tag\",\"name\":\"tag\",\"type\":\"tuple\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_tag\",\"type\":\"string\"},{\"internalType\":\"address payable\",\"name\":\"_relayer\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"_creator\",\"type\":\"address\"}],\"name\":\"getOrCreateTagId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwnershipTermLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPlatformAddress\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getTagById\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"relayer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"display\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"premium\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"reserved\",\"type\":\"bool\"}],\"internalType\":\"struct IETSToken.Tag\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_tag\",\"type\":\"string\"}],\"name\":\"getTagByString\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"relayer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"display\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"premium\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"reserved\",\"type\":\"bool\"}],\"internalType\":\"struct IETSToken.Tag\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IETSAccessControls\",\"name\":\"_etsAccessControls\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tagMinStringLength\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_tagMaxStringLength\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_ownershipTermLength\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"isTagPremium\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ownershipTermLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string[]\",\"name\":\"_tags\",\"type\":\"string[]\"},{\"internalType\":\"bool\",\"name\":\"_enabled\",\"type\":\"bool\"}],\"name\":\"preSetPremiumTags\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxiableUUID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"recycleTag\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"renewTag\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IETSAccessControls\",\"name\":\"_accessControls\",\"type\":\"address\"}],\"name\":\"setAccessControls\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IETS\",\"name\":\"_ets\",\"type\":\"address\"}],\"name\":\"setETSCore\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_ownershipTermLength\",\"type\":\"uint256\"}],\"name\":\"setOwnershipTermLength\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_tokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"bool\",\"name\":\"_isPremium\",\"type\":\"bool\"}],\"name\":\"setPremiumFlag\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_tokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"bool\",\"name\":\"_reserved\",\"type\":\"bool\"}],\"name\":\"setReservedFlag\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tagMaxStringLength\",\"type\":\"uint256\"}],\"name\":\"setTagMaxStringLength\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tagMinStringLength\",\"type\":\"uint256\"}],\"name\":\"setTagMinStringLength\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"tagExistsById\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_tag\",\"type\":\"string\"}],\"name\":\"tagExistsByString\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tagMaxStringLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tagMinStringLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"tagOwnershipTermExpired\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenIdToLastRenewed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenIdToTag\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"relayer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"display\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"premium\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"reserved\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unPause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"upgradeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"burn(uint256)\":{\"details\":\"Burns `tokenId`. See {ERC721-_burn}. Requirements: - The caller must own `tokenId` or be an approved operator.\"},\"computeTagId(string)\":{\"params\":{\"_tag\":\"Tag string.\"},\"returns\":{\"_0\":\"Id of potential CTAG token id.\"}},\"constructor\":{\"custom:oz-upgrades-unsafe-allow\":\"constructor\"},\"createTag(string,address,address)\":{\"params\":{\"_creator\":\"Address credited with creating CTAG.\",\"_tag\":\"Tag string.\"},\"returns\":{\"_tokenId\":\"Id of CTAG token.\"}},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"getCreatorAddress(uint256)\":{\"params\":{\"_tokenId\":\"CTAG token Id.\"},\"returns\":{\"_0\":\"_creator Creator address of the CTAG.\"}},\"getLastRenewed(uint256)\":{\"params\":{\"_tokenId\":\"CTAG token Id.\"},\"returns\":{\"_0\":\"Block timestamp.\"}},\"getOrCreateTagId(string,address,address)\":{\"params\":{\"_creator\":\"Address credited with creating CTAG.\",\"_relayer\":\"Address of Relayer contract calling ETS Core.\",\"_tag\":\"Tag string.\"},\"returns\":{\"tokenId\":\"Id of CTAG token.\"}},\"getOwnershipTermLength()\":{\"returns\":{\"_0\":\"Term length in days.\"}},\"getPlatformAddress()\":{\"returns\":{\"_0\":\"wallet address for ETS Platform.\"}},\"getTagById(uint256)\":{\"params\":{\"_tokenId\":\"CTAG token Id.\"},\"returns\":{\"_0\":\"CTAG record as Tag struct.\"}},\"getTagByString(string)\":{\"params\":{\"_tag\":\"Tag string.\"},\"returns\":{\"_0\":\"CTAG record as Tag struct.\"}},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"preSetPremiumTags(string[],bool)\":{\"params\":{\"_isPremium\":\"Boolean true for premium, false for not premium.\",\"_tags\":\"Array of tag strings.\"}},\"proxiableUUID()\":{\"details\":\"Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate the implementation's compatibility when performing an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\"},\"recycleTag(uint256)\":{\"params\":{\"_tokenId\":\"Id of CTAG token.\"}},\"renewTag(uint256)\":{\"params\":{\"_tokenId\":\"Id of CTAG token.\"}},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setAccessControls(address)\":{\"params\":{\"_accessControls\":\"Address of ETSAccessControls contract.\"}},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"setETSCore(address)\":{\"params\":{\"_ets\":\"Address of ETS contract.\"}},\"setOwnershipTermLength(uint256)\":{\"params\":{\"_ownershipTermLength\":\"Ownership term length in days.\"}},\"setPremiumFlag(uint256[],bool)\":{\"params\":{\"_isPremium\":\"Boolean true for premium, false for not premium.\",\"_tokenIds\":\"Array of CTAG Ids.\"}},\"setReservedFlag(uint256[],bool)\":{\"params\":{\"_reserved\":\"Boolean true for reserved, false for not reserved.\",\"_tokenIds\":\"Array of CTAG Ids.\"}},\"setTagMaxStringLength(uint256)\":{\"params\":{\"_tagMaxStringLength\":\"maximum character length of string.\"}},\"setTagMinStringLength(uint256)\":{\"params\":{\"_tagMinStringLength\":\"minimum character length of string.\"}},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tagExistsById(uint256)\":{\"params\":{\"_tokenId\":\"Token Id uint computed from tag string via computeTargetId().\"},\"returns\":{\"_0\":\"true if CTAG token exists; false if not.\"}},\"tagExistsByString(string)\":{\"params\":{\"_tag\":\"Tag string.\"},\"returns\":{\"_0\":\"true if CTAG token exists; false if not.\"}},\"tagOwnershipTermExpired(uint256)\":{\"params\":{\"_tokenId\":\"Token Id uint computed from tag string via computeTargetId().\"},\"returns\":{\"_0\":\"true if CTAG ownership term has expired; false if not.\"}},\"tokenURI(uint256)\":{\"details\":\"See {IERC721Metadata-tokenURI}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"},\"upgradeTo(address)\":{\"custom:oz-upgrades-unsafe-allow-reachable\":\"delegatecall\",\"details\":\"Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"},\"upgradeToAndCall(address,bytes)\":{\"custom:oz-upgrades-unsafe-allow-reachable\":\"delegatecall\",\"details\":\"Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"}},\"stateVariables\":{\"tokenIdToLastRenewed\":{\"details\":\"Mapping of tokenId to last renewal.\"},\"tokenIdToTag\":{\"details\":\"Map of CTAG id to CTAG record.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"computeTagId(string)\":{\"notice\":\"Function to deterministically compute & return a CTAG token Id. Every CTAG token and it's associated data struct is mapped to by it's token Id. This Id is computed from the \\\"display\\\" tag string lowercased, hashed and cast as an unsigned integer. Note: Function does not verify if CTAG record exists.\"},\"createTag(string,address,address)\":{\"notice\":\"Create CTAG token from tag string. Reverts if tag exists or is invalid. Only ETS Core can call this function.\"},\"getCreatorAddress(uint256)\":{\"notice\":\"Retrieve Creator address for a CTAG token.\"},\"getLastRenewed(uint256)\":{\"notice\":\"Retrieve last renewal block timestamp for a CTAG.\"},\"getOrCreateTagId(string,address,address)\":{\"notice\":\"Get CTAG token Id from tag string. Combo function that accepts a tag string and returns it's CTAG token Id if it exists, or creates a new CTAG and returns corresponding Id. Only ETS Core can call this function.\"},\"getOwnershipTermLength()\":{\"notice\":\"Retrieve CTAG ownership term length global setting.\"},\"getPlatformAddress()\":{\"notice\":\"Retrieve wallet address for ETS Platform.\"},\"getTagById(uint256)\":{\"notice\":\"Retrieve a CTAG record for a given token Id. Note: returns a struct with empty members when no CTAG exists.\"},\"getTagByString(string)\":{\"notice\":\"Retrieve a CTAG record for a given tag string. Note: returns a struct with empty members when no CTAG exists.\"},\"isTagPremium(string)\":{\"notice\":\"Defines whether a tag has been set up as premium\"},\"pause()\":{\"notice\":\"Pauses ETSToken contract.\"},\"preSetPremiumTags(string[],bool)\":{\"notice\":\"Admin function to flag/unflag tag string(s) as premium prior to minting.\"},\"recycleTag(uint256)\":{\"notice\":\"Recycles a CTAG back to ETS. When ownership term of a CTAG has expired, any wallet or contract may call this function to recycle the tag back to ETS. Once recycled, a tag may be auctioned again.\"},\"renewTag(uint256)\":{\"notice\":\"Renews ownership term of a CTAG. A \\\"CTAG ownership term\\\" is utilized to prevent CTAGs from being abandoned or inaccessable due to lost private keys. Any wallet address may renew the term of a CTAG for an owner. When renewed, the term is extended from the current block timestamp plus the ownershipTermLength public variable.\"},\"setAccessControls(address)\":{\"notice\":\"Sets ETSAccessControls on the ETSToken contract function calls can be restricted to ETS platform only. Note: Caller of this function must be deployer or pre-set as admin of new contract.\"},\"setETSCore(address)\":{\"notice\":\"Sets ETS core on the ETSToken contract so functions can be restricted to ETS platform only.\"},\"setOwnershipTermLength(uint256)\":{\"notice\":\"Admin function to set the ownership term length of a CTAG is set.\"},\"setPremiumFlag(uint256[],bool)\":{\"notice\":\"Admin function to flag/unflag CTAG(s) as premium.\"},\"setReservedFlag(uint256[],bool)\":{\"notice\":\"Admin function to flag/unflag CTAG(s) as reserved. Tags flagged as reserved cannot be auctioned.\"},\"setTagMaxStringLength(uint256)\":{\"notice\":\"admin function to set maximum character length of CTAG display string.\"},\"setTagMinStringLength(uint256)\":{\"notice\":\"Admin function to set minimum  character length of CTAG display string.\"},\"tagExistsById(uint256)\":{\"notice\":\"Check that CTAG token exists for a given computed token Id.\"},\"tagExistsByString(string)\":{\"notice\":\"Check that a CTAG token exists for a given tag string.\"},\"tagOwnershipTermExpired(uint256)\":{\"notice\":\"Check if CTAG token ownership term has expired.\"},\"unPause()\":{\"notice\":\"Unpauses ETSToken contract.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/ETSToken.sol\":\"ETSToken\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControlUpgradeable {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0xb8f5302f12138c5561362e88a78d061573e6298b7a1a5afe84a1e2c8d4d5aeaa\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/interfaces/IERC1967Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (interfaces/IERC1967.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC-1967: Proxy Storage Slots. This interface contains the events defined in the ERC.\\n *\\n * _Available since v4.8.3._\\n */\\ninterface IERC1967Upgradeable {\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Emitted when the beacon is changed.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n}\\n\",\"keccak256\":\"0x47d6e06872b12e72c79d1b5eb55842f860b5fb1207b2317c2358d2766b950a7b\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822ProxiableUpgradeable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x77c89f893e403efc6929ba842b7ccf6534d4ffe03afe31670b4a528c0ad78c0f\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/ERC1967/ERC1967Upgrade.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeaconUpgradeable.sol\\\";\\nimport \\\"../../interfaces/IERC1967Upgradeable.sol\\\";\\nimport \\\"../../interfaces/draft-IERC1822Upgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../../utils/StorageSlotUpgradeable.sol\\\";\\nimport \\\"../utils/Initializable.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract ERC1967UpgradeUpgradeable is Initializable, IERC1967Upgradeable {\\n    function __ERC1967Upgrade_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC1967Upgrade_init_unchained() internal onlyInitializing {\\n    }\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(AddressUpgradeable.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(address newImplementation, bytes memory data, bool forceCall) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            AddressUpgradeable.functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallUUPS(address newImplementation, bytes memory data, bool forceCall) internal {\\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\\n        if (StorageSlotUpgradeable.getBooleanSlot(_ROLLBACK_SLOT).value) {\\n            _setImplementation(newImplementation);\\n        } else {\\n            try IERC1822ProxiableUpgradeable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n                require(slot == _IMPLEMENTATION_SLOT, \\\"ERC1967Upgrade: unsupported proxiableUUID\\\");\\n            } catch {\\n                revert(\\\"ERC1967Upgrade: new implementation is not UUPS\\\");\\n            }\\n            _upgradeToAndCall(newImplementation, data, forceCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(AddressUpgradeable.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            AddressUpgradeable.isContract(IBeaconUpgradeable(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(address newBeacon, bytes memory data, bool forceCall) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            AddressUpgradeable.functionDelegateCall(IBeaconUpgradeable(newBeacon).implementation(), data);\\n        }\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x584ebdf9c1118a7c773f98788e3f3ede01982bdf8932aa06f5acc7d54876e161\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeaconUpgradeable {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0x24b86ac8c005b8c654fbf6ac34a5a4f61580d7273541e83e013e89d66fbf0908\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x89be10e757d242e9b18d5a32c9fbe2019f6d63052bbe46397a430a1d60d7f794\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/UUPSUpgradeable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../interfaces/draft-IERC1822Upgradeable.sol\\\";\\nimport \\\"../ERC1967/ERC1967UpgradeUpgradeable.sol\\\";\\nimport \\\"./Initializable.sol\\\";\\n\\n/**\\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\\n *\\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\\n * `UUPSUpgradeable` with a custom implementation of upgrades.\\n *\\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract UUPSUpgradeable is Initializable, IERC1822ProxiableUpgradeable, ERC1967UpgradeUpgradeable {\\n    function __UUPSUpgradeable_init() internal onlyInitializing {\\n    }\\n\\n    function __UUPSUpgradeable_init_unchained() internal onlyInitializing {\\n    }\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable state-variable-assignment\\n    address private immutable __self = address(this);\\n\\n    /**\\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\\n     * a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\\n     * function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\\n     * fail.\\n     */\\n    modifier onlyProxy() {\\n        require(address(this) != __self, \\\"Function must be called through delegatecall\\\");\\n        require(_getImplementation() == __self, \\\"Function must be called through active proxy\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Check that the execution is not being performed through a delegate call. This allows a function to be\\n     * callable on the implementing contract but not through proxies.\\n     */\\n    modifier notDelegated() {\\n        require(address(this) == __self, \\\"UUPSUpgradeable: must not be called through delegatecall\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the\\n     * implementation. It is used to validate the implementation's compatibility when performing an upgrade.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\\n     */\\n    function proxiableUUID() external view virtual override notDelegated returns (bytes32) {\\n        return _IMPLEMENTATION_SLOT;\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     *\\n     * @custom:oz-upgrades-unsafe-allow-reachable delegatecall\\n     */\\n    function upgradeTo(address newImplementation) public virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, new bytes(0), false);\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\\n     * encoded in `data`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     *\\n     * @custom:oz-upgrades-unsafe-allow-reachable delegatecall\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes memory data) public payable virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, data, true);\\n    }\\n\\n    /**\\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\\n     * {upgradeTo} and {upgradeToAndCall}.\\n     *\\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\\n     *\\n     * ```solidity\\n     * function _authorizeUpgrade(address) internal override onlyOwner {}\\n     * ```\\n     */\\n    function _authorizeUpgrade(address newImplementation) internal virtual;\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xb607cb94c27e89750f5ae2ccebcb94e654e926f6125f4fd4c6262c89875118ad\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    function __Pausable_init() internal onlyInitializing {\\n        __Pausable_init_unchained();\\n    }\\n\\n    function __Pausable_init_unchained() internal onlyInitializing {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x40c636b4572ff5f1dc50cf22097e93c0723ee14eff87e99ac2b02636eeca1250\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == _ENTERED;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xb82ef33f43b6b96109687d91b39c94573fdccaaa423fe28e8ba0977b31c023e0\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721Upgradeable.sol\\\";\\nimport \\\"./IERC721ReceiverUpgradeable.sol\\\";\\nimport \\\"./extensions/IERC721MetadataUpgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../../utils/StringsUpgradeable.sol\\\";\\nimport \\\"../../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721Upgradeable is Initializable, ContextUpgradeable, ERC165Upgradeable, IERC721Upgradeable, IERC721MetadataUpgradeable {\\n    using AddressUpgradeable for address;\\n    using StringsUpgradeable for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    function __ERC721_init(string memory name_, string memory symbol_) internal onlyInitializing {\\n        __ERC721_init_unchained(name_, symbol_);\\n    }\\n\\n    function __ERC721_init_unchained(string memory name_, string memory symbol_) internal onlyInitializing {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165Upgradeable, IERC165Upgradeable) returns (bool) {\\n        return\\n            interfaceId == type(IERC721Upgradeable).interfaceId ||\\n            interfaceId == type(IERC721MetadataUpgradeable).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: address zero is not a valid owner\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _ownerOf(tokenId);\\n        require(owner != address(0), \\\"ERC721: invalid token ID\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not token owner or approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        _requireMinted(tokenId);\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory data) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n        _safeTransfer(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(address from, address to, uint256 tokenId, bytes memory data) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist\\n     */\\n    function _ownerOf(uint256 tokenId) internal view virtual returns (address) {\\n        return _owners[tokenId];\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _ownerOf(tokenId) != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(address to, uint256 tokenId, bytes memory data) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId, 1);\\n\\n        // Check that tokenId was not minted by `_beforeTokenTransfer` hook\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        unchecked {\\n            // Will not overflow unless all 2**256 token ids are minted to the same owner.\\n            // Given that tokens are minted one by one, it is impossible in practice that\\n            // this ever happens. Might change if we allow batch minting.\\n            // The ERC fails to describe this case.\\n            _balances[to] += 1;\\n        }\\n\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     * This is an internal function that does not check if the sender is authorized to operate on the token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId, 1);\\n\\n        // Update ownership in case tokenId was transferred by `_beforeTokenTransfer` hook\\n        owner = ERC721Upgradeable.ownerOf(tokenId);\\n\\n        // Clear approvals\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // Cannot overflow, as that would require more tokens to be burned/transferred\\n            // out than the owner initially received through minting and transferring in.\\n            _balances[owner] -= 1;\\n        }\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(address from, address to, uint256 tokenId) internal virtual {\\n        require(ERC721Upgradeable.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId, 1);\\n\\n        // Check that tokenId was not transferred by `_beforeTokenTransfer` hook\\n        require(ERC721Upgradeable.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n\\n        // Clear approvals from the previous owner\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // `_balances[from]` cannot overflow for the same reason as described in `_burn`:\\n            // `from`'s balance is the number of token held, which is at least one before the current\\n            // transfer.\\n            // `_balances[to]` could overflow in the conditions described in `_mint`. That would require\\n            // all 2**256 token ids to be minted, which in practice is impossible.\\n            _balances[from] -= 1;\\n            _balances[to] += 1;\\n        }\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721Upgradeable.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(address owner, address operator, bool approved) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Reverts if the `tokenId` has not been minted yet.\\n     */\\n    function _requireMinted(uint256 tokenId) internal view virtual {\\n        require(_exists(tokenId), \\\"ERC721: invalid token ID\\\");\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721ReceiverUpgradeable(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\\n                return retval == IERC721ReceiverUpgradeable.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s tokens will be transferred to `to`.\\n     * - When `from` is zero, the tokens will be minted for `to`.\\n     * - When `to` is zero, ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `batchSize` is non-zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 firstTokenId, uint256 batchSize) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s tokens were transferred to `to`.\\n     * - When `from` is zero, the tokens were minted for `to`.\\n     * - When `to` is zero, ``from``'s tokens were burned.\\n     * - `from` and `to` are never both zero.\\n     * - `batchSize` is non-zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(address from, address to, uint256 firstTokenId, uint256 batchSize) internal virtual {}\\n\\n    /**\\n     * @dev Unsafe write access to the balances, used by extensions that \\\"mint\\\" tokens using an {ownerOf} override.\\n     *\\n     * WARNING: Anyone calling this MUST ensure that the balances remain consistent with the ownership. The invariant\\n     * being that for any address `a` the value returned by `balanceOf(a)` must be equal to the number of tokens such\\n     * that `ownerOf(tokenId)` is `a`.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function __unsafe_increaseBalance(address account, uint256 amount) internal {\\n        _balances[account] += amount;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[44] private __gap;\\n}\\n\",\"keccak256\":\"0x09fa60c34ff9b067e5ad3af7719d490a12e0ca39132df6f870746eb0d32308ad\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721ReceiverUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721ReceiverUpgradeable {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xbb2ed8106d94aeae6858e2551a1e7174df73994b77b13ebd120ccaaef80155f5\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721Upgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xbe63437e37e32162d5d11ea8f11a44378c092b4bcbb05b51a813fe4bf33297d4\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721BurnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/extensions/ERC721Burnable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721Upgradeable.sol\\\";\\nimport \\\"../../../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @title ERC721 Burnable Token\\n * @dev ERC721 Token that can be burned (destroyed).\\n */\\nabstract contract ERC721BurnableUpgradeable is Initializable, ContextUpgradeable, ERC721Upgradeable {\\n    function __ERC721Burnable_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC721Burnable_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev Burns `tokenId`. See {ERC721-_burn}.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own `tokenId` or be an approved operator.\\n     */\\n    function burn(uint256 tokenId) public virtual {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n        _burn(tokenId);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x03006ed332e7aab87b6aacc771da96e3854bfe1624e1741ede27392dd3df41cf\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721PausableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.2) (token/ERC721/extensions/ERC721Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721Upgradeable.sol\\\";\\nimport \\\"../../../security/PausableUpgradeable.sol\\\";\\nimport \\\"../../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev ERC721 token with pausable token transfers, minting and burning.\\n *\\n * Useful for scenarios such as preventing trades until the end of an evaluation\\n * period, or having an emergency switch for freezing all token transfers in the\\n * event of a large bug.\\n *\\n * IMPORTANT: This contract does not include public pause and unpause functions. In\\n * addition to inheriting this contract, you must define both functions, invoking the\\n * {Pausable-_pause} and {Pausable-_unpause} internal functions, with appropriate\\n * access control, e.g. using {AccessControl} or {Ownable}. Not doing so will\\n * make the contract unpausable.\\n */\\nabstract contract ERC721PausableUpgradeable is Initializable, ERC721Upgradeable, PausableUpgradeable {\\n    function __ERC721Pausable_init() internal onlyInitializing {\\n        __Pausable_init_unchained();\\n    }\\n\\n    function __ERC721Pausable_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {ERC721-_beforeTokenTransfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - the contract must not be paused.\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 firstTokenId,\\n        uint256 batchSize\\n    ) internal virtual override {\\n        super._beforeTokenTransfer(from, to, firstTokenId, batchSize);\\n\\n        require(!paused(), \\\"ERC721Pausable: token transfer while paused\\\");\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xb66b2285eab5f7766c538c326c1a0e86013487b1636177d595d1ce543fec43a1\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/IERC721MetadataUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721Upgradeable.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721MetadataUpgradeable is IERC721Upgradeable {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x95a471796eb5f030fdc438660bebec121ad5d063763e64d92376ffb4b5ce8b70\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9c80f545915582e63fe206c6ce27cbe85a86fc10b9cd2a0e8c9488fb7c2ee422\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._\\n * _Available since v4.9 for `string`, `bytes`._\\n */\\nlibrary StorageSlotUpgradeable {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x07ac95acad040f1fb1f6120dd0aa5f702db69446e95f82613721879d30de0908\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/MathUpgradeable.sol\\\";\\nimport \\\"./math/SignedMathUpgradeable.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = MathUpgradeable.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMathUpgradeable.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, MathUpgradeable.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0xb96dc79b65b7c37937919dcdb356a969ce0aa2e8338322bf4dc027a3c9c9a7eb\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x9a3b990bd56d139df3e454a9edf1c64668530b5a77fc32eb063bc206f958274a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary MathUpgradeable {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2bc0007987c229ae7624eb29be6a9b84f6a6a5872f76248b15208b131ea41c4e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/math/SignedMathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMathUpgradeable {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x88f6b7bba3ee33eeb741f9a0f5bc98b6e6e352d0fe4905377bb328590f84095a\",\"license\":\"MIT\"},\"contracts/ETSToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n/**\\n * @title ETSToken\\n * @author Ethereum Tag Service <team@ets.xyz>\\n *\\n *  \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\n *  \\u2588\\u2588\\u2554\\u2550\\u2550\\u2550\\u2550\\u255d\\u255a\\u2550\\u2550\\u2588\\u2588\\u2554\\u2550\\u2550\\u255d\\u2588\\u2588\\u2554\\u2550\\u2550\\u2550\\u2550\\u255d\\n *  \\u2588\\u2588\\u2588\\u2588\\u2588\\u2557     \\u2588\\u2588\\u2551   \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\n *  \\u2588\\u2588\\u2554\\u2550\\u2550\\u255d     \\u2588\\u2588\\u2551   \\u255a\\u2550\\u2550\\u2550\\u2550\\u2588\\u2588\\u2551\\n *  \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557   \\u2588\\u2588\\u2551   \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2551\\n *  \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d   \\u255a\\u2550\\u255d   \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\n *\\n * @notice This is the core ETSToken.sol contract that governs the creation & management of\\n * Ethereum Tag Service composable tags (CTAGs).\\n *\\n * CTAGs are ERC-721 non-fungible tokens that store a single tag string and origin attribution data\\n * including a \\\"Relayer\\\" address and a \\\"Creator\\\" address. The tag string must conform to a few simple\\n * validation rules.\\n *\\n * CTAGs are identified in ETS by their Id (tagId) which is an unsigned integer computed from the lowercased\\n * tag \\\"display\\\" string. Given this, only one CTAG exists for a tag string regardless of its case. For\\n * example, #Punks, #punks and #PUNKS all resolve to the same CTAG.\\n *\\n * CTAG Ids are combined with Target Ids (see ETSTarget.sol) by ETS core (ETS.sol) to form \\\"Tagging Records\\\".\\n * See ETS.sol for more details on Tagging Records.\\n */\\n\\npragma solidity ^0.8.10;\\n\\nimport { IETS } from \\\"./interfaces/IETS.sol\\\";\\nimport { IETSToken } from \\\"./interfaces/IETSToken.sol\\\";\\nimport { IETSAccessControls } from \\\"./interfaces/IETSAccessControls.sol\\\";\\nimport { StringHelpers } from \\\"./utils/StringHelpers.sol\\\";\\nimport { ERC721PausableUpgradeable } from \\\"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721PausableUpgradeable.sol\\\";\\nimport { ERC721BurnableUpgradeable, ERC721Upgradeable, IERC165Upgradeable } from \\\"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721BurnableUpgradeable.sol\\\";\\nimport { ReentrancyGuardUpgradeable } from \\\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\\\";\\nimport { UUPSUpgradeable } from \\\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\\\";\\n\\ncontract ETSToken is\\n    ERC721PausableUpgradeable,\\n    ERC721BurnableUpgradeable,\\n    IETSToken,\\n    ReentrancyGuardUpgradeable,\\n    UUPSUpgradeable,\\n    StringHelpers\\n{\\n    IETS public ets;\\n    IETSAccessControls public etsAccessControls;\\n\\n    // Public constants\\n    string public constant NAME = \\\"CTAG Token\\\";\\n\\n    // Public variables\\n    uint256 public tagMinStringLength;\\n    uint256 public tagMaxStringLength;\\n    uint256 public ownershipTermLength;\\n\\n    /// @dev Map of CTAG id to CTAG record.\\n    mapping(uint256 => Tag) public tokenIdToTag;\\n\\n    /// @dev Mapping of tokenId to last renewal.\\n    mapping(uint256 => uint256) public tokenIdToLastRenewed;\\n\\n    /// @notice Defines whether a tag has been set up as premium\\n    mapping(string => bool) public isTagPremium;\\n\\n    /// Modifiers\\n    modifier onlyETSCore() {\\n        require(_msgSender() == address(ets), \\\"Caller is not ETS core\\\");\\n        _;\\n    }\\n\\n    modifier onlyAdmin() {\\n        require(etsAccessControls.isAdmin(_msgSender()), \\\"Access denied\\\");\\n        _;\\n    }\\n\\n    modifier onlyRelayer() {\\n        require(etsAccessControls.isRelayer(_msgSender()), \\\"Caller is not relayer\\\");\\n        _;\\n    }\\n\\n    // ============ UUPS INTERFACE ============\\n\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\n    constructor() {\\n        _disableInitializers();\\n    }\\n\\n    function initialize(\\n        IETSAccessControls _etsAccessControls,\\n        uint256 _tagMinStringLength,\\n        uint256 _tagMaxStringLength,\\n        uint256 _ownershipTermLength\\n    ) public initializer {\\n        __ERC721_init(\\\"Ethereum Tag Service\\\", \\\"CTAG\\\");\\n        __ERC721Pausable_init();\\n        __ERC721Burnable_init();\\n        __ReentrancyGuard_init();\\n\\n        // Initialize ETSToken settings using public\\n        // functions so our subgraph can capture them.\\n        // To call them requires etsAccessControls being\\n        // set so we set that manually first.\\n        etsAccessControls = _etsAccessControls;\\n        setTagMinStringLength(_tagMinStringLength);\\n        setTagMaxStringLength(_tagMaxStringLength);\\n        setOwnershipTermLength(_ownershipTermLength);\\n    }\\n\\n    // solhint-disable-next-line\\n    function _authorizeUpgrade(address) internal override onlyAdmin {}\\n\\n    // ============ OWNER INTERFACE ============\\n\\n    /**\\n     * @notice Sets ETS core on the ETSToken contract so functions can be\\n     * restricted to ETS platform only.\\n     *\\n     * @param _ets Address of ETS contract.\\n     */\\n    function setETSCore(IETS _ets) public onlyAdmin {\\n        require(address(_ets) != address(0), \\\"Address cannot be zero\\\");\\n        ets = _ets;\\n        emit ETSCoreSet(address(ets));\\n    }\\n\\n    /**\\n     * @notice Sets ETSAccessControls on the ETSToken contract function calls can be\\n     * restricted to ETS platform only. Note: Caller of this function must be deployer\\n     * or pre-set as admin of new contract.\\n     *\\n     * @param _accessControls Address of ETSAccessControls contract.\\n     */\\n    function setAccessControls(IETSAccessControls _accessControls) public onlyAdmin {\\n        require(address(_accessControls) != address(0), \\\"Address cannot be zero\\\");\\n        require(_accessControls.isAdmin(_msgSender()), \\\"Caller not admin in new contract\\\");\\n        etsAccessControls = _accessControls;\\n        emit AccessControlsSet(address(etsAccessControls));\\n    }\\n\\n    /**\\n     * @notice Pauses ETSToken contract.\\n     */\\n    function pause() public onlyAdmin whenNotPaused {\\n        _pause();\\n    }\\n\\n    /**\\n     * @notice Unpauses ETSToken contract.\\n     */\\n    function unPause() public onlyAdmin whenPaused {\\n        _unpause();\\n    }\\n\\n    /// @inheritdoc ERC721BurnableUpgradeable\\n    function burn(uint256 tokenId) public override onlyAdmin {\\n        _burn(tokenId);\\n    }\\n\\n    /// @inheritdoc IETSToken\\n    function setTagMaxStringLength(uint256 _tagMaxStringLength) public onlyAdmin {\\n        tagMaxStringLength = _tagMaxStringLength;\\n        emit TagMaxStringLengthSet(_tagMaxStringLength);\\n    }\\n\\n    /// @inheritdoc IETSToken\\n    function setTagMinStringLength(uint256 _tagMinStringLength) public onlyAdmin {\\n        tagMinStringLength = _tagMinStringLength;\\n        emit TagMinStringLengthSet(_tagMinStringLength);\\n    }\\n\\n    /// @inheritdoc IETSToken\\n    function setOwnershipTermLength(uint256 _ownershipTermLength) public onlyAdmin {\\n        ownershipTermLength = _ownershipTermLength;\\n        emit OwnershipTermLengthSet(_ownershipTermLength);\\n    }\\n\\n    /// @inheritdoc IETSToken\\n    function preSetPremiumTags(string[] calldata _tags, bool _enabled) public onlyAdmin {\\n        require(_tags.length > 0, \\\"Empty array\\\");\\n        for (uint256 i; i < _tags.length; ++i) {\\n            string memory tag = __lower(_tags[i]);\\n            isTagPremium[tag] = _enabled;\\n            emit PremiumTagPreSet(tag, _enabled);\\n        }\\n    }\\n\\n    /// @inheritdoc IETSToken\\n    function setPremiumFlag(uint256[] calldata _tokenIds, bool _isPremium) public onlyAdmin {\\n        require(_tokenIds.length > 0, \\\"Empty array\\\");\\n        for (uint256 i; i < _tokenIds.length; ++i) {\\n            uint256 tokenId = _tokenIds[i];\\n            require(ownerOf(tokenId) == getPlatformAddress(), \\\"Not owned by platform\\\");\\n            tokenIdToTag[tokenId].premium = _isPremium;\\n            emit PremiumFlagSet(tokenId, _isPremium);\\n        }\\n    }\\n\\n    /// @inheritdoc IETSToken\\n    function setReservedFlag(uint256[] calldata _tokenIds, bool _reserved) public onlyAdmin {\\n        require(_tokenIds.length > 0, \\\"Empty array\\\");\\n        for (uint256 i; i < _tokenIds.length; ++i) {\\n            uint256 tokenId = _tokenIds[i];\\n            require(ownerOf(tokenId) == getPlatformAddress(), \\\"Token not owned by platform\\\");\\n            tokenIdToTag[tokenId].reserved = _reserved;\\n            emit ReservedFlagSet(tokenId, _reserved);\\n        }\\n    }\\n\\n    // ============ PUBLIC INTERFACE ============\\n\\n    function getOrCreateTag(\\n        string calldata _tag,\\n        address payable _relayer,\\n        address payable _creator\\n    ) public payable returns (Tag memory tag) {\\n        uint256 tokenId = computeTagId(_tag);\\n        if (!tagExistsById(tokenId)) {\\n            tokenId = createTag(_tag, _relayer, _creator);\\n        }\\n        return tokenIdToTag[tokenId];\\n    }\\n\\n    /// @inheritdoc IETSToken\\n    function getOrCreateTagId(\\n        string calldata _tag,\\n        address payable _relayer,\\n        address payable _creator\\n    ) public payable returns (uint256 tokenId) {\\n        uint256 _tokenId = computeTagId(_tag);\\n        if (!tagExistsById(_tokenId)) {\\n            _tokenId = createTag(_tag, _relayer, _creator);\\n        }\\n        return _tokenId;\\n    }\\n\\n    /// @inheritdoc IETSToken\\n    function createTag(\\n        string calldata _tag,\\n        address payable _relayer,\\n        address payable _creator\\n    ) public payable nonReentrant onlyETSCore returns (uint256 _tokenId) {\\n        // Perform basic tag string validation.\\n        uint256 tagId = _assertTagIsValid(_tag);\\n\\n        // mint the token, transferring it to the platform.\\n        _safeMint(getPlatformAddress(), tagId);\\n\\n        // Store CTAG data in state.\\n        tokenIdToTag[tagId] = Tag({\\n            display: _tag,\\n            relayer: _relayer,\\n            creator: _creator,\\n            premium: isTagPremium[__lower(_tag)],\\n            reserved: isTagPremium[__lower(_tag)]\\n        });\\n\\n        return tagId;\\n    }\\n\\n    /// @inheritdoc IETSToken\\n    function renewTag(uint256 _tokenId) public {\\n        require(_exists(_tokenId), \\\"ETS: CTAG not found\\\");\\n\\n        if (ownerOf(_tokenId) == getPlatformAddress()) {\\n            _setLastRenewed(_tokenId, 0);\\n        } else {\\n            _setLastRenewed(_tokenId, block.timestamp);\\n        }\\n    }\\n\\n    /// @inheritdoc IETSToken\\n    function recycleTag(uint256 _tokenId) public {\\n        require(_exists(_tokenId), \\\"ETS: CTAG not found\\\");\\n        require(ownerOf(_tokenId) != getPlatformAddress(), \\\"Tag owned by platform\\\");\\n        require(tagOwnershipTermExpired(_tokenId), \\\"recycling not available\\\");\\n\\n        _transfer(ownerOf(_tokenId), getPlatformAddress(), _tokenId);\\n        emit TagRecycled(_tokenId, _msgSender());\\n    }\\n\\n    function supportsInterface(\\n        bytes4 interfaceId\\n    ) public view virtual override(ERC721Upgradeable, IERC165Upgradeable) returns (bool) {\\n        return super.supportsInterface(interfaceId);\\n    }\\n\\n    // ============ PUBLIC VIEW FUNCTIONS ============\\n\\n    /// @inheritdoc IETSToken\\n    function computeTagId(string memory _tag) public pure returns (uint256) {\\n        string memory _machineName = __lower(_tag);\\n        return uint256(keccak256(bytes(_machineName)));\\n    }\\n\\n    /// @inheritdoc IETSToken\\n    function tagExistsByString(string calldata _tag) public view returns (bool) {\\n        return _exists(computeTagId(_tag));\\n    }\\n\\n    /// @inheritdoc IETSToken\\n    function tagExistsById(uint256 _tokenId) public view returns (bool) {\\n        return _exists(_tokenId);\\n    }\\n\\n    /// @inheritdoc IETSToken\\n    function tagOwnershipTermExpired(uint256 _tokenId) public view returns (bool) {\\n        return (getLastRenewed(_tokenId) + getOwnershipTermLength() < block.timestamp);\\n    }\\n\\n    /// @inheritdoc IETSToken\\n    function getTagByString(string calldata _tag) public view returns (Tag memory) {\\n        return getTagById(computeTagId(_tag));\\n    }\\n\\n    /// @inheritdoc IETSToken\\n    function getTagById(uint256 _tokenId) public view returns (Tag memory) {\\n        return tokenIdToTag[_tokenId];\\n    }\\n\\n    /// @inheritdoc IETSToken\\n    function getOwnershipTermLength() public view returns (uint256) {\\n        return ownershipTermLength;\\n    }\\n\\n    /// @inheritdoc IETSToken\\n    function getLastRenewed(uint256 _tokenId) public view returns (uint256) {\\n        return tokenIdToLastRenewed[_tokenId];\\n    }\\n\\n    /// @inheritdoc IETSToken\\n    function getPlatformAddress() public view returns (address payable) {\\n        return etsAccessControls.getPlatformAddress();\\n    }\\n\\n    /// @inheritdoc IETSToken\\n    function getCreatorAddress(uint256 _tokenId) public view returns (address) {\\n        return tokenIdToTag[_tokenId].creator;\\n    }\\n\\n    // ============ INTERNAL FUNCTIONS ============\\n\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 firstTokenId,\\n        uint256 batchSize\\n    ) internal override(ERC721PausableUpgradeable, ERC721Upgradeable) whenNotPaused {\\n        super._beforeTokenTransfer(from, to, firstTokenId, batchSize);\\n        require(!paused(), \\\"Contract paused\\\");\\n    }\\n\\n    /// @dev See {ERC721-_afterTokenTransfer}. Contract must not be paused.\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        uint256 batchSize\\n    ) internal virtual override(ERC721Upgradeable) {\\n        super._afterTokenTransfer(from, to, tokenId, batchSize);\\n\\n        if (to != address(0)) {\\n            // Reset token ownership term.\\n            if (to == getPlatformAddress()) {\\n                _setLastRenewed(tokenId, 0);\\n            } else {\\n                _setLastRenewed(tokenId, block.timestamp);\\n            }\\n        }\\n\\n        // If from address is not black hole or platform, and balance is going zero pause their relayer.\\n        if (from != address(0) && from != getPlatformAddress() && balanceOf(from) == 0) {\\n            etsAccessControls.pauseRelayerByOwnerAddress(from);\\n        }\\n    }\\n\\n    /**\\n     * @dev Private method used for validating a CTAG string before minting.\\n     *\\n     * A series of assertions are performed reverting the transaction for any validation violations.\\n     *\\n     * @param _tag Proposed tag string.\\n     */\\n    function _assertTagIsValid(string memory _tag) private view returns (uint256 _tagId) {\\n        // generate token ID from machine name\\n        uint256 tagId = computeTagId(_tag);\\n\\n        require(!_exists(tagId), \\\"ERC721: token already minted\\\");\\n\\n        bytes memory tagStringBytes = bytes(_tag);\\n        require(\\n            tagStringBytes.length >= tagMinStringLength && tagStringBytes.length <= tagMaxStringLength,\\n            \\\"Invalid tag format\\\"\\n        );\\n\\n        require(tagStringBytes[0] == 0x23, \\\"Tag must start with #\\\");\\n\\n        // start from first char after #\\n        for (uint256 i = 1; i < tagStringBytes.length; i++) {\\n            bytes1 char = tagStringBytes[i];\\n            require(char != 0x20, \\\"Spaces in tag\\\");\\n            require(char != 0x23, \\\"Tag contains prefix\\\");\\n        }\\n\\n        return tagId;\\n    }\\n\\n    function _setLastRenewed(uint256 _tokenId, uint256 _timestamp) internal {\\n        tokenIdToLastRenewed[_tokenId] = _timestamp;\\n        emit TagRenewed(_tokenId, msg.sender);\\n    }\\n}\\n\",\"keccak256\":\"0x89a8eaa0aeb1b885d92caedc2c39d225f775954e65d2fc8a577887eb5703b186\",\"license\":\"MIT\"},\"contracts/interfaces/IETS.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n/**\\n * @title IETS\\n * @author Ethereum Tag Service <team@ets.xyz>\\n *\\n *  \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\n *  \\u2588\\u2588\\u2554\\u2550\\u2550\\u2550\\u2550\\u255d\\u255a\\u2550\\u2550\\u2588\\u2588\\u2554\\u2550\\u2550\\u255d\\u2588\\u2588\\u2554\\u2550\\u2550\\u2550\\u2550\\u255d\\n *  \\u2588\\u2588\\u2588\\u2588\\u2588\\u2557     \\u2588\\u2588\\u2551   \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\n *  \\u2588\\u2588\\u2554\\u2550\\u2550\\u255d     \\u2588\\u2588\\u2551   \\u255a\\u2550\\u2550\\u2550\\u2550\\u2588\\u2588\\u2551\\n *  \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557   \\u2588\\u2588\\u2551   \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2551`\\n *  \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d   \\u255a\\u2550\\u255d   \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\n *\\n * @notice This is the interface for the ETS.sol core contract that records ETS TaggingRecords to the blockchain.\\n */\\n\\npragma solidity ^0.8.10;\\n\\ninterface IETS {\\n    /**\\n     * @notice Data structure for raw client input data.\\n     *\\n     * @param targetURI Unique resource identifier string, eg. \\\"https://google.com\\\"\\n     * @param tagStrings Array of hashtag strings, eg. [\\\"#Love, \\\"#Blue\\\"]\\n     * @param recordType Arbitrary identifier for type of tagging record, eg. \\\"Bookmark\\\"\\n     */\\n    struct TaggingRecordRawInput {\\n        string targetURI;\\n        string[] tagStrings;\\n        string recordType;\\n    }\\n\\n    /**\\n     * @notice Data structure for an Ethereum Tag Service \\\"tagging record\\\".\\n     *\\n     * The TaggingRecord is the fundamental data structure of ETS and reflects \\\"who tagged what, where and why\\\".\\n     *\\n     * Every Tagging record has a unique Id computed from the hashed composite of targetId, recordType, tagger and\\n     * relayer addresses cast as a uint256. see computeTaggingRecordId()\\n     *\\n     * Given this design, a tagger who tags the same URI with the same tags and recordType via two different relayers\\n     * would produce two TaggingRecords in ETS.\\n     *\\n     * @param tagIds Ids of CTAG token(s).\\n     * @param targetId Id of target being tagged.\\n     * @param recordType Arbitrary identifier for type of tagging record.\\n     * @param relayer Address of Relayer contract that wrote tagging record.\\n     * @param tagger Address of wallet that initiated tagging record via relayer.\\n     */\\n    struct TaggingRecord {\\n        uint256[] tagIds;\\n        uint256 targetId;\\n        string recordType;\\n        address relayer;\\n        address tagger;\\n    }\\n\\n    /**\\n     * @dev Action types available for tags in a tagging record.\\n     *\\n     * 0 - APPEND Add tags to a tagging record.\\n     * 1 - REPLACE Replace (overwrite) tags in a tagging record.\\n     * 2 - REMOVE Remove tags in a tagging record.\\n     */\\n    enum TaggingAction {\\n        APPEND,\\n        REPLACE,\\n        REMOVE\\n    }\\n\\n    /**\\n     * @dev emitted when the ETS Access Controls is set.\\n     *\\n     * @param newAccessControls contract address access controls is set to.\\n     */\\n    event AccessControlsSet(address newAccessControls);\\n\\n    /**\\n     * @dev emitted when ETS tagging fee is set.\\n     *\\n     * @param newTaggingFee new tagging fee.\\n     */\\n    event TaggingFeeSet(uint256 newTaggingFee);\\n\\n    /**\\n     * @dev emitted when participant distribution percentages are set.\\n     *\\n     * @param platformPercentage percentage of tagging fee allocated to ETS.\\n     * @param relayerPercentage percentage of tagging fee allocated to relayer of record for CTAG being used in tagging record.\\n     */\\n    event PercentagesSet(uint256 platformPercentage, uint256 relayerPercentage);\\n\\n    /**\\n     * @dev emitted when a new tagging record is recorded within ETS.\\n     *\\n     * @param taggingRecordId Unique identifier of tagging record.\\n     */\\n    event TaggingRecordCreated(uint256 taggingRecordId);\\n\\n    /**\\n     * @dev emitted when a tagging record is updated.\\n     *\\n     * @param taggingRecordId tagging record being updated.\\n     * @param action Type of update applied as TaggingAction enum.\\n     */\\n    event TaggingRecordUpdated(uint256 taggingRecordId, TaggingAction action);\\n\\n    /**\\n     * @dev emitted when ETS participant draws down funds accrued to their contract or wallet.\\n     *\\n     * @param who contract or wallet address being drawn down.\\n     * @param amount amount being drawn down.\\n     */\\n    event FundsWithdrawn(address indexed who, uint256 amount);\\n\\n    // ============ PUBLIC INTERFACE ============\\n\\n    /**\\n     * @notice Create a new tagging record.\\n     *\\n     * Requirements:\\n     *\\n     *   - Caller must be relayer contract.\\n     *   - CTAG(s) and TargetId must exist.\\n     *\\n     * @param _tagIds Array of CTAG token Ids.\\n     * @param _targetId targetId of the URI being tagged. See ETSTarget.sol\\n     * @param _recordType Arbitrary identifier for type of tagging record.\\n     * @param _tagger Address calling Relayer contract to create tagging record.\\n     */\\n    function createTaggingRecord(\\n        uint256[] memory _tagIds,\\n        uint256 _targetId,\\n        string calldata _recordType,\\n        address _tagger\\n    ) external payable;\\n\\n    /**\\n     * @notice Get or create CTAG token from tag string.\\n     *\\n     * Combo function that accepts a tag string and returns corresponding CTAG token Id if it exists,\\n     * or if it doesn't exist, creates a new CTAG and then returns corresponding Id.\\n     *\\n     * Only ETS Relayer contracts may call this function.\\n     *\\n     * @param _tag Tag string.\\n     * @param _creator Address credited with creating CTAG.\\n     * @return tokenId Id of CTAG token.\\n     */\\n    function getOrCreateTagId(\\n        string calldata _tag,\\n        address payable _creator\\n    ) external payable returns (uint256 tokenId);\\n\\n    /**\\n     * @notice Create CTAG token from tag string.\\n     *\\n     * Reverts if tag exists or is invalid.\\n     *\\n     * Only ETS Relayer contracts may call this function.\\n     *\\n     * @param _tag Tag string.\\n     * @param _creator Address credited with creating CTAG.\\n     * @return tokenId Id of CTAG token.\\n     */\\n    function createTag(string calldata _tag, address payable _creator) external payable returns (uint256 tokenId);\\n\\n    /**\\n     * @notice Apply one or more tags to a targetURI using tagging record raw client input data.\\n     *\\n     * Like it's sister function applyTagsWithCompositeKey, records new ETS Tagging Record or appends tags to an\\n     * existing record if found to already exist. This function differs in that it creates new ETS target records\\n     * and CTAG tokens for novel targetURIs and hastag strings respectively. This function can only be called by\\n     * Relayer contracts.\\n     *\\n     * @param _rawInput Raw client input data formed as TaggingRecordRawInput struct.\\n     * @param _tagger Address that calls Relayer to tag a targetURI.\\n     */\\n    function applyTagsWithRawInput(TaggingRecordRawInput calldata _rawInput, address payable _tagger) external payable;\\n\\n    /**\\n     * @notice Apply one or more tags to a targetId using using tagging record composite key.\\n     *\\n     * Records new ETS Tagging Record to the blockchain or appends tags if Tagging Record already exists. CTAGs and\\n     * targetId are created if they don't exist. Caller must be Relayer contract.\\n     *\\n     * @param _tagIds Array of CTAG token Ids.\\n     * @param _targetId targetId of the URI being tagged. See ETSTarget.sol\\n     * @param _recordType Arbitrary identifier for type of tagging record.\\n     * @param _tagger Address of that calls Relayer to create tagging record.\\n     */\\n    function applyTagsWithCompositeKey(\\n        uint256[] calldata _tagIds,\\n        uint256 _targetId,\\n        string memory _recordType,\\n        address payable _tagger\\n    ) external payable;\\n\\n    /**\\n     * @notice Replace entire tag set in tagging record using raw data for record lookup.\\n     *\\n     * If supplied tag strings don't have CTAGs, new ones are minted.\\n     *\\n     * @param _rawInput Raw client input data formed as TaggingRecordRawInput struct.\\n     * @param _tagger Address that calls Relayer to tag a targetURI.\\n     */\\n    function replaceTagsWithRawInput(\\n        TaggingRecordRawInput calldata _rawInput,\\n        address payable _tagger\\n    ) external payable;\\n\\n    /**\\n     * @notice Replace entire tag set in tagging record using composite key for record lookup.\\n     *\\n     * This function overwrites the tags in a tagging record with the supplied tags, only\\n     * charging for the new tags in the replacement set.\\n     *\\n     * @param _tagIds Array of CTAG token Ids.\\n     * @param _targetId targetId of the URI being tagged. See ETSTarget.sol\\n     * @param _recordType Arbitrary identifier for type of tagging record.\\n     * @param _tagger Address of that calls Relayer to create tagging record.\\n     */\\n    function replaceTagsWithCompositeKey(\\n        uint256[] calldata _tagIds,\\n        uint256 _targetId,\\n        string memory _recordType,\\n        address payable _tagger\\n    ) external payable;\\n\\n    /**\\n     * @notice Remove one or more tags from a tagging record using raw data for record lookup.\\n     *\\n     * @param _rawInput Raw client input data formed as TaggingRecordRawInput struct.\\n     * @param _tagger Address that calls Relayer to tag a targetURI.\\n     */\\n    function removeTagsWithRawInput(TaggingRecordRawInput calldata _rawInput, address _tagger) external;\\n\\n    /**\\n     * @notice Remove one or more tags from a tagging record using composite key for record lookup.\\n     *\\n     * @param _tagIds Array of CTAG token Ids.\\n     * @param _targetId targetId of the URI being tagged. See ETSTarget.sol\\n     * @param _recordType Arbitrary identifier for type of tagging record.\\n     * @param _tagger Address of that calls Relayer to create tagging record.\\n     */\\n    function removeTagsWithCompositeKey(\\n        uint256[] calldata _tagIds,\\n        uint256 _targetId,\\n        string memory _recordType,\\n        address payable _tagger\\n    ) external;\\n\\n    /**\\n     * @notice Append one or more tags to a tagging record.\\n     *\\n     * @param _taggingRecordId tagging record being updated.\\n     * @param _tagIds Array of CTAG token Ids.\\n     */\\n    function appendTags(uint256 _taggingRecordId, uint256[] calldata _tagIds) external payable;\\n\\n    /**\\n     * @notice Replaces tags in tagging record.\\n     *\\n     * This function overwrites the tags in a tagging record with the supplied tags, only\\n     * charging for the new tags in the replacement set.\\n     *\\n     * @param _taggingRecordId tagging record being updated.\\n     * @param _tagIds Array of CTAG token Ids.\\n     */\\n    function replaceTags(uint256 _taggingRecordId, uint256[] calldata _tagIds) external payable;\\n\\n    /**\\n     * @notice Remove one or more tags from a tagging record.\\n     *\\n     * @param _taggingRecordId tagging record being updated.\\n     * @param _tagIds Array of CTAG token Ids.\\n     */\\n    function removeTags(uint256 _taggingRecordId, uint256[] calldata _tagIds) external;\\n\\n    /**\\n     * @notice Function for withdrawing funds from an accrual account. Can be called by the account owner\\n     * or on behalf of the account. Does nothing when there is nothing due to the account.\\n     *\\n     * @param _account Address of account being drawn down and which will receive the funds.\\n     */\\n    function drawDown(address payable _account) external;\\n\\n    // ============ PUBLIC VIEW FUNCTIONS ============\\n\\n    /**\\n     * @notice Compute a taggingRecordId from raw input.\\n     *\\n     * @param _rawInput Raw client input data formed as TaggingRecordRawInput struct.\\n     * @param _relayer Address of tagging record Relayer contract.\\n     * @param _tagger Address interacting with Relayer to tag content (\\\"Tagger\\\").\\n     *\\n     * @return taggingRecordId Unique identifier for a tagging record.\\n     */\\n    function computeTaggingRecordIdFromRawInput(\\n        TaggingRecordRawInput calldata _rawInput,\\n        address _relayer,\\n        address _tagger\\n    ) external view returns (uint256 taggingRecordId);\\n\\n    /**\\n     * @notice Compute & return a taggingRecordId.\\n     *\\n     * Every TaggingRecord in ETS is mapped to by it's taggingRecordId. This Id is a composite key\\n     * composed of targetId, recordType, relayer contract address and tagger address hashed and cast as a uint256.\\n     *\\n     * @param _targetId Id of target being tagged (see ETSTarget.sol).\\n     * @param _recordType Arbitrary identifier for type of tagging record.\\n     * @param _relayer Address of tagging record Relayer contract.\\n     * @param _tagger Address interacting with Relayer to tag content (\\\"Tagger\\\").\\n     *\\n     * @return taggingRecordId Unique identifier for a tagging record.\\n     */\\n    function computeTaggingRecordIdFromCompositeKey(\\n        uint256 _targetId,\\n        string memory _recordType,\\n        address _relayer,\\n        address _tagger\\n    ) external pure returns (uint256 taggingRecordId);\\n\\n    /**\\n     * @notice Compute tagging fee for raw input and desired action.\\n     *\\n     * @param _rawInput Raw client input data formed as TaggingRecordRawInput struct.\\n     * @param _relayer Address of tagging record Relayer contract.\\n     * @param _tagger Address interacting with Relayer to tag content (\\\"Tagger\\\").\\n     * @param _action Integer representing action to be performed according to enum TaggingAction.\\n     *\\n     * @return fee Calculated tagging fee in ETH/Matic\\n     * @return tagCount Number of new tags being added to tagging record.\\n     */\\n    function computeTaggingFeeFromRawInput(\\n        TaggingRecordRawInput memory _rawInput,\\n        address _relayer,\\n        address _tagger,\\n        TaggingAction _action\\n    ) external view returns (uint256 fee, uint256 tagCount);\\n\\n    /**\\n     * @notice Compute tagging fee for CTAGs, tagging record composite key and desired action.\\n     *\\n     * @param _tagIds Array of CTAG token Ids.\\n     * @param _relayer Address of tagging record Relayer contract.\\n     * @param _tagger Address interacting with Relayer to tag content (\\\"Tagger\\\").\\n     * @param _action Integer representing action to be performed according to enum TaggingAction.\\n     *\\n     * @return fee Calculated tagging fee in ETH/Matic\\n     * @return tagCount Number of new tags being added to tagging record.\\n     */\\n    function computeTaggingFeeFromCompositeKey(\\n        uint256[] memory _tagIds,\\n        uint256 _targetId,\\n        string calldata _recordType,\\n        address _relayer,\\n        address _tagger,\\n        TaggingAction _action\\n    ) external view returns (uint256 fee, uint256 tagCount);\\n\\n    /**\\n     * @notice Compute tagging fee for CTAGs, tagging record id and desired action.\\n     *\\n     * If the global, service wide tagging fee is set (see ETS.taggingFee() & ETS.setTaggingFee()) ETS charges a per tag for all\\n     * new tags applied to a tagging record. This applies to both new tagging records and modified tagging records.\\n     *\\n     * Computing the tagging fee involves checking to see if a tagging record exists and if so, given the desired action\\n     * (append or replace) determining the number of new tags being added and multiplying by the ETS per tag fee.\\n     *\\n     * @param _taggingRecordId Id of tagging record.\\n     * @param _tagIds Array of CTAG token Ids.\\n     * @param _action Integer representing action to be performed according to enum TaggingAction.\\n     *\\n     * @return fee Calculated tagging fee in ETH/Matic\\n     * @return tagCount Number of new tags being added to tagging record.\\n     */\\n    function computeTaggingFee(\\n        uint256 _taggingRecordId,\\n        uint256[] memory _tagIds,\\n        TaggingAction _action\\n    ) external view returns (uint256 fee, uint256 tagCount);\\n\\n    /**\\n     * @notice Retrieve a tagging record from it's raw input.\\n     *\\n     * @param _rawInput Raw client input data formed as TaggingRecordRawInput struct.\\n     * @param _relayer Address of tagging record Relayer contract.\\n     * @param _tagger Address interacting with Relayer to tag content (\\\"Tagger\\\").\\n     *\\n     * @return tagIds CTAG token ids.\\n     * @return targetId TargetId that was tagged.\\n     * @return recordType Type of tagging record.\\n     * @return relayer Address of tagging record Relayer contract.\\n     * @return tagger Address interacting with Relayer to tag content (\\\"Tagger\\\").\\n     */\\n    function getTaggingRecordFromRawInput(\\n        TaggingRecordRawInput memory _rawInput,\\n        address _relayer,\\n        address _tagger\\n    )\\n        external\\n        view\\n        returns (uint256[] memory tagIds, uint256 targetId, string memory recordType, address relayer, address tagger);\\n\\n    /**\\n     * @notice Retrieve a tagging record from composite key parts.\\n     *\\n     * @param _targetId Id of target being tagged.\\n     * @param _recordType Arbitrary identifier for type of tagging record.\\n     * @param _relayer Address of Relayer contract that wrote tagging record.\\n     * @param _tagger Address of wallet that initiated tagging record via relayer.\\n     *\\n     * @return tagIds CTAG token ids.\\n     * @return targetId TargetId that was tagged.\\n     * @return recordType Type of tagging record.\\n     * @return relayer Address of tagging record Relayer contract.\\n     * @return tagger Address interacting with Relayer to tag content (\\\"Tagger\\\").\\n     */\\n    function getTaggingRecordFromCompositeKey(\\n        uint256 _targetId,\\n        string memory _recordType,\\n        address _relayer,\\n        address _tagger\\n    )\\n        external\\n        view\\n        returns (uint256[] memory tagIds, uint256 targetId, string memory recordType, address relayer, address tagger);\\n\\n    /**\\n     * @notice Retrieve a tagging record from Id.\\n     *\\n     * @param _id taggingRecordId.\\n     *\\n     * @return tagIds CTAG token ids.\\n     * @return targetId TargetId that was tagged.\\n     * @return recordType Type of tagging record.\\n     * @return relayer Address of tagging record Relayer contract.\\n     * @return tagger Address interacting with Relayer to tag content (\\\"Tagger\\\").\\n     */\\n    function getTaggingRecordFromId(\\n        uint256 _id\\n    )\\n        external\\n        view\\n        returns (uint256[] memory tagIds, uint256 targetId, string memory recordType, address relayer, address tagger);\\n\\n    /**\\n     * @notice Check that a tagging record exists for given raw input.\\n     *\\n     * @param _rawInput Raw client input data formed as TaggingRecordRawInput struct.\\n     * @param _relayer Address of tagging record Relayer contract.\\n     * @param _tagger Address interacting with Relayer to tag content (\\\"Tagger\\\").\\n     *\\n     * @return boolean; true for exists, false for not.\\n     */\\n    function taggingRecordExistsByRawInput(\\n        TaggingRecordRawInput memory _rawInput,\\n        address _relayer,\\n        address _tagger\\n    ) external view returns (bool);\\n\\n    /**\\n     * @notice Check that a tagging record exists by it's componsite key parts.\\n     *\\n     * @param _targetId Id of target being tagged.\\n     * @param _recordType Arbitrary identifier for type of tagging record.\\n     * @param _relayer Address of Relayer contract that wrote tagging record.\\n     * @param _tagger Address of wallet that initiated tagging record via relayer.\\n     *\\n     * @return boolean; true for exists, false for not.\\n     */\\n    function taggingRecordExistsByCompositeKey(\\n        uint256 _targetId,\\n        string memory _recordType,\\n        address _relayer,\\n        address _tagger\\n    ) external view returns (bool);\\n\\n    /**\\n     * @notice Check that a tagging record exsits by it's Id.\\n     *\\n     * @param _taggingRecordId taggingRecordId.\\n     *\\n     * @return boolean; true for exists, false for not.\\n     */\\n    function taggingRecordExists(uint256 _taggingRecordId) external view returns (bool);\\n\\n    /**\\n     * @notice Function to check how much MATIC has been accrued by an address factoring in amount paid out.\\n     *\\n     * @param _account Address of the account being queried.\\n     * @return _due Amount of WEI in MATIC due to account.\\n     */\\n    function totalDue(address _account) external view returns (uint256 _due);\\n\\n    /**\\n     * @notice Function to retrieve the ETS platform tagging fee.\\n     *\\n     * @return tagging fee.\\n     */\\n    function taggingFee() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xc9f0732f967b71fb8fefd79cfbed28bec9409c6242b7ac86ade3d484e3ee7261\",\"license\":\"MIT\"},\"contracts/interfaces/IETSAccessControls.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n/**\\n * @title IETSAccessControls\\n * @author Ethereum Tag Service <team@ets.xyz>\\n *\\n *  \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\n *  \\u2588\\u2588\\u2554\\u2550\\u2550\\u2550\\u2550\\u255d\\u255a\\u2550\\u2550\\u2588\\u2588\\u2554\\u2550\\u2550\\u255d\\u2588\\u2588\\u2554\\u2550\\u2550\\u2550\\u2550\\u255d\\n *  \\u2588\\u2588\\u2588\\u2588\\u2588\\u2557     \\u2588\\u2588\\u2551   \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\n *  \\u2588\\u2588\\u2554\\u2550\\u2550\\u255d     \\u2588\\u2588\\u2551   \\u255a\\u2550\\u2550\\u2550\\u2550\\u2588\\u2588\\u2551\\n *  \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557   \\u2588\\u2588\\u2551   \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2551`\\n *  \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d   \\u255a\\u2550\\u255d   \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\n *\\n * @notice This is the interface for the ETSAccessControls contract which allows ETS Core Dev\\n * Team to administer roles and control access to various parts of the ETS Platform.\\n * ETSAccessControls contract contains a mix of public and administrator only functions.\\n */\\n\\npragma solidity ^0.8.10;\\n\\nimport { IAccessControlUpgradeable } from \\\"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol\\\";\\n\\ninterface IETSAccessControls is IAccessControlUpgradeable {\\n    /**\\n     * @dev emitted when the ETS Platform address is set.\\n     *\\n     * @param newAddress wallet address platform is being set to.\\n     * @param prevAddress previous platform address.\\n     */\\n    event PlatformSet(address newAddress, address prevAddress);\\n\\n    /**\\n     * @dev emitted when a Relayer contract is added & enabled in ETS.\\n     *\\n     * Relayer contracts are not required implement all ETS Core API functions. Therefore, to ease\\n     * testing of ETS Core API fuinctions, ETS permits addition of ETS owned wallet addresses as Relayers.\\n     *\\n     * @param relayer Relayer contract address.\\n     */\\n    event RelayerAdded(address relayer);\\n\\n    /**\\n     * @dev emitted when a Relayer contract is paused or unpaused.\\n     *\\n     * @param relayer Address that had pause toggled.\\n     */\\n    event RelayerLockToggled(address relayer);\\n\\n    /**\\n     * @notice Sets the Platform wallet address. Can only be called by address with DEFAULT_ADMIN_ROLE.\\n     *\\n     * @param _platform The new Platform address to set.\\n     */\\n    function setPlatform(address payable _platform) external;\\n\\n    /**\\n     * @notice Adds a Relayer contract to ETS. Can only be called by address\\n     * with DEFAULT_ADMIN_ROLE.\\n     *\\n     * @param _relayer Address of the Relayer contract. Must conform to IETSRelayer.\\n     * @param _name Human readable name of the Relayer.\\n     * @param _owner Address of relayer owner.\\n     */\\n    function registerRelayer(address _relayer, string calldata _name, address _owner) external;\\n\\n    /**\\n     * @notice Pause relayer given the relayer owner address. Callable by Platform only.\\n     *\\n     * @param _relayerOwner Address of the Relayer owner.\\n     */\\n    function pauseRelayerByOwnerAddress(address _relayerOwner) external;\\n\\n    /**\\n     * @notice Change the relayer owner as stored in ETSAccessControls. Callable from Relayer only.\\n     * Called via changeOwner() on a relayer.\\n     *\\n     * @param _currentOwner Address of the current relayer owner.\\n     * @param _newOwner Address of the new relayer owner.\\n     */\\n    function changeRelayerOwner(address _currentOwner, address _newOwner) external;\\n\\n    /**\\n     * @notice Pauses/Unpauses a Relayer contract. Can only be called by address\\n     * with DEFAULT_ADMIN_ROLE.\\n     *\\n     * @param _relayer Address of the Relayer contract.\\n     */\\n    function toggleRelayerLock(address _relayer) external;\\n\\n    /**\\n     * @notice Sets the role admin for a given role. An address with role admin can grant or\\n     * revoke that role for other addresses. Can only be called by address with DEFAULT_ADMIN_ROLE.\\n     *\\n     * @param _role bytes32 representation of role being administered.\\n     * @param _adminRole bytes32 representation of administering role.\\n     */\\n    function setRoleAdmin(bytes32 _role, bytes32 _adminRole) external;\\n\\n    /**\\n     * @notice Checks whether given address has SMART_CONTRACT role.\\n     *\\n     * @param _addr Address being checked.\\n     * @return boolean True if address has SMART_CONTRACT role.\\n     */\\n    function isSmartContract(address _addr) external view returns (bool);\\n\\n    /**\\n     * @notice Checks whether given address has DEFAULT_ADMIN_ROLE role.\\n     *\\n     * @param _addr Address being checked.\\n     * @return boolean True if address has DEFAULT_ADMIN_ROLE role.\\n     */\\n    function isAdmin(address _addr) external view returns (bool);\\n\\n    /**\\n     * @notice Checks whether given address has AUCTION_ORACLE_ROLE role.\\n     *\\n     * @param _addr Address being checked.\\n     * @return boolean True if address has AUCTION_ORACLE_ROLE role.\\n     */\\n    function isAuctionOracle(address _addr) external view returns (bool);\\n\\n    /**\\n     * @notice Checks whether given address can act as relayer factory.\\n     *\\n     * @param _addr Address being checked.\\n     * @return boolean True if address can act as relayer factory.\\n     */\\n    function isRelayerFactory(address _addr) external view returns (bool);\\n\\n    /**\\n     * @notice Checks whether given address is a relayer.\\n     *\\n     * @param _addr Address being checked.\\n     * @return boolean True if address can be a relayer.\\n     */\\n    function isRelayer(address _addr) external view returns (bool);\\n\\n    /**\\n     * @notice Checks whether given address is a registered Relayer and not paused.\\n     *\\n     * @param _addr Address being checked.\\n     * @return boolean True if address is a Relayer and not paused.\\n     */\\n    function isRelayerAndNotPaused(address _addr) external view returns (bool);\\n\\n    /**\\n     * @notice Checks relayer is paused by ETS Platform.\\n     *\\n     * @param _addr Address being checked.\\n     * @return boolean True if relayer address is paused by platform.\\n     */\\n    function isRelayerLocked(address _addr) external view returns (bool);\\n\\n    /**\\n     * @notice Checks whether given address owns a relayer.\\n     *\\n     * @param _addr Address being checked.\\n     * @return boolean True if address owns a relayer.\\n     */\\n    function isRelayerByOwner(address _addr) external view returns (bool);\\n\\n    /**\\n     * @notice Checks whether given address has RELAYER_ADMIN role.\\n     *\\n     * @param _addr Address being checked.\\n     * @return boolean True if address has RELAYER_ADMIN role.\\n     */\\n    function isRelayerAdmin(address _addr) external view returns (bool);\\n\\n    /**\\n     * @notice Checks whether given Relayer Name is a registered Relayer.\\n     *\\n     * @param _name Name being checked.\\n     * @return boolean True if _name is a Relayer.\\n     */\\n    function isRelayerByName(string calldata _name) external view returns (bool);\\n\\n    /**\\n     * @notice Checks whether given address is a registered Relayer.\\n     *\\n     * @param _addr Address being checked.\\n     * @return boolean True if address is a registered Relayer.\\n     */\\n    function isRelayerByAddress(address _addr) external view returns (bool);\\n\\n    /**\\n     * @notice Get relayer address from it's name.\\n     *\\n     * @param _name Name of relayer.\\n     * @return Address of relayer.\\n     */\\n    function getRelayerAddressFromName(string calldata _name) external view returns (address);\\n\\n    /**\\n     * @notice Get relayer name from it's address.\\n     *\\n     * @param _address Adsdress of relayer.\\n     * @return Name of relayer.\\n     */\\n    function getRelayerNameFromAddress(address _address) external view returns (string calldata);\\n\\n    /**\\n     * @notice Get relayer address from its owner address.\\n     *\\n     * @param _address address of relayer owner.\\n     * @return Address of relayer.\\n     */\\n    function getRelayerAddressFromOwner(address _address) external view returns (address);\\n\\n    /**\\n     * @notice Returns wallet address for ETS Platform.\\n     *\\n     * @return ETS Platform address.\\n     */\\n    function getPlatformAddress() external view returns (address payable);\\n}\\n\",\"keccak256\":\"0x0948eb19ab50fdd3cb1ac728be863567c9cefd4da0e4ecc2b3b052020c86ed74\",\"license\":\"MIT\"},\"contracts/interfaces/IETSToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n/**\\n * @title IETSToken\\n * @author Ethereum Tag Service <team@ets.xyz>\\n *\\n *  \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\n *  \\u2588\\u2588\\u2554\\u2550\\u2550\\u2550\\u2550\\u255d\\u255a\\u2550\\u2550\\u2588\\u2588\\u2554\\u2550\\u2550\\u255d\\u2588\\u2588\\u2554\\u2550\\u2550\\u2550\\u2550\\u255d\\n *  \\u2588\\u2588\\u2588\\u2588\\u2588\\u2557     \\u2588\\u2588\\u2551   \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\n *  \\u2588\\u2588\\u2554\\u2550\\u2550\\u255d     \\u2588\\u2588\\u2551   \\u255a\\u2550\\u2550\\u2550\\u2550\\u2588\\u2588\\u2551\\n *  \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557   \\u2588\\u2588\\u2551   \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2551`\\n *  \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d   \\u255a\\u2550\\u255d   \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\n *\\n * @notice This is the interface for the ETSToken.sol core contract that governs the creation & management\\n * of Ethereum Tag Service composable tags (CTAGs).\\n *\\n * CTAGs are ERC-721 non-fungible tokens that store a single tag string and origin attribution data including\\n * a \\\"Relayer\\\" address and a \\\"Creator\\\" address. The tag string must conform to a few simple validation rules.\\n *\\n * CTAGs are identified in ETS by their Id (tagId) which is an unsigned integer computed from the lowercased\\n * tag \\\"display\\\" string. Given this, only one CTAG exists for a tag string regardless of its case. For\\n * example, #Punks, #punks and #PUNKS all resolve to the same CTAG.\\n *\\n * CTAG Ids are combined with Target Ids (see ETSTarget.sol) by ETS core (ETS.sol) to form \\\"Tagging Records\\\".\\n *\\n * CTAGs may only be generated by Relayer contracts (see examples/ETSRelayer.sol) via ETS core (ETS.sol)\\n */\\n\\npragma solidity ^0.8.10;\\n\\nimport { IERC721Upgradeable } from \\\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol\\\";\\n\\ninterface IETSToken is IERC721Upgradeable {\\n    /**\\n     * @notice Data structure for CTAG Token.\\n     *\\n     * Only premium and reserved flags are editable.\\n     *\\n     * @param relayer Address of IETSTargetTagger implementation that created CTAG.\\n     * @param creator Address interacting with relayer to initiate CTAG creation.\\n     * @param display Display version of CTAG string.\\n     * @param premium ETS governed boolean flag to identify a CTAG as premium/higher value.\\n     * @param reserved ETS governed boolean flag to restrict a CTAG from release to auction.\\n     */\\n    struct Tag {\\n        address relayer;\\n        address creator;\\n        string display;\\n        bool premium;\\n        bool reserved;\\n    }\\n\\n    // Events\\n\\n    /**\\n     * @dev emitted when the maximum character length of CTAG display string is set.\\n     *\\n     * @param maxStringLength maximum character length of string.\\n     */\\n    event TagMaxStringLengthSet(uint256 maxStringLength);\\n\\n    /**\\n     * @dev emitted when the minimum character length of CTAG display string is set.\\n     *\\n     * @param minStringLength minimum character length of string.\\n     */\\n    event TagMinStringLengthSet(uint256 minStringLength);\\n\\n    /**\\n     * @dev emitted when the ownership term length of a CTAG is set.\\n     *\\n     * @param termLength Ownership term length in days.\\n     */\\n    event OwnershipTermLengthSet(uint256 termLength);\\n\\n    /**\\n     * @dev emitted when the ETS core contract is set.\\n     *\\n     * @param ets ets core contract address.\\n     */\\n    event ETSCoreSet(address ets);\\n\\n    /**\\n     * @dev emitted when the ETS Access Controls is set.\\n     *\\n     * @param etsAccessControls contract address access controls is set to.\\n     */\\n    event AccessControlsSet(address etsAccessControls);\\n\\n    /**\\n     * @dev emitted when a tag string is flagged/unflagged as premium prior to minting.\\n     *\\n     * @param tag tag string being flagged.\\n     * @param isPremium boolean true for premium/false not premium.\\n     */\\n    event PremiumTagPreSet(string tag, bool isPremium);\\n\\n    /**\\n     * @dev emitted when a CTAG is flagged/unflagged as premium subsequent to minting.\\n     *\\n     * @param tagId Id of CTAG token.\\n     * @param isPremium boolean true for premium/false not premium.\\n     */\\n    event PremiumFlagSet(uint256 tagId, bool isPremium);\\n\\n    /**\\n     * @dev emitted when a CTAG is flagged/unflagged as reserved subsequent to minting.\\n     *\\n     * @param tagId Id of CTAG token.\\n     * @param isReserved boolean true for reserved/false for not reserved.\\n     */\\n    event ReservedFlagSet(uint256 tagId, bool isReserved);\\n\\n    /**\\n     * @dev emitted when CTAG token is renewed.\\n     *\\n     * @param tokenId Id of CTAG token.\\n     * @param caller address of renewer.\\n     */\\n    event TagRenewed(uint256 indexed tokenId, address indexed caller);\\n\\n    /**\\n     * @dev emitted when CTAG token is recycled back to ETS.\\n     *\\n     * @param tokenId Id of CTAG token.\\n     * @param caller address of recycler.\\n     */\\n    event TagRecycled(uint256 indexed tokenId, address indexed caller);\\n\\n    // ============ OWNER INTERFACE ============\\n\\n    /**\\n     * @notice admin function to set maximum character length of CTAG display string.\\n     *\\n     * @param _tagMaxStringLength maximum character length of string.\\n     */\\n    function setTagMaxStringLength(uint256 _tagMaxStringLength) external;\\n\\n    /**\\n     * @notice Admin function to set minimum  character length of CTAG display string.\\n     *\\n     * @param _tagMinStringLength minimum character length of string.\\n     */\\n    function setTagMinStringLength(uint256 _tagMinStringLength) external;\\n\\n    /**\\n     * @notice Admin function to set the ownership term length of a CTAG is set.\\n     *\\n     * @param _ownershipTermLength Ownership term length in days.\\n     */\\n    function setOwnershipTermLength(uint256 _ownershipTermLength) external;\\n\\n    /**\\n     * @notice Admin function to flag/unflag tag string(s) as premium prior to minting.\\n     *\\n     * @param _tags Array of tag strings.\\n     * @param _isPremium Boolean true for premium, false for not premium.\\n     */\\n    function preSetPremiumTags(string[] calldata _tags, bool _isPremium) external;\\n\\n    /**\\n     * @notice Admin function to flag/unflag CTAG(s) as premium.\\n     *\\n     * @param _tokenIds Array of CTAG Ids.\\n     * @param _isPremium Boolean true for premium, false for not premium.\\n     */\\n    function setPremiumFlag(uint256[] calldata _tokenIds, bool _isPremium) external;\\n\\n    /**\\n     * @notice Admin function to flag/unflag CTAG(s) as reserved.\\n     *\\n     * Tags flagged as reserved cannot be auctioned.\\n     *\\n     * @param _tokenIds Array of CTAG Ids.\\n     * @param _reserved Boolean true for reserved, false for not reserved.\\n     */\\n    function setReservedFlag(uint256[] calldata _tokenIds, bool _reserved) external;\\n\\n    // ============ PUBLIC INTERFACE ============\\n\\n    /**\\n     * @notice Get CTAG token Id from tag string.\\n     *\\n     * Combo function that accepts a tag string and returns it's CTAG token Id if it exists,\\n     * or creates a new CTAG and returns corresponding Id.\\n     *\\n     * Only ETS Core can call this function.\\n     *\\n     * @param _tag Tag string.\\n     * @param _relayer Address of Relayer contract calling ETS Core.\\n     * @param _creator Address credited with creating CTAG.\\n     * @return tokenId Id of CTAG token.\\n     */\\n    function getOrCreateTagId(\\n        string calldata _tag,\\n        address payable _relayer,\\n        address payable _creator\\n    ) external payable returns (uint256 tokenId);\\n\\n    /**\\n     * @notice Create CTAG token from tag string.\\n     *\\n     * Reverts if tag exists or is invalid.\\n     *\\n     * Only ETS Core can call this function.\\n     *\\n     * @param _tag Tag string.\\n     * @param _creator Address credited with creating CTAG.\\n     * @return tokenId Id of CTAG token.\\n     */\\n    function createTag(\\n        string calldata _tag,\\n        address payable _relayer,\\n        address payable _creator\\n    ) external payable returns (uint256 tokenId);\\n\\n    /**\\n     * @notice Renews ownership term of a CTAG.\\n     *\\n     * A \\\"CTAG ownership term\\\" is utilized to prevent CTAGs from being abandoned or inaccessable\\n     * due to lost private keys.\\n     *\\n     * Any wallet address may renew the term of a CTAG for an owner. When renewed, the term\\n     * is extended from the current block timestamp plus the ownershipTermLength public variable.\\n     *\\n     * @param _tokenId Id of CTAG token.\\n     */\\n    function renewTag(uint256 _tokenId) external;\\n\\n    /**\\n     * @notice Recycles a CTAG back to ETS.\\n     *\\n     * When ownership term of a CTAG has expired, any wallet or contract may call this function\\n     * to recycle the tag back to ETS. Once recycled, a tag may be auctioned again.\\n     *\\n     * @param _tokenId Id of CTAG token.\\n     */\\n    function recycleTag(uint256 _tokenId) external;\\n\\n    // ============ PUBLIC VIEW FUNCTIONS ============\\n\\n    /**\\n     * @notice Function to deterministically compute & return a CTAG token Id.\\n     *\\n     * Every CTAG token and it's associated data struct is mapped to by it's token Id. This Id is computed\\n     * from the \\\"display\\\" tag string lowercased, hashed and cast as an unsigned integer.\\n     *\\n     * Note: Function does not verify if CTAG record exists.\\n     *\\n     * @param _tag Tag string.\\n     * @return Id of potential CTAG token id.\\n     */\\n    function computeTagId(string memory _tag) external pure returns (uint256);\\n\\n    /**\\n     * @notice Check that a CTAG token exists for a given tag string.\\n     *\\n     * @param _tag Tag string.\\n     * @return true if CTAG token exists; false if not.\\n     */\\n    function tagExistsByString(string calldata _tag) external view returns (bool);\\n\\n    /**\\n     * @notice Check that CTAG token exists for a given computed token Id.\\n     *\\n     * @param _tokenId Token Id uint computed from tag string via computeTargetId().\\n     * @return true if CTAG token exists; false if not.\\n     */\\n    function tagExistsById(uint256 _tokenId) external view returns (bool);\\n\\n    /**\\n     * @notice Check if CTAG token ownership term has expired.\\n     *\\n     * @param _tokenId Token Id uint computed from tag string via computeTargetId().\\n     * @return true if CTAG ownership term has expired; false if not.\\n     */\\n    function tagOwnershipTermExpired(uint256 _tokenId) external view returns (bool);\\n\\n    /**\\n     * @notice Retrieve a CTAG record for a given tag string.\\n     *\\n     * Note: returns a struct with empty members when no CTAG exists.\\n     *\\n     * @param _tag Tag string.\\n     * @return CTAG record as Tag struct.\\n     */\\n    function getTagByString(string calldata _tag) external view returns (Tag memory);\\n\\n    /**\\n     * @notice Retrieve a CTAG record for a given token Id.\\n     *\\n     * Note: returns a struct with empty members when no CTAG exists.\\n     *\\n     * @param _tokenId CTAG token Id.\\n     * @return CTAG record as Tag struct.\\n     */\\n    function getTagById(uint256 _tokenId) external view returns (Tag memory);\\n\\n    /**\\n     * @notice Retrieve wallet address for ETS Platform.\\n     *\\n     * @return wallet address for ETS Platform.\\n     */\\n    function getPlatformAddress() external view returns (address payable);\\n\\n    /**\\n     * @notice Retrieve Creator address for a CTAG token.\\n     *\\n     * @param _tokenId CTAG token Id.\\n     * @return _creator Creator address of the CTAG.\\n     */\\n    function getCreatorAddress(uint256 _tokenId) external view returns (address);\\n\\n    /**\\n     * @notice Retrieve last renewal block timestamp for a CTAG.\\n     *\\n     * @param _tokenId CTAG token Id.\\n     * @return Block timestamp.\\n     */\\n    function getLastRenewed(uint256 _tokenId) external view returns (uint256);\\n\\n    /**\\n     * @notice Retrieve CTAG ownership term length global setting.\\n     *\\n     * @return Term length in days.\\n     */\\n    function getOwnershipTermLength() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xe82f096b9cb9d70211a119401a6b1714073d40a388b6d0a20f78e5cd908cccd8\",\"license\":\"MIT\"},\"contracts/utils/StringHelpers.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.10;\\n\\n/// @title StringHelpers Contract\\n/// @author Ethereum Tag Service <security@ets.xyz>\\n/// @notice Helper functions for common string operations.\\nabstract contract StringHelpers {\\n    /// @notice Convert a string to its lowercase equivalent.\\n    /// @param _base String to convert.\\n    /// @return string Lowercase version of string supplied.\\n    function __lower(string memory _base) internal pure returns (string memory) {\\n        bytes memory bStr = bytes(_base);\\n        bytes memory bLower = new bytes(bStr.length);\\n        for (uint256 i = 0; i < bStr.length; i++) {\\n            // Uppercase character.\\n            if ((bStr[i] >= 0x41) && (bStr[i] <= 0x5A)) {\\n                // So we add 32 to make it lowercase.\\n                bLower[i] = bytes1(uint8(bStr[i]) + 32);\\n            } else {\\n                bLower[i] = bStr[i];\\n            }\\n        }\\n        return string(bLower);\\n    }\\n}\\n\",\"keccak256\":\"0x073730321bb0aaae5a2b5bcf1739f8460e12f68b0989abbbe96e922ea44ce1be\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a0604052306080523480156200001557600080fd5b506200002062000026565b620000e7565b600054610100900460ff1615620000935760405162461bcd60e51b815260206004820152602760248201527f496e697469616c697a61626c653a20636f6e747261637420697320696e697469604482015266616c697a696e6760c81b606482015260840160405180910390fd5b60005460ff90811614620000e5576000805460ff191660ff9081179091556040519081527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b565b6080516150f76200011f60003960008181611153015281816111d801528181611732015281816117b701526118a101526150f76000f3fe60806040526004361061034a5760003560e01c806395d89b41116101bb578063c45b5ee1116100f7578063e9bd812611610095578063f6ba042a1161006f578063f6ba042a146109f2578063f7b188a514610a12578063fd52431314610a27578063fed6c2e914610a4757600080fd5b8063e9bd812614610992578063f143fc61146109b2578063f66e7623146109d257600080fd5b8063cd15832f116100d1578063cd15832f146108f2578063db7af5fb14610912578063e8d3e4b614610929578063e985e9c51461094957600080fd5b8063c45b5ee114610868578063c87b56dd146108a4578063cd025dea146108c457600080fd5b8063ad014a5b11610164578063b06a89a71161013e578063b06a89a7146107da578063b7bd44ed14610808578063b88d4fde14610828578063c157daea1461084857600080fd5b8063ad014a5b14610772578063adf63cd2146107a3578063af46adb8146107ba57600080fd5b8063a30b4db911610195578063a30b4db9146106dc578063a3f4df7e14610716578063a675f1e31461075f57600080fd5b806395d89b4114610687578063a1de95e51461069c578063a22cb465146106bc57600080fd5b806342966c681161028a5780635c975abb1161023357806370a082311161020d57806370a08231146106115780638299f9f9146106315780638456cb591461065257806386f571711461066757600080fd5b80635c975abb146105b95780636352211e146105d15780636c1244b6146105f157600080fd5b80634f1ef286116102645780634f1ef2861461057b578063500aac871461058e57806352d1902d146105a457600080fd5b806342966c681461051b5780634b3d267f1461053b5780634ec81af11461055b57600080fd5b806315ccda22116102f75780632e611630116102d15780632e611630146104a15780633659cfe6146104c65780633c0c4566146104e657806342842e0e146104fb57600080fd5b806315ccda221461044057806323b872dd1461046157806327a2e4731461048157600080fd5b806307348e261161032857806307348e26146103c8578063081812fc146103e8578063095ea7b31461042057600080fd5b806301ffc9a71461034f578063060defec1461038457806306fdde03146103a6575b600080fd5b34801561035b57600080fd5b5061036f61036a3660046148ad565b610a5a565b60405190151581526020015b60405180910390f35b34801561039057600080fd5b506103a461039f3660046148ca565b610a6b565b005b3480156103b257600080fd5b506103bb610b64565b60405161037b919061493b565b6103db6103d63660046149ac565b610bf6565b60405161037b9190614a14565b3480156103f457600080fd5b506104086104033660046148ca565b610d7e565b6040516001600160a01b03909116815260200161037b565b34801561042c57600080fd5b506103a461043b366004614a75565b610da5565b34801561044c57600080fd5b506101c354610408906001600160a01b031681565b34801561046d57600080fd5b506103a461047c366004614aa1565b610ed7565b34801561048d57600080fd5b506103a461049c366004614b35565b610f4e565b3480156104ad57600080fd5b506104b86101c65481565b60405190815260200161037b565b3480156104d257600080fd5b506103a46104e1366004614b8c565b611148565b3480156104f257600080fd5b506104086112c4565b34801561050757600080fd5b506103a4610516366004614aa1565b611351565b34801561052757600080fd5b506103a46105363660046148ca565b61136c565b34801561054757600080fd5b506103db6105563660046148ca565b61142c565b34801561056757600080fd5b506103a4610576366004614ba9565b611548565b6103a4610589366004614c90565b611727565b34801561059a57600080fd5b506101c7546104b8565b3480156105b057600080fd5b506104b8611894565b3480156105c557600080fd5b5060975460ff1661036f565b3480156105dd57600080fd5b506104086105ec3660046148ca565b611959565b3480156105fd57600080fd5b506103db61060c366004614ce0565b6119be565b34801561061d57600080fd5b506104b861062c366004614b8c565b611a33565b34801561063d57600080fd5b506101c454610408906001600160a01b031681565b34801561065e57600080fd5b506103a4611acd565b34801561067357600080fd5b506103a46106823660046148ca565b611b96565b34801561069357600080fd5b506103bb611c83565b3480156106a857600080fd5b506103a46106b7366004614b35565b611c92565b3480156106c857600080fd5b506103a46106d7366004614d22565b611e6f565b3480156106e857600080fd5b506104086106f73660046148ca565b60009081526101c860205260409020600101546001600160a01b031690565b34801561072257600080fd5b506103bb6040518060400160405280600a81526020017f4354414720546f6b656e0000000000000000000000000000000000000000000081525081565b6104b861076d3660046149ac565b611e7a565b34801561077e57600080fd5b5061079261078d3660046148ca565b612112565b60405161037b959493929190614d5b565b3480156107af57600080fd5b506104b86101c55481565b3480156107c657600080fd5b506103a46107d5366004614b35565b6121dd565b3480156107e657600080fd5b506104b86107f53660046148ca565b60009081526101c9602052604090205490565b34801561081457600080fd5b5061036f6108233660046148ca565b6123d9565b34801561083457600080fd5b506103a4610843366004614da0565b6123f8565b34801561085457600080fd5b506103a46108633660046148ca565b612470565b34801561087457600080fd5b5061036f610883366004614e0c565b80516020818301810180516101ca8252928201919093012091525460ff1681565b3480156108b057600080fd5b506103bb6108bf3660046148ca565b612512565b3480156108d057600080fd5b506104b86108df3660046148ca565b6101c96020526000908152604090205481565b3480156108fe57600080fd5b506103a461090d366004614b8c565b612585565b34801561091e57600080fd5b506104b86101c75481565b34801561093557600080fd5b506103a46109443660046148ca565b6127a5565b34801561095557600080fd5b5061036f610964366004614e55565b6001600160a01b039182166000908152606a6020908152604080832093909416825291909152205460ff1690565b34801561099e57600080fd5b5061036f6109ad3660046148ca565b612919565b3480156109be57600080fd5b506104b86109cd366004614e0c565b612947565b3480156109de57600080fd5b506103a46109ed3660046148ca565b612962565b3480156109fe57600080fd5b5061036f610a0d366004614ce0565b612a4f565b348015610a1e57600080fd5b506103a4612ab0565b348015610a3357600080fd5b506103a4610a42366004614b8c565b612b77565b6104b8610a553660046149ac565b612cd3565b6000610a6582612d3c565b92915050565b6101c4546001600160a01b03166324d7806c336040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602401602060405180830381865afa158015610ac2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ae69190614e83565b610b275760405162461bcd60e51b815260206004820152600d60248201526c1058d8d95cdcc819195b9a5959609a1b60448201526064015b60405180910390fd5b6101c68190556040518181527f50364cd96b896c27f5b49c44803a02b6c82874dedfe1d1652efa295206b02c2e906020015b60405180910390a150565b606060658054610b7390614ea0565b80601f0160208091040260200160405190810160405280929190818152602001828054610b9f90614ea0565b8015610bec5780601f10610bc157610100808354040283529160200191610bec565b820191906000526020600020905b815481529060010190602001808311610bcf57829003601f168201915b5050505050905090565b6040805160a081018252600080825260208201819052606092820183905291810182905260808101919091526000610c6386868080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061294792505050565b9050610c6e816123d9565b610c8157610c7e86868686611e7a565b90505b60008181526101c86020908152604091829020825160a08101845281546001600160a01b039081168252600183015416928101929092526002810180549293919291840191610ccf90614ea0565b80601f0160208091040260200160405190810160405280929190818152602001828054610cfb90614ea0565b8015610d485780601f10610d1d57610100808354040283529160200191610d48565b820191906000526020600020905b815481529060010190602001808311610d2b57829003601f168201915b50505091835250506003919091015460ff808216151560208401526101009091041615156040909101529150505b949350505050565b6000610d8982612dd7565b506000908152606960205260409020546001600160a01b031690565b6000610db082611959565b9050806001600160a01b0316836001600160a01b03161415610e3a5760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560448201527f72000000000000000000000000000000000000000000000000000000000000006064820152608401610b1e565b336001600160a01b0382161480610e565750610e568133610964565b610ec85760405162461bcd60e51b815260206004820152603d60248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60448201527f6b656e206f776e6572206f7220617070726f76656420666f7220616c6c0000006064820152608401610b1e565b610ed28383612e3b565b505050565b610ee13382612ea9565b610f435760405162461bcd60e51b815260206004820152602d60248201527f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560448201526c1c881bdc88185c1c1c9bdd9959609a1b6064820152608401610b1e565b610ed2838383612f27565b6101c4546001600160a01b03166324d7806c336040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602401602060405180830381865afa158015610fa5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fc99190614e83565b6110055760405162461bcd60e51b815260206004820152600d60248201526c1058d8d95cdcc819195b9a5959609a1b6044820152606401610b1e565b816110405760405162461bcd60e51b815260206004820152600b60248201526a456d70747920617272617960a81b6044820152606401610b1e565b60005b8281101561114257600084848381811061105f5761105f614edb565b9050602002013590506110706112c4565b6001600160a01b031661108282611959565b6001600160a01b0316146110d85760405162461bcd60e51b815260206004820152601560248201527f4e6f74206f776e656420627920706c6174666f726d00000000000000000000006044820152606401610b1e565b60008181526101c86020908152604091829020600301805460ff19168615159081179091558251848152918201527f5ff3e202d7ff106b7be2e41c9e1b36cb0fabfaef5219ca353c5ec44d7da43f17910160405180910390a15061113b81614f07565b9050611043565b50505050565b306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614156111d65760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201526b19195b1959d85d1958d85b1b60a21b6064820152608401610b1e565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166112317f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc546001600160a01b031690565b6001600160a01b03161461129c5760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201526b6163746976652070726f787960a01b6064820152608401610b1e565b6112a581613135565b604080516000808252602082019092526112c1918391906131ec565b50565b6101c454604080517f3c0c456600000000000000000000000000000000000000000000000000000000815290516000926001600160a01b031691633c0c45669160048083019260209291908290030181865afa158015611328573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061134c9190614f22565b905090565b610ed2838383604051806020016040528060008152506123f8565b6101c4546001600160a01b03166324d7806c336040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602401602060405180830381865afa1580156113c3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113e79190614e83565b6114235760405162461bcd60e51b815260206004820152600d60248201526c1058d8d95cdcc819195b9a5959609a1b6044820152606401610b1e565b6112c18161338c565b6040805160a080820183526000808352602080840182905260608486018190528401829052608084018290528582526101c88152908490208451928301855280546001600160a01b0390811684526001820154169183019190915260028101805493949293919284019161149f90614ea0565b80601f01602080910402602001604051908101604052809291908181526020018280546114cb90614ea0565b80156115185780601f106114ed57610100808354040283529160200191611518565b820191906000526020600020905b8154815290600101906020018083116114fb57829003601f168201915b50505091835250506003919091015460ff8082161515602084015261010090910416151560409091015292915050565b600054610100900460ff16158080156115685750600054600160ff909116105b806115825750303b158015611582575060005460ff166001145b6115f45760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a65640000000000000000000000000000000000006064820152608401610b1e565b6000805460ff191660011790558015611617576000805461ff0019166101001790555b61168b6040518060400160405280601481526020017f457468657265756d2054616720536572766963650000000000000000000000008152506040518060400160405280600481526020017f4354414700000000000000000000000000000000000000000000000000000000815250613439565b6116936134ae565b61169b613521565b6116a361358c565b6101c480546001600160a01b0319166001600160a01b0387161790556116c884611b96565b6116d183610a6b565b6116da82612962565b8015611720576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b5050505050565b306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614156117b55760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201526b19195b1959d85d1958d85b1b60a21b6064820152608401610b1e565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166118107f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc546001600160a01b031690565b6001600160a01b03161461187b5760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201526b6163746976652070726f787960a01b6064820152608401610b1e565b61188482613135565b611890828260016131ec565b5050565b6000306001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146119345760405162461bcd60e51b815260206004820152603860248201527f555550535570677261646561626c653a206d757374206e6f742062652063616c60448201527f6c6564207468726f7567682064656c656761746563616c6c00000000000000006064820152608401610b1e565b507f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc90565b6000818152606760205260408120546001600160a01b031680610a655760405162461bcd60e51b815260206004820152601860248201527f4552433732313a20696e76616c696420746f6b656e20494400000000000000006044820152606401610b1e565b6040805160a08101825260008082526020820181905260609282018390529181018290526080810191909152611a2c61055684848080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061294792505050565b9392505050565b60006001600160a01b038216611ab15760405162461bcd60e51b815260206004820152602960248201527f4552433732313a2061646472657373207a65726f206973206e6f74206120766160448201527f6c6964206f776e657200000000000000000000000000000000000000000000006064820152608401610b1e565b506001600160a01b031660009081526068602052604090205490565b6101c4546001600160a01b03166324d7806c336040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602401602060405180830381865afa158015611b24573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b489190614e83565b611b845760405162461bcd60e51b815260206004820152600d60248201526c1058d8d95cdcc819195b9a5959609a1b6044820152606401610b1e565b611b8c6135ff565b611b94613652565b565b6101c4546001600160a01b03166324d7806c336040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602401602060405180830381865afa158015611bed573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c119190614e83565b611c4d5760405162461bcd60e51b815260206004820152600d60248201526c1058d8d95cdcc819195b9a5959609a1b6044820152606401610b1e565b6101c58190556040518181527fb5fcb9a22c611b15d455074b2198dc6adb0c879f34fae2d323816706ba02610c90602001610b59565b606060668054610b7390614ea0565b6101c4546001600160a01b03166324d7806c336040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602401602060405180830381865afa158015611ce9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d0d9190614e83565b611d495760405162461bcd60e51b815260206004820152600d60248201526c1058d8d95cdcc819195b9a5959609a1b6044820152606401610b1e565b81611d845760405162461bcd60e51b815260206004820152600b60248201526a456d70747920617272617960a81b6044820152606401610b1e565b60005b82811015611142576000611df2858584818110611da657611da6614edb565b9050602002810190611db89190614f3f565b8080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506136ac92505050565b9050826101ca82604051611e069190614f86565b908152604051908190036020018120805492151560ff19909316929092179091557f231b4d492e38027a6f24b0287140781038da342b8ce2873f2905aa22329af73c90611e569083908690614fa2565b60405180910390a150611e6881614f07565b9050611d87565b611890338383613853565b6000611e84613922565b6101c3546001600160a01b0316336001600160a01b031614611ee85760405162461bcd60e51b815260206004820152601660248201527f43616c6c6572206973206e6f742045545320636f7265000000000000000000006044820152606401610b1e565b6000611f2986868080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061397e92505050565b9050611f3c611f366112c4565b82613be8565b6040518060a00160405280856001600160a01b03168152602001846001600160a01b0316815260200187878080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250505090825250604080516020601f8a01819004810282018101909252888152918101916101ca91611fe491908b908b90819084018382808284376000920191909152506136ac92505050565b604051611ff19190614f86565b908152602001604051809103902060009054906101000a900460ff16151581526020016101ca61205689898080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506136ac92505050565b6040516120639190614f86565b908152604080519182900360209081019092205460ff16151590925260008481526101c88252829020835181546001600160a01b039182166001600160a01b0319918216178355858401516001840180549190931691161790559183015180516120d392600285019201906147fe565b5060608201516003909101805460809093015115156101000261ff00199215159290921661ffff19909316929092171790559050610d76600161012d55565b6101c8602052600090815260409020805460018201546002830180546001600160a01b0393841694929093169261214890614ea0565b80601f016020809104026020016040519081016040528092919081815260200182805461217490614ea0565b80156121c15780601f10612196576101008083540402835291602001916121c1565b820191906000526020600020905b8154815290600101906020018083116121a457829003601f168201915b5050506003909301549192505060ff8082169161010090041685565b6101c4546001600160a01b03166324d7806c336040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602401602060405180830381865afa158015612234573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122589190614e83565b6122945760405162461bcd60e51b815260206004820152600d60248201526c1058d8d95cdcc819195b9a5959609a1b6044820152606401610b1e565b816122cf5760405162461bcd60e51b815260206004820152600b60248201526a456d70747920617272617960a81b6044820152606401610b1e565b60005b828110156111425760008484838181106122ee576122ee614edb565b9050602002013590506122ff6112c4565b6001600160a01b031661231182611959565b6001600160a01b0316146123675760405162461bcd60e51b815260206004820152601b60248201527f546f6b656e206e6f74206f776e656420627920706c6174666f726d00000000006044820152606401610b1e565b60008181526101c86020908152604091829020600301805461ff001916610100871515908102919091179091558251848152918201527f5bfb00ad0dd6c85a7714be58e38edd1eede7425b1281af24a27ed196555ab05b910160405180910390a1506123d281614f07565b90506122d2565b6000818152606760205260408120546001600160a01b03161515610a65565b6124023383612ea9565b6124645760405162461bcd60e51b815260206004820152602d60248201527f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560448201526c1c881bdc88185c1c1c9bdd9959609a1b6064820152608401610b1e565b61114284848484613c0a565b6000818152606760205260409020546001600160a01b03166124d45760405162461bcd60e51b815260206004820152601360248201527f4554533a2043544147206e6f7420666f756e64000000000000000000000000006044820152606401610b1e565b6124dc6112c4565b6001600160a01b03166124ee82611959565b6001600160a01b03161415612508576112c1816000613c88565b6112c18142613c88565b606061251d82612dd7565b600061253460408051602081019091526000815290565b905060008151116125545760405180602001604052806000815250611a2c565b8061255e84613cc8565b60405160200161256f929190614fc6565b6040516020818303038152906040529392505050565b6101c4546001600160a01b03166324d7806c336040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602401602060405180830381865afa1580156125dc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126009190614e83565b61263c5760405162461bcd60e51b815260206004820152600d60248201526c1058d8d95cdcc819195b9a5959609a1b6044820152606401610b1e565b6001600160a01b0381166126925760405162461bcd60e51b815260206004820152601660248201527f416464726573732063616e6e6f74206265207a65726f000000000000000000006044820152606401610b1e565b6001600160a01b0381166324d7806c336040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602401602060405180830381865afa1580156126e6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061270a9190614e83565b6127565760405162461bcd60e51b815260206004820181905260248201527f43616c6c6572206e6f742061646d696e20696e206e657720636f6e74726163746044820152606401610b1e565b6101c480546001600160a01b0319166001600160a01b0383169081179091556040519081527f2f55f724ae3134584dfdd86a4ee1e090635ff9913722b5fe06e064cc7e3ed8b490602001610b59565b6000818152606760205260409020546001600160a01b03166128095760405162461bcd60e51b815260206004820152601360248201527f4554533a2043544147206e6f7420666f756e64000000000000000000000000006044820152606401610b1e565b6128116112c4565b6001600160a01b031661282382611959565b6001600160a01b0316141561287a5760405162461bcd60e51b815260206004820152601560248201527f546167206f776e656420627920706c6174666f726d00000000000000000000006044820152606401610b1e565b61288381612919565b6128cf5760405162461bcd60e51b815260206004820152601760248201527f72656379636c696e67206e6f7420617661696c61626c650000000000000000006044820152606401610b1e565b6128e96128db82611959565b6128e36112c4565b83612f27565b604051339082907f0f842a1659c86d6e422461459fb2ab6fa8af886fd1cf9978a73dd299f23ccc7a90600090a350565b6000426129266101c75490565b60008481526101c960205260409020546129409190614ff5565b1092915050565b600080612953836136ac565b80516020909101209392505050565b6101c4546001600160a01b03166324d7806c336040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602401602060405180830381865afa1580156129b9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129dd9190614e83565b612a195760405162461bcd60e51b815260206004820152600d60248201526c1058d8d95cdcc819195b9a5959609a1b6044820152606401610b1e565b6101c78190556040518181527f0746578f4b3113723b37a909bdaea17321cc8c4a738f0bbcbf72ea2e6142c4c290602001610b59565b6000611a2c612a9384848080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061294792505050565b6000908152606760205260409020546001600160a01b0316151590565b6101c4546001600160a01b03166324d7806c336040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602401602060405180830381865afa158015612b07573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b2b9190614e83565b612b675760405162461bcd60e51b815260206004820152600d60248201526c1058d8d95cdcc819195b9a5959609a1b6044820152606401610b1e565b612b6f613d6a565b611b94613dbc565b6101c4546001600160a01b03166324d7806c336040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602401602060405180830381865afa158015612bce573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612bf29190614e83565b612c2e5760405162461bcd60e51b815260206004820152600d60248201526c1058d8d95cdcc819195b9a5959609a1b6044820152606401610b1e565b6001600160a01b038116612c845760405162461bcd60e51b815260206004820152601660248201527f416464726573732063616e6e6f74206265207a65726f000000000000000000006044820152606401610b1e565b6101c380546001600160a01b0319166001600160a01b0383169081179091556040519081527f44083188a657481391e0f7de38dc24520f2ee91f7eba083ad27831a62cd1c9a790602001610b59565b600080612d1586868080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061294792505050565b9050612d20816123d9565b612d3357612d3086868686611e7a565b90505b95945050505050565b60006001600160e01b031982167f80ac58cd000000000000000000000000000000000000000000000000000000001480612d9f57506001600160e01b031982167f5b5e139f00000000000000000000000000000000000000000000000000000000145b80610a6557507f01ffc9a7000000000000000000000000000000000000000000000000000000006001600160e01b0319831614610a65565b6000818152606760205260409020546001600160a01b03166112c15760405162461bcd60e51b815260206004820152601860248201527f4552433732313a20696e76616c696420746f6b656e20494400000000000000006044820152606401610b1e565b600081815260696020526040902080546001600160a01b0319166001600160a01b0384169081179091558190612e7082611959565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b600080612eb583611959565b9050806001600160a01b0316846001600160a01b03161480612efc57506001600160a01b038082166000908152606a602090815260408083209388168352929052205460ff165b80610d765750836001600160a01b0316612f1584610d7e565b6001600160a01b031614949350505050565b826001600160a01b0316612f3a82611959565b6001600160a01b031614612f9e5760405162461bcd60e51b815260206004820152602560248201527f4552433732313a207472616e736665722066726f6d20696e636f72726563742060448201526437bbb732b960d91b6064820152608401610b1e565b6001600160a01b0382166130195760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f2061646460448201527f72657373000000000000000000000000000000000000000000000000000000006064820152608401610b1e565b6130268383836001613df5565b826001600160a01b031661303982611959565b6001600160a01b03161461309d5760405162461bcd60e51b815260206004820152602560248201527f4552433732313a207472616e736665722066726f6d20696e636f72726563742060448201526437bbb732b960d91b6064820152608401610b1e565b600081815260696020908152604080832080546001600160a01b03199081169091556001600160a01b0387811680865260688552838620805460001901905590871680865283862080546001019055868652606790945282852080549092168417909155905184937fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4610ed28383836001613e5c565b6101c4546001600160a01b03166324d7806c336040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602401602060405180830381865afa15801561318c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906131b09190614e83565b6112c15760405162461bcd60e51b815260206004820152600d60248201526c1058d8d95cdcc819195b9a5959609a1b6044820152606401610b1e565b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff161561321f57610ed283613f6d565b826001600160a01b03166352d1902d6040518163ffffffff1660e01b8152600401602060405180830381865afa925050508015613279575060408051601f3d908101601f191682019092526132769181019061500d565b60015b6132eb5760405162461bcd60e51b815260206004820152602e60248201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960448201527f6f6e206973206e6f7420555550530000000000000000000000000000000000006064820152608401610b1e565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc81146133805760405162461bcd60e51b815260206004820152602960248201527f45524331393637557067726164653a20756e737570706f727465642070726f7860448201527f6961626c655555494400000000000000000000000000000000000000000000006064820152608401610b1e565b50610ed283838361402b565b600061339782611959565b90506133a7816000846001613df5565b6133b082611959565b600083815260696020908152604080832080546001600160a01b03199081169091556001600160a01b0385168085526068845282852080546000190190558785526067909352818420805490911690555192935084927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908390a4611890816000846001613e5c565b600054610100900460ff166134a45760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608401610b1e565b6118908282614050565b600054610100900460ff166135195760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608401610b1e565b611b946140e2565b600054610100900460ff16611b945760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608401610b1e565b600054610100900460ff166135f75760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608401610b1e565b611b94614159565b60975460ff1615611b945760405162461bcd60e51b815260206004820152601060248201527f5061757361626c653a20706175736564000000000000000000000000000000006044820152606401610b1e565b61365a6135ff565b6097805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a25861368f3390565b6040516001600160a01b03909116815260200160405180910390a1565b606060008290506000815167ffffffffffffffff8111156136cf576136cf614be4565b6040519080825280601f01601f1916602001820160405280156136f9576020820181803683370190505b50905060005b825181101561384b57604160f81b83828151811061371f5761371f614edb565b01602001516001600160f81b031916108015906137605750605a60f81b83828151811061374e5761374e614edb565b01602001516001600160f81b03191611155b156137da5782818151811061377757613777614edb565b602001015160f81c60f81b60f81c60206137919190615026565b60f81b8282815181106137a6576137a6614edb565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350613839565b8281815181106137ec576137ec614edb565b602001015160f81c60f81b82828151811061380957613809614edb565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053505b8061384381614f07565b9150506136ff565b509392505050565b816001600160a01b0316836001600160a01b031614156138b55760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c6572000000000000006044820152606401610b1e565b6001600160a01b038381166000818152606a6020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b600261012d5414156139765760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610b1e565b600261012d55565b60008061398a83612947565b6000818152606760205260409020549091506001600160a01b0316156139f25760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e746564000000006044820152606401610b1e565b6101c5548351849111801590613a0c57506101c654815111155b613a585760405162461bcd60e51b815260206004820152601260248201527f496e76616c69642074616720666f726d617400000000000000000000000000006044820152606401610b1e565b80600081518110613a6b57613a6b614edb565b6020910101516001600160f81b031916602360f81b14613acd5760405162461bcd60e51b815260206004820152601560248201527f546167206d7573742073746172742077697468202300000000000000000000006044820152606401610b1e565b60015b8151811015613bdf576000828281518110613aed57613aed614edb565b01602001516001600160f81b03191690507f2000000000000000000000000000000000000000000000000000000000000000811415613b6e5760405162461bcd60e51b815260206004820152600d60248201527f53706163657320696e20746167000000000000000000000000000000000000006044820152606401610b1e565b602360f81b6001600160f81b031982161415613bcc5760405162461bcd60e51b815260206004820152601360248201527f54616720636f6e7461696e7320707265666978000000000000000000000000006044820152606401610b1e565b5080613bd781614f07565b915050613ad0565b50909392505050565b6118908282604051806020016040528060008152506141c4565b600161012d55565b613c15848484612f27565b613c2184848484614242565b6111425760405162461bcd60e51b815260206004820152603260248201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560448201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b6064820152608401610b1e565b60008281526101c9602052604080822083905551339184917faa0c0591942aff60e66bde156168c9a47ef843534b433bbaa33e62d1410f4f2c9190a35050565b60606000613cd583614388565b600101905060008167ffffffffffffffff811115613cf557613cf5614be4565b6040519080825280601f01601f191660200182016040528015613d1f576020820181803683370190505b5090508181016020015b600019017f3031323334353637383961626364656600000000000000000000000000000000600a86061a8153600a8504945084613d655761384b565b613d29565b60975460ff16611b945760405162461bcd60e51b815260206004820152601460248201527f5061757361626c653a206e6f74207061757365640000000000000000000000006044820152606401610b1e565b613dc4613d6a565b6097805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa3361368f565b613dfd6135ff565b613e098484848461446a565b60975460ff16156111425760405162461bcd60e51b815260206004820152600f60248201527f436f6e74726163742070617573656400000000000000000000000000000000006044820152606401610b1e565b6001600160a01b03831615613ea657613e736112c4565b6001600160a01b0316836001600160a01b03161415613e9c57613e97826000613c88565b613ea6565b613ea68242613c88565b6001600160a01b03841615801590613ed75750613ec16112c4565b6001600160a01b0316846001600160a01b031614155b8015613ee95750613ee784611a33565b155b15611142576101c4546040517fa10138e80000000000000000000000000000000000000000000000000000000081526001600160a01b0386811660048301529091169063a10138e890602401600060405180830381600087803b158015613f4f57600080fd5b505af1158015613f63573d6000803e3d6000fd5b5050505050505050565b6001600160a01b0381163b613fea5760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201527f6f74206120636f6e7472616374000000000000000000000000000000000000006064820152608401610b1e565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc80546001600160a01b0319166001600160a01b0392909216919091179055565b614034836144e3565b6000825111806140415750805b15610ed2576111428383614523565b600054610100900460ff166140bb5760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608401610b1e565b81516140ce9060659060208501906147fe565b508051610ed29060669060208401906147fe565b600054610100900460ff1661414d5760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608401610b1e565b6097805460ff19169055565b600054610100900460ff16613c025760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608401610b1e565b6141ce8383614548565b6141db6000848484614242565b610ed25760405162461bcd60e51b815260206004820152603260248201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560448201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b6064820152608401610b1e565b60006001600160a01b0384163b1561438057604051630a85bd0160e11b81526001600160a01b0385169063150b7a029061428690339089908890889060040161504b565b6020604051808303816000875af19250505080156142c1575060408051601f3d908101601f191682019092526142be9181019061507d565b60015b614366573d8080156142ef576040519150601f19603f3d011682016040523d82523d6000602084013e6142f4565b606091505b50805161435e5760405162461bcd60e51b815260206004820152603260248201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560448201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b6064820152608401610b1e565b805181602001fd5b6001600160e01b031916630a85bd0160e11b149050610d76565b506001610d76565b6000807a184f03e93ff9f4daa797ed6e38ed64bf6a1f01000000000000000083106143d1577a184f03e93ff9f4daa797ed6e38ed64bf6a1f010000000000000000830492506040015b6d04ee2d6d415b85acef810000000083106143fd576d04ee2d6d415b85acef8100000000830492506020015b662386f26fc10000831061441b57662386f26fc10000830492506010015b6305f5e1008310614433576305f5e100830492506008015b612710831061444757612710830492506004015b60648310614459576064830492506002015b600a8310610a655760010192915050565b60975460ff16156111425760405162461bcd60e51b815260206004820152602b60248201527f4552433732315061757361626c653a20746f6b656e207472616e73666572207760448201527f68696c65207061757365640000000000000000000000000000000000000000006064820152608401610b1e565b6144ec81613f6d565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b6060611a2c838360405180606001604052806027815260200161509b602791396146eb565b6001600160a01b03821661459e5760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f20616464726573736044820152606401610b1e565b6000818152606760205260409020546001600160a01b0316156146035760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e746564000000006044820152606401610b1e565b614611600083836001613df5565b6000818152606760205260409020546001600160a01b0316156146765760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e746564000000006044820152606401610b1e565b6001600160a01b038216600081815260686020908152604080832080546001019055848352606790915280822080546001600160a01b0319168417905551839291907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a4611890600083836001613e5c565b6060600080856001600160a01b0316856040516147089190614f86565b600060405180830381855af49150503d8060008114614743576040519150601f19603f3d011682016040523d82523d6000602084013e614748565b606091505b509150915061475986838387614763565b9695505050505050565b606083156147cf5782516147c8576001600160a01b0385163b6147c85760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610b1e565b5081610d76565b610d7683838151156147e45781518083602001fd5b8060405162461bcd60e51b8152600401610b1e919061493b565b82805461480a90614ea0565b90600052602060002090601f01602090048101928261482c5760008555614872565b82601f1061484557805160ff1916838001178555614872565b82800160010185558215614872579182015b82811115614872578251825591602001919060010190614857565b5061487e929150614882565b5090565b5b8082111561487e5760008155600101614883565b6001600160e01b0319811681146112c157600080fd5b6000602082840312156148bf57600080fd5b8135611a2c81614897565b6000602082840312156148dc57600080fd5b5035919050565b60005b838110156148fe5781810151838201526020016148e6565b838111156111425750506000910152565b600081518084526149278160208601602086016148e3565b601f01601f19169290920160200192915050565b602081526000611a2c602083018461490f565b60008083601f84011261496057600080fd5b50813567ffffffffffffffff81111561497857600080fd5b60208301915083602082850101111561499057600080fd5b9250929050565b6001600160a01b03811681146112c157600080fd5b600080600080606085870312156149c257600080fd5b843567ffffffffffffffff8111156149d957600080fd5b6149e58782880161494e565b90955093505060208501356149f981614997565b91506040850135614a0981614997565b939692955090935050565b6020815260006001600160a01b0380845116602084015280602085015116604084015250604083015160a06060840152614a5160c084018261490f565b90506060840151151560808401526080840151151560a08401528091505092915050565b60008060408385031215614a8857600080fd5b8235614a9381614997565b946020939093013593505050565b600080600060608486031215614ab657600080fd5b8335614ac181614997565b92506020840135614ad181614997565b929592945050506040919091013590565b60008083601f840112614af457600080fd5b50813567ffffffffffffffff811115614b0c57600080fd5b6020830191508360208260051b850101111561499057600080fd5b80151581146112c157600080fd5b600080600060408486031215614b4a57600080fd5b833567ffffffffffffffff811115614b6157600080fd5b614b6d86828701614ae2565b9094509250506020840135614b8181614b27565b809150509250925092565b600060208284031215614b9e57600080fd5b8135611a2c81614997565b60008060008060808587031215614bbf57600080fd5b8435614bca81614997565b966020860135965060408601359560600135945092505050565b634e487b7160e01b600052604160045260246000fd5b600067ffffffffffffffff80841115614c1557614c15614be4565b604051601f8501601f19908116603f01168101908282118183101715614c3d57614c3d614be4565b81604052809350858152868686011115614c5657600080fd5b858560208301376000602087830101525050509392505050565b600082601f830112614c8157600080fd5b611a2c83833560208501614bfa565b60008060408385031215614ca357600080fd5b8235614cae81614997565b9150602083013567ffffffffffffffff811115614cca57600080fd5b614cd685828601614c70565b9150509250929050565b60008060208385031215614cf357600080fd5b823567ffffffffffffffff811115614d0a57600080fd5b614d168582860161494e565b90969095509350505050565b60008060408385031215614d3557600080fd5b8235614d4081614997565b91506020830135614d5081614b27565b809150509250929050565b60006001600160a01b03808816835280871660208401525060a06040830152614d8760a083018661490f565b9315156060830152509015156080909101529392505050565b60008060008060808587031215614db657600080fd5b8435614dc181614997565b93506020850135614dd181614997565b925060408501359150606085013567ffffffffffffffff811115614df457600080fd5b614e0087828801614c70565b91505092959194509250565b600060208284031215614e1e57600080fd5b813567ffffffffffffffff811115614e3557600080fd5b8201601f81018413614e4657600080fd5b610d7684823560208401614bfa565b60008060408385031215614e6857600080fd5b8235614e7381614997565b91506020830135614d5081614997565b600060208284031215614e9557600080fd5b8151611a2c81614b27565b600181811c90821680614eb457607f821691505b60208210811415614ed557634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b6000600019821415614f1b57614f1b614ef1565b5060010190565b600060208284031215614f3457600080fd5b8151611a2c81614997565b6000808335601e19843603018112614f5657600080fd5b83018035915067ffffffffffffffff821115614f7157600080fd5b60200191503681900382131561499057600080fd5b60008251614f988184602087016148e3565b9190910192915050565b604081526000614fb5604083018561490f565b905082151560208301529392505050565b60008351614fd88184602088016148e3565b835190830190614fec8183602088016148e3565b01949350505050565b6000821982111561500857615008614ef1565b500190565b60006020828403121561501f57600080fd5b5051919050565b600060ff821660ff84168060ff0382111561504357615043614ef1565b019392505050565b60006001600160a01b03808716835280861660208401525083604083015260806060830152614759608083018461490f565b60006020828403121561508f57600080fd5b8151611a2c8161489756fe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a26469706673582212200eed52c823077b72d7d1e5aad8a48f42025a62673c3e38d3afbf9948fa725f5e64736f6c634300080c0033",
  "deployedBytecode": "0x60806040526004361061034a5760003560e01c806395d89b41116101bb578063c45b5ee1116100f7578063e9bd812611610095578063f6ba042a1161006f578063f6ba042a146109f2578063f7b188a514610a12578063fd52431314610a27578063fed6c2e914610a4757600080fd5b8063e9bd812614610992578063f143fc61146109b2578063f66e7623146109d257600080fd5b8063cd15832f116100d1578063cd15832f146108f2578063db7af5fb14610912578063e8d3e4b614610929578063e985e9c51461094957600080fd5b8063c45b5ee114610868578063c87b56dd146108a4578063cd025dea146108c457600080fd5b8063ad014a5b11610164578063b06a89a71161013e578063b06a89a7146107da578063b7bd44ed14610808578063b88d4fde14610828578063c157daea1461084857600080fd5b8063ad014a5b14610772578063adf63cd2146107a3578063af46adb8146107ba57600080fd5b8063a30b4db911610195578063a30b4db9146106dc578063a3f4df7e14610716578063a675f1e31461075f57600080fd5b806395d89b4114610687578063a1de95e51461069c578063a22cb465146106bc57600080fd5b806342966c681161028a5780635c975abb1161023357806370a082311161020d57806370a08231146106115780638299f9f9146106315780638456cb591461065257806386f571711461066757600080fd5b80635c975abb146105b95780636352211e146105d15780636c1244b6146105f157600080fd5b80634f1ef286116102645780634f1ef2861461057b578063500aac871461058e57806352d1902d146105a457600080fd5b806342966c681461051b5780634b3d267f1461053b5780634ec81af11461055b57600080fd5b806315ccda22116102f75780632e611630116102d15780632e611630146104a15780633659cfe6146104c65780633c0c4566146104e657806342842e0e146104fb57600080fd5b806315ccda221461044057806323b872dd1461046157806327a2e4731461048157600080fd5b806307348e261161032857806307348e26146103c8578063081812fc146103e8578063095ea7b31461042057600080fd5b806301ffc9a71461034f578063060defec1461038457806306fdde03146103a6575b600080fd5b34801561035b57600080fd5b5061036f61036a3660046148ad565b610a5a565b60405190151581526020015b60405180910390f35b34801561039057600080fd5b506103a461039f3660046148ca565b610a6b565b005b3480156103b257600080fd5b506103bb610b64565b60405161037b919061493b565b6103db6103d63660046149ac565b610bf6565b60405161037b9190614a14565b3480156103f457600080fd5b506104086104033660046148ca565b610d7e565b6040516001600160a01b03909116815260200161037b565b34801561042c57600080fd5b506103a461043b366004614a75565b610da5565b34801561044c57600080fd5b506101c354610408906001600160a01b031681565b34801561046d57600080fd5b506103a461047c366004614aa1565b610ed7565b34801561048d57600080fd5b506103a461049c366004614b35565b610f4e565b3480156104ad57600080fd5b506104b86101c65481565b60405190815260200161037b565b3480156104d257600080fd5b506103a46104e1366004614b8c565b611148565b3480156104f257600080fd5b506104086112c4565b34801561050757600080fd5b506103a4610516366004614aa1565b611351565b34801561052757600080fd5b506103a46105363660046148ca565b61136c565b34801561054757600080fd5b506103db6105563660046148ca565b61142c565b34801561056757600080fd5b506103a4610576366004614ba9565b611548565b6103a4610589366004614c90565b611727565b34801561059a57600080fd5b506101c7546104b8565b3480156105b057600080fd5b506104b8611894565b3480156105c557600080fd5b5060975460ff1661036f565b3480156105dd57600080fd5b506104086105ec3660046148ca565b611959565b3480156105fd57600080fd5b506103db61060c366004614ce0565b6119be565b34801561061d57600080fd5b506104b861062c366004614b8c565b611a33565b34801561063d57600080fd5b506101c454610408906001600160a01b031681565b34801561065e57600080fd5b506103a4611acd565b34801561067357600080fd5b506103a46106823660046148ca565b611b96565b34801561069357600080fd5b506103bb611c83565b3480156106a857600080fd5b506103a46106b7366004614b35565b611c92565b3480156106c857600080fd5b506103a46106d7366004614d22565b611e6f565b3480156106e857600080fd5b506104086106f73660046148ca565b60009081526101c860205260409020600101546001600160a01b031690565b34801561072257600080fd5b506103bb6040518060400160405280600a81526020017f4354414720546f6b656e0000000000000000000000000000000000000000000081525081565b6104b861076d3660046149ac565b611e7a565b34801561077e57600080fd5b5061079261078d3660046148ca565b612112565b60405161037b959493929190614d5b565b3480156107af57600080fd5b506104b86101c55481565b3480156107c657600080fd5b506103a46107d5366004614b35565b6121dd565b3480156107e657600080fd5b506104b86107f53660046148ca565b60009081526101c9602052604090205490565b34801561081457600080fd5b5061036f6108233660046148ca565b6123d9565b34801561083457600080fd5b506103a4610843366004614da0565b6123f8565b34801561085457600080fd5b506103a46108633660046148ca565b612470565b34801561087457600080fd5b5061036f610883366004614e0c565b80516020818301810180516101ca8252928201919093012091525460ff1681565b3480156108b057600080fd5b506103bb6108bf3660046148ca565b612512565b3480156108d057600080fd5b506104b86108df3660046148ca565b6101c96020526000908152604090205481565b3480156108fe57600080fd5b506103a461090d366004614b8c565b612585565b34801561091e57600080fd5b506104b86101c75481565b34801561093557600080fd5b506103a46109443660046148ca565b6127a5565b34801561095557600080fd5b5061036f610964366004614e55565b6001600160a01b039182166000908152606a6020908152604080832093909416825291909152205460ff1690565b34801561099e57600080fd5b5061036f6109ad3660046148ca565b612919565b3480156109be57600080fd5b506104b86109cd366004614e0c565b612947565b3480156109de57600080fd5b506103a46109ed3660046148ca565b612962565b3480156109fe57600080fd5b5061036f610a0d366004614ce0565b612a4f565b348015610a1e57600080fd5b506103a4612ab0565b348015610a3357600080fd5b506103a4610a42366004614b8c565b612b77565b6104b8610a553660046149ac565b612cd3565b6000610a6582612d3c565b92915050565b6101c4546001600160a01b03166324d7806c336040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602401602060405180830381865afa158015610ac2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ae69190614e83565b610b275760405162461bcd60e51b815260206004820152600d60248201526c1058d8d95cdcc819195b9a5959609a1b60448201526064015b60405180910390fd5b6101c68190556040518181527f50364cd96b896c27f5b49c44803a02b6c82874dedfe1d1652efa295206b02c2e906020015b60405180910390a150565b606060658054610b7390614ea0565b80601f0160208091040260200160405190810160405280929190818152602001828054610b9f90614ea0565b8015610bec5780601f10610bc157610100808354040283529160200191610bec565b820191906000526020600020905b815481529060010190602001808311610bcf57829003601f168201915b5050505050905090565b6040805160a081018252600080825260208201819052606092820183905291810182905260808101919091526000610c6386868080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061294792505050565b9050610c6e816123d9565b610c8157610c7e86868686611e7a565b90505b60008181526101c86020908152604091829020825160a08101845281546001600160a01b039081168252600183015416928101929092526002810180549293919291840191610ccf90614ea0565b80601f0160208091040260200160405190810160405280929190818152602001828054610cfb90614ea0565b8015610d485780601f10610d1d57610100808354040283529160200191610d48565b820191906000526020600020905b815481529060010190602001808311610d2b57829003601f168201915b50505091835250506003919091015460ff808216151560208401526101009091041615156040909101529150505b949350505050565b6000610d8982612dd7565b506000908152606960205260409020546001600160a01b031690565b6000610db082611959565b9050806001600160a01b0316836001600160a01b03161415610e3a5760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560448201527f72000000000000000000000000000000000000000000000000000000000000006064820152608401610b1e565b336001600160a01b0382161480610e565750610e568133610964565b610ec85760405162461bcd60e51b815260206004820152603d60248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60448201527f6b656e206f776e6572206f7220617070726f76656420666f7220616c6c0000006064820152608401610b1e565b610ed28383612e3b565b505050565b610ee13382612ea9565b610f435760405162461bcd60e51b815260206004820152602d60248201527f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560448201526c1c881bdc88185c1c1c9bdd9959609a1b6064820152608401610b1e565b610ed2838383612f27565b6101c4546001600160a01b03166324d7806c336040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602401602060405180830381865afa158015610fa5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fc99190614e83565b6110055760405162461bcd60e51b815260206004820152600d60248201526c1058d8d95cdcc819195b9a5959609a1b6044820152606401610b1e565b816110405760405162461bcd60e51b815260206004820152600b60248201526a456d70747920617272617960a81b6044820152606401610b1e565b60005b8281101561114257600084848381811061105f5761105f614edb565b9050602002013590506110706112c4565b6001600160a01b031661108282611959565b6001600160a01b0316146110d85760405162461bcd60e51b815260206004820152601560248201527f4e6f74206f776e656420627920706c6174666f726d00000000000000000000006044820152606401610b1e565b60008181526101c86020908152604091829020600301805460ff19168615159081179091558251848152918201527f5ff3e202d7ff106b7be2e41c9e1b36cb0fabfaef5219ca353c5ec44d7da43f17910160405180910390a15061113b81614f07565b9050611043565b50505050565b306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614156111d65760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201526b19195b1959d85d1958d85b1b60a21b6064820152608401610b1e565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166112317f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc546001600160a01b031690565b6001600160a01b03161461129c5760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201526b6163746976652070726f787960a01b6064820152608401610b1e565b6112a581613135565b604080516000808252602082019092526112c1918391906131ec565b50565b6101c454604080517f3c0c456600000000000000000000000000000000000000000000000000000000815290516000926001600160a01b031691633c0c45669160048083019260209291908290030181865afa158015611328573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061134c9190614f22565b905090565b610ed2838383604051806020016040528060008152506123f8565b6101c4546001600160a01b03166324d7806c336040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602401602060405180830381865afa1580156113c3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113e79190614e83565b6114235760405162461bcd60e51b815260206004820152600d60248201526c1058d8d95cdcc819195b9a5959609a1b6044820152606401610b1e565b6112c18161338c565b6040805160a080820183526000808352602080840182905260608486018190528401829052608084018290528582526101c88152908490208451928301855280546001600160a01b0390811684526001820154169183019190915260028101805493949293919284019161149f90614ea0565b80601f01602080910402602001604051908101604052809291908181526020018280546114cb90614ea0565b80156115185780601f106114ed57610100808354040283529160200191611518565b820191906000526020600020905b8154815290600101906020018083116114fb57829003601f168201915b50505091835250506003919091015460ff8082161515602084015261010090910416151560409091015292915050565b600054610100900460ff16158080156115685750600054600160ff909116105b806115825750303b158015611582575060005460ff166001145b6115f45760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a65640000000000000000000000000000000000006064820152608401610b1e565b6000805460ff191660011790558015611617576000805461ff0019166101001790555b61168b6040518060400160405280601481526020017f457468657265756d2054616720536572766963650000000000000000000000008152506040518060400160405280600481526020017f4354414700000000000000000000000000000000000000000000000000000000815250613439565b6116936134ae565b61169b613521565b6116a361358c565b6101c480546001600160a01b0319166001600160a01b0387161790556116c884611b96565b6116d183610a6b565b6116da82612962565b8015611720576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b5050505050565b306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614156117b55760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201526b19195b1959d85d1958d85b1b60a21b6064820152608401610b1e565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166118107f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc546001600160a01b031690565b6001600160a01b03161461187b5760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201526b6163746976652070726f787960a01b6064820152608401610b1e565b61188482613135565b611890828260016131ec565b5050565b6000306001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146119345760405162461bcd60e51b815260206004820152603860248201527f555550535570677261646561626c653a206d757374206e6f742062652063616c60448201527f6c6564207468726f7567682064656c656761746563616c6c00000000000000006064820152608401610b1e565b507f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc90565b6000818152606760205260408120546001600160a01b031680610a655760405162461bcd60e51b815260206004820152601860248201527f4552433732313a20696e76616c696420746f6b656e20494400000000000000006044820152606401610b1e565b6040805160a08101825260008082526020820181905260609282018390529181018290526080810191909152611a2c61055684848080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061294792505050565b9392505050565b60006001600160a01b038216611ab15760405162461bcd60e51b815260206004820152602960248201527f4552433732313a2061646472657373207a65726f206973206e6f74206120766160448201527f6c6964206f776e657200000000000000000000000000000000000000000000006064820152608401610b1e565b506001600160a01b031660009081526068602052604090205490565b6101c4546001600160a01b03166324d7806c336040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602401602060405180830381865afa158015611b24573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b489190614e83565b611b845760405162461bcd60e51b815260206004820152600d60248201526c1058d8d95cdcc819195b9a5959609a1b6044820152606401610b1e565b611b8c6135ff565b611b94613652565b565b6101c4546001600160a01b03166324d7806c336040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602401602060405180830381865afa158015611bed573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c119190614e83565b611c4d5760405162461bcd60e51b815260206004820152600d60248201526c1058d8d95cdcc819195b9a5959609a1b6044820152606401610b1e565b6101c58190556040518181527fb5fcb9a22c611b15d455074b2198dc6adb0c879f34fae2d323816706ba02610c90602001610b59565b606060668054610b7390614ea0565b6101c4546001600160a01b03166324d7806c336040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602401602060405180830381865afa158015611ce9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d0d9190614e83565b611d495760405162461bcd60e51b815260206004820152600d60248201526c1058d8d95cdcc819195b9a5959609a1b6044820152606401610b1e565b81611d845760405162461bcd60e51b815260206004820152600b60248201526a456d70747920617272617960a81b6044820152606401610b1e565b60005b82811015611142576000611df2858584818110611da657611da6614edb565b9050602002810190611db89190614f3f565b8080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506136ac92505050565b9050826101ca82604051611e069190614f86565b908152604051908190036020018120805492151560ff19909316929092179091557f231b4d492e38027a6f24b0287140781038da342b8ce2873f2905aa22329af73c90611e569083908690614fa2565b60405180910390a150611e6881614f07565b9050611d87565b611890338383613853565b6000611e84613922565b6101c3546001600160a01b0316336001600160a01b031614611ee85760405162461bcd60e51b815260206004820152601660248201527f43616c6c6572206973206e6f742045545320636f7265000000000000000000006044820152606401610b1e565b6000611f2986868080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061397e92505050565b9050611f3c611f366112c4565b82613be8565b6040518060a00160405280856001600160a01b03168152602001846001600160a01b0316815260200187878080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250505090825250604080516020601f8a01819004810282018101909252888152918101916101ca91611fe491908b908b90819084018382808284376000920191909152506136ac92505050565b604051611ff19190614f86565b908152602001604051809103902060009054906101000a900460ff16151581526020016101ca61205689898080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506136ac92505050565b6040516120639190614f86565b908152604080519182900360209081019092205460ff16151590925260008481526101c88252829020835181546001600160a01b039182166001600160a01b0319918216178355858401516001840180549190931691161790559183015180516120d392600285019201906147fe565b5060608201516003909101805460809093015115156101000261ff00199215159290921661ffff19909316929092171790559050610d76600161012d55565b6101c8602052600090815260409020805460018201546002830180546001600160a01b0393841694929093169261214890614ea0565b80601f016020809104026020016040519081016040528092919081815260200182805461217490614ea0565b80156121c15780601f10612196576101008083540402835291602001916121c1565b820191906000526020600020905b8154815290600101906020018083116121a457829003601f168201915b5050506003909301549192505060ff8082169161010090041685565b6101c4546001600160a01b03166324d7806c336040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602401602060405180830381865afa158015612234573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122589190614e83565b6122945760405162461bcd60e51b815260206004820152600d60248201526c1058d8d95cdcc819195b9a5959609a1b6044820152606401610b1e565b816122cf5760405162461bcd60e51b815260206004820152600b60248201526a456d70747920617272617960a81b6044820152606401610b1e565b60005b828110156111425760008484838181106122ee576122ee614edb565b9050602002013590506122ff6112c4565b6001600160a01b031661231182611959565b6001600160a01b0316146123675760405162461bcd60e51b815260206004820152601b60248201527f546f6b656e206e6f74206f776e656420627920706c6174666f726d00000000006044820152606401610b1e565b60008181526101c86020908152604091829020600301805461ff001916610100871515908102919091179091558251848152918201527f5bfb00ad0dd6c85a7714be58e38edd1eede7425b1281af24a27ed196555ab05b910160405180910390a1506123d281614f07565b90506122d2565b6000818152606760205260408120546001600160a01b03161515610a65565b6124023383612ea9565b6124645760405162461bcd60e51b815260206004820152602d60248201527f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560448201526c1c881bdc88185c1c1c9bdd9959609a1b6064820152608401610b1e565b61114284848484613c0a565b6000818152606760205260409020546001600160a01b03166124d45760405162461bcd60e51b815260206004820152601360248201527f4554533a2043544147206e6f7420666f756e64000000000000000000000000006044820152606401610b1e565b6124dc6112c4565b6001600160a01b03166124ee82611959565b6001600160a01b03161415612508576112c1816000613c88565b6112c18142613c88565b606061251d82612dd7565b600061253460408051602081019091526000815290565b905060008151116125545760405180602001604052806000815250611a2c565b8061255e84613cc8565b60405160200161256f929190614fc6565b6040516020818303038152906040529392505050565b6101c4546001600160a01b03166324d7806c336040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602401602060405180830381865afa1580156125dc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126009190614e83565b61263c5760405162461bcd60e51b815260206004820152600d60248201526c1058d8d95cdcc819195b9a5959609a1b6044820152606401610b1e565b6001600160a01b0381166126925760405162461bcd60e51b815260206004820152601660248201527f416464726573732063616e6e6f74206265207a65726f000000000000000000006044820152606401610b1e565b6001600160a01b0381166324d7806c336040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602401602060405180830381865afa1580156126e6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061270a9190614e83565b6127565760405162461bcd60e51b815260206004820181905260248201527f43616c6c6572206e6f742061646d696e20696e206e657720636f6e74726163746044820152606401610b1e565b6101c480546001600160a01b0319166001600160a01b0383169081179091556040519081527f2f55f724ae3134584dfdd86a4ee1e090635ff9913722b5fe06e064cc7e3ed8b490602001610b59565b6000818152606760205260409020546001600160a01b03166128095760405162461bcd60e51b815260206004820152601360248201527f4554533a2043544147206e6f7420666f756e64000000000000000000000000006044820152606401610b1e565b6128116112c4565b6001600160a01b031661282382611959565b6001600160a01b0316141561287a5760405162461bcd60e51b815260206004820152601560248201527f546167206f776e656420627920706c6174666f726d00000000000000000000006044820152606401610b1e565b61288381612919565b6128cf5760405162461bcd60e51b815260206004820152601760248201527f72656379636c696e67206e6f7420617661696c61626c650000000000000000006044820152606401610b1e565b6128e96128db82611959565b6128e36112c4565b83612f27565b604051339082907f0f842a1659c86d6e422461459fb2ab6fa8af886fd1cf9978a73dd299f23ccc7a90600090a350565b6000426129266101c75490565b60008481526101c960205260409020546129409190614ff5565b1092915050565b600080612953836136ac565b80516020909101209392505050565b6101c4546001600160a01b03166324d7806c336040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602401602060405180830381865afa1580156129b9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129dd9190614e83565b612a195760405162461bcd60e51b815260206004820152600d60248201526c1058d8d95cdcc819195b9a5959609a1b6044820152606401610b1e565b6101c78190556040518181527f0746578f4b3113723b37a909bdaea17321cc8c4a738f0bbcbf72ea2e6142c4c290602001610b59565b6000611a2c612a9384848080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061294792505050565b6000908152606760205260409020546001600160a01b0316151590565b6101c4546001600160a01b03166324d7806c336040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602401602060405180830381865afa158015612b07573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b2b9190614e83565b612b675760405162461bcd60e51b815260206004820152600d60248201526c1058d8d95cdcc819195b9a5959609a1b6044820152606401610b1e565b612b6f613d6a565b611b94613dbc565b6101c4546001600160a01b03166324d7806c336040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602401602060405180830381865afa158015612bce573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612bf29190614e83565b612c2e5760405162461bcd60e51b815260206004820152600d60248201526c1058d8d95cdcc819195b9a5959609a1b6044820152606401610b1e565b6001600160a01b038116612c845760405162461bcd60e51b815260206004820152601660248201527f416464726573732063616e6e6f74206265207a65726f000000000000000000006044820152606401610b1e565b6101c380546001600160a01b0319166001600160a01b0383169081179091556040519081527f44083188a657481391e0f7de38dc24520f2ee91f7eba083ad27831a62cd1c9a790602001610b59565b600080612d1586868080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061294792505050565b9050612d20816123d9565b612d3357612d3086868686611e7a565b90505b95945050505050565b60006001600160e01b031982167f80ac58cd000000000000000000000000000000000000000000000000000000001480612d9f57506001600160e01b031982167f5b5e139f00000000000000000000000000000000000000000000000000000000145b80610a6557507f01ffc9a7000000000000000000000000000000000000000000000000000000006001600160e01b0319831614610a65565b6000818152606760205260409020546001600160a01b03166112c15760405162461bcd60e51b815260206004820152601860248201527f4552433732313a20696e76616c696420746f6b656e20494400000000000000006044820152606401610b1e565b600081815260696020526040902080546001600160a01b0319166001600160a01b0384169081179091558190612e7082611959565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b600080612eb583611959565b9050806001600160a01b0316846001600160a01b03161480612efc57506001600160a01b038082166000908152606a602090815260408083209388168352929052205460ff165b80610d765750836001600160a01b0316612f1584610d7e565b6001600160a01b031614949350505050565b826001600160a01b0316612f3a82611959565b6001600160a01b031614612f9e5760405162461bcd60e51b815260206004820152602560248201527f4552433732313a207472616e736665722066726f6d20696e636f72726563742060448201526437bbb732b960d91b6064820152608401610b1e565b6001600160a01b0382166130195760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f2061646460448201527f72657373000000000000000000000000000000000000000000000000000000006064820152608401610b1e565b6130268383836001613df5565b826001600160a01b031661303982611959565b6001600160a01b03161461309d5760405162461bcd60e51b815260206004820152602560248201527f4552433732313a207472616e736665722066726f6d20696e636f72726563742060448201526437bbb732b960d91b6064820152608401610b1e565b600081815260696020908152604080832080546001600160a01b03199081169091556001600160a01b0387811680865260688552838620805460001901905590871680865283862080546001019055868652606790945282852080549092168417909155905184937fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4610ed28383836001613e5c565b6101c4546001600160a01b03166324d7806c336040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602401602060405180830381865afa15801561318c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906131b09190614e83565b6112c15760405162461bcd60e51b815260206004820152600d60248201526c1058d8d95cdcc819195b9a5959609a1b6044820152606401610b1e565b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff161561321f57610ed283613f6d565b826001600160a01b03166352d1902d6040518163ffffffff1660e01b8152600401602060405180830381865afa925050508015613279575060408051601f3d908101601f191682019092526132769181019061500d565b60015b6132eb5760405162461bcd60e51b815260206004820152602e60248201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960448201527f6f6e206973206e6f7420555550530000000000000000000000000000000000006064820152608401610b1e565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc81146133805760405162461bcd60e51b815260206004820152602960248201527f45524331393637557067726164653a20756e737570706f727465642070726f7860448201527f6961626c655555494400000000000000000000000000000000000000000000006064820152608401610b1e565b50610ed283838361402b565b600061339782611959565b90506133a7816000846001613df5565b6133b082611959565b600083815260696020908152604080832080546001600160a01b03199081169091556001600160a01b0385168085526068845282852080546000190190558785526067909352818420805490911690555192935084927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908390a4611890816000846001613e5c565b600054610100900460ff166134a45760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608401610b1e565b6118908282614050565b600054610100900460ff166135195760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608401610b1e565b611b946140e2565b600054610100900460ff16611b945760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608401610b1e565b600054610100900460ff166135f75760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608401610b1e565b611b94614159565b60975460ff1615611b945760405162461bcd60e51b815260206004820152601060248201527f5061757361626c653a20706175736564000000000000000000000000000000006044820152606401610b1e565b61365a6135ff565b6097805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a25861368f3390565b6040516001600160a01b03909116815260200160405180910390a1565b606060008290506000815167ffffffffffffffff8111156136cf576136cf614be4565b6040519080825280601f01601f1916602001820160405280156136f9576020820181803683370190505b50905060005b825181101561384b57604160f81b83828151811061371f5761371f614edb565b01602001516001600160f81b031916108015906137605750605a60f81b83828151811061374e5761374e614edb565b01602001516001600160f81b03191611155b156137da5782818151811061377757613777614edb565b602001015160f81c60f81b60f81c60206137919190615026565b60f81b8282815181106137a6576137a6614edb565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350613839565b8281815181106137ec576137ec614edb565b602001015160f81c60f81b82828151811061380957613809614edb565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053505b8061384381614f07565b9150506136ff565b509392505050565b816001600160a01b0316836001600160a01b031614156138b55760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c6572000000000000006044820152606401610b1e565b6001600160a01b038381166000818152606a6020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b600261012d5414156139765760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610b1e565b600261012d55565b60008061398a83612947565b6000818152606760205260409020549091506001600160a01b0316156139f25760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e746564000000006044820152606401610b1e565b6101c5548351849111801590613a0c57506101c654815111155b613a585760405162461bcd60e51b815260206004820152601260248201527f496e76616c69642074616720666f726d617400000000000000000000000000006044820152606401610b1e565b80600081518110613a6b57613a6b614edb565b6020910101516001600160f81b031916602360f81b14613acd5760405162461bcd60e51b815260206004820152601560248201527f546167206d7573742073746172742077697468202300000000000000000000006044820152606401610b1e565b60015b8151811015613bdf576000828281518110613aed57613aed614edb565b01602001516001600160f81b03191690507f2000000000000000000000000000000000000000000000000000000000000000811415613b6e5760405162461bcd60e51b815260206004820152600d60248201527f53706163657320696e20746167000000000000000000000000000000000000006044820152606401610b1e565b602360f81b6001600160f81b031982161415613bcc5760405162461bcd60e51b815260206004820152601360248201527f54616720636f6e7461696e7320707265666978000000000000000000000000006044820152606401610b1e565b5080613bd781614f07565b915050613ad0565b50909392505050565b6118908282604051806020016040528060008152506141c4565b600161012d55565b613c15848484612f27565b613c2184848484614242565b6111425760405162461bcd60e51b815260206004820152603260248201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560448201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b6064820152608401610b1e565b60008281526101c9602052604080822083905551339184917faa0c0591942aff60e66bde156168c9a47ef843534b433bbaa33e62d1410f4f2c9190a35050565b60606000613cd583614388565b600101905060008167ffffffffffffffff811115613cf557613cf5614be4565b6040519080825280601f01601f191660200182016040528015613d1f576020820181803683370190505b5090508181016020015b600019017f3031323334353637383961626364656600000000000000000000000000000000600a86061a8153600a8504945084613d655761384b565b613d29565b60975460ff16611b945760405162461bcd60e51b815260206004820152601460248201527f5061757361626c653a206e6f74207061757365640000000000000000000000006044820152606401610b1e565b613dc4613d6a565b6097805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa3361368f565b613dfd6135ff565b613e098484848461446a565b60975460ff16156111425760405162461bcd60e51b815260206004820152600f60248201527f436f6e74726163742070617573656400000000000000000000000000000000006044820152606401610b1e565b6001600160a01b03831615613ea657613e736112c4565b6001600160a01b0316836001600160a01b03161415613e9c57613e97826000613c88565b613ea6565b613ea68242613c88565b6001600160a01b03841615801590613ed75750613ec16112c4565b6001600160a01b0316846001600160a01b031614155b8015613ee95750613ee784611a33565b155b15611142576101c4546040517fa10138e80000000000000000000000000000000000000000000000000000000081526001600160a01b0386811660048301529091169063a10138e890602401600060405180830381600087803b158015613f4f57600080fd5b505af1158015613f63573d6000803e3d6000fd5b5050505050505050565b6001600160a01b0381163b613fea5760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201527f6f74206120636f6e7472616374000000000000000000000000000000000000006064820152608401610b1e565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc80546001600160a01b0319166001600160a01b0392909216919091179055565b614034836144e3565b6000825111806140415750805b15610ed2576111428383614523565b600054610100900460ff166140bb5760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608401610b1e565b81516140ce9060659060208501906147fe565b508051610ed29060669060208401906147fe565b600054610100900460ff1661414d5760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608401610b1e565b6097805460ff19169055565b600054610100900460ff16613c025760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608401610b1e565b6141ce8383614548565b6141db6000848484614242565b610ed25760405162461bcd60e51b815260206004820152603260248201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560448201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b6064820152608401610b1e565b60006001600160a01b0384163b1561438057604051630a85bd0160e11b81526001600160a01b0385169063150b7a029061428690339089908890889060040161504b565b6020604051808303816000875af19250505080156142c1575060408051601f3d908101601f191682019092526142be9181019061507d565b60015b614366573d8080156142ef576040519150601f19603f3d011682016040523d82523d6000602084013e6142f4565b606091505b50805161435e5760405162461bcd60e51b815260206004820152603260248201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560448201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b6064820152608401610b1e565b805181602001fd5b6001600160e01b031916630a85bd0160e11b149050610d76565b506001610d76565b6000807a184f03e93ff9f4daa797ed6e38ed64bf6a1f01000000000000000083106143d1577a184f03e93ff9f4daa797ed6e38ed64bf6a1f010000000000000000830492506040015b6d04ee2d6d415b85acef810000000083106143fd576d04ee2d6d415b85acef8100000000830492506020015b662386f26fc10000831061441b57662386f26fc10000830492506010015b6305f5e1008310614433576305f5e100830492506008015b612710831061444757612710830492506004015b60648310614459576064830492506002015b600a8310610a655760010192915050565b60975460ff16156111425760405162461bcd60e51b815260206004820152602b60248201527f4552433732315061757361626c653a20746f6b656e207472616e73666572207760448201527f68696c65207061757365640000000000000000000000000000000000000000006064820152608401610b1e565b6144ec81613f6d565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b6060611a2c838360405180606001604052806027815260200161509b602791396146eb565b6001600160a01b03821661459e5760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f20616464726573736044820152606401610b1e565b6000818152606760205260409020546001600160a01b0316156146035760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e746564000000006044820152606401610b1e565b614611600083836001613df5565b6000818152606760205260409020546001600160a01b0316156146765760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e746564000000006044820152606401610b1e565b6001600160a01b038216600081815260686020908152604080832080546001019055848352606790915280822080546001600160a01b0319168417905551839291907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a4611890600083836001613e5c565b6060600080856001600160a01b0316856040516147089190614f86565b600060405180830381855af49150503d8060008114614743576040519150601f19603f3d011682016040523d82523d6000602084013e614748565b606091505b509150915061475986838387614763565b9695505050505050565b606083156147cf5782516147c8576001600160a01b0385163b6147c85760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610b1e565b5081610d76565b610d7683838151156147e45781518083602001fd5b8060405162461bcd60e51b8152600401610b1e919061493b565b82805461480a90614ea0565b90600052602060002090601f01602090048101928261482c5760008555614872565b82601f1061484557805160ff1916838001178555614872565b82800160010185558215614872579182015b82811115614872578251825591602001919060010190614857565b5061487e929150614882565b5090565b5b8082111561487e5760008155600101614883565b6001600160e01b0319811681146112c157600080fd5b6000602082840312156148bf57600080fd5b8135611a2c81614897565b6000602082840312156148dc57600080fd5b5035919050565b60005b838110156148fe5781810151838201526020016148e6565b838111156111425750506000910152565b600081518084526149278160208601602086016148e3565b601f01601f19169290920160200192915050565b602081526000611a2c602083018461490f565b60008083601f84011261496057600080fd5b50813567ffffffffffffffff81111561497857600080fd5b60208301915083602082850101111561499057600080fd5b9250929050565b6001600160a01b03811681146112c157600080fd5b600080600080606085870312156149c257600080fd5b843567ffffffffffffffff8111156149d957600080fd5b6149e58782880161494e565b90955093505060208501356149f981614997565b91506040850135614a0981614997565b939692955090935050565b6020815260006001600160a01b0380845116602084015280602085015116604084015250604083015160a06060840152614a5160c084018261490f565b90506060840151151560808401526080840151151560a08401528091505092915050565b60008060408385031215614a8857600080fd5b8235614a9381614997565b946020939093013593505050565b600080600060608486031215614ab657600080fd5b8335614ac181614997565b92506020840135614ad181614997565b929592945050506040919091013590565b60008083601f840112614af457600080fd5b50813567ffffffffffffffff811115614b0c57600080fd5b6020830191508360208260051b850101111561499057600080fd5b80151581146112c157600080fd5b600080600060408486031215614b4a57600080fd5b833567ffffffffffffffff811115614b6157600080fd5b614b6d86828701614ae2565b9094509250506020840135614b8181614b27565b809150509250925092565b600060208284031215614b9e57600080fd5b8135611a2c81614997565b60008060008060808587031215614bbf57600080fd5b8435614bca81614997565b966020860135965060408601359560600135945092505050565b634e487b7160e01b600052604160045260246000fd5b600067ffffffffffffffff80841115614c1557614c15614be4565b604051601f8501601f19908116603f01168101908282118183101715614c3d57614c3d614be4565b81604052809350858152868686011115614c5657600080fd5b858560208301376000602087830101525050509392505050565b600082601f830112614c8157600080fd5b611a2c83833560208501614bfa565b60008060408385031215614ca357600080fd5b8235614cae81614997565b9150602083013567ffffffffffffffff811115614cca57600080fd5b614cd685828601614c70565b9150509250929050565b60008060208385031215614cf357600080fd5b823567ffffffffffffffff811115614d0a57600080fd5b614d168582860161494e565b90969095509350505050565b60008060408385031215614d3557600080fd5b8235614d4081614997565b91506020830135614d5081614b27565b809150509250929050565b60006001600160a01b03808816835280871660208401525060a06040830152614d8760a083018661490f565b9315156060830152509015156080909101529392505050565b60008060008060808587031215614db657600080fd5b8435614dc181614997565b93506020850135614dd181614997565b925060408501359150606085013567ffffffffffffffff811115614df457600080fd5b614e0087828801614c70565b91505092959194509250565b600060208284031215614e1e57600080fd5b813567ffffffffffffffff811115614e3557600080fd5b8201601f81018413614e4657600080fd5b610d7684823560208401614bfa565b60008060408385031215614e6857600080fd5b8235614e7381614997565b91506020830135614d5081614997565b600060208284031215614e9557600080fd5b8151611a2c81614b27565b600181811c90821680614eb457607f821691505b60208210811415614ed557634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b6000600019821415614f1b57614f1b614ef1565b5060010190565b600060208284031215614f3457600080fd5b8151611a2c81614997565b6000808335601e19843603018112614f5657600080fd5b83018035915067ffffffffffffffff821115614f7157600080fd5b60200191503681900382131561499057600080fd5b60008251614f988184602087016148e3565b9190910192915050565b604081526000614fb5604083018561490f565b905082151560208301529392505050565b60008351614fd88184602088016148e3565b835190830190614fec8183602088016148e3565b01949350505050565b6000821982111561500857615008614ef1565b500190565b60006020828403121561501f57600080fd5b5051919050565b600060ff821660ff84168060ff0382111561504357615043614ef1565b019392505050565b60006001600160a01b03808716835280861660208401525083604083015260806060830152614759608083018461490f565b60006020828403121561508f57600080fd5b8151611a2c8161489756fe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a26469706673582212200eed52c823077b72d7d1e5aad8a48f42025a62673c3e38d3afbf9948fa725f5e64736f6c634300080c0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "approve(address,uint256)": {
        "details": "See {IERC721-approve}."
      },
      "balanceOf(address)": {
        "details": "See {IERC721-balanceOf}."
      },
      "burn(uint256)": {
        "details": "Burns `tokenId`. See {ERC721-_burn}. Requirements: - The caller must own `tokenId` or be an approved operator."
      },
      "computeTagId(string)": {
        "params": {
          "_tag": "Tag string."
        },
        "returns": {
          "_0": "Id of potential CTAG token id."
        }
      },
      "constructor": {
        "custom:oz-upgrades-unsafe-allow": "constructor"
      },
      "createTag(string,address,address)": {
        "params": {
          "_creator": "Address credited with creating CTAG.",
          "_tag": "Tag string."
        },
        "returns": {
          "_tokenId": "Id of CTAG token."
        }
      },
      "getApproved(uint256)": {
        "details": "See {IERC721-getApproved}."
      },
      "getCreatorAddress(uint256)": {
        "params": {
          "_tokenId": "CTAG token Id."
        },
        "returns": {
          "_0": "_creator Creator address of the CTAG."
        }
      },
      "getLastRenewed(uint256)": {
        "params": {
          "_tokenId": "CTAG token Id."
        },
        "returns": {
          "_0": "Block timestamp."
        }
      },
      "getOrCreateTagId(string,address,address)": {
        "params": {
          "_creator": "Address credited with creating CTAG.",
          "_relayer": "Address of Relayer contract calling ETS Core.",
          "_tag": "Tag string."
        },
        "returns": {
          "tokenId": "Id of CTAG token."
        }
      },
      "getOwnershipTermLength()": {
        "returns": {
          "_0": "Term length in days."
        }
      },
      "getPlatformAddress()": {
        "returns": {
          "_0": "wallet address for ETS Platform."
        }
      },
      "getTagById(uint256)": {
        "params": {
          "_tokenId": "CTAG token Id."
        },
        "returns": {
          "_0": "CTAG record as Tag struct."
        }
      },
      "getTagByString(string)": {
        "params": {
          "_tag": "Tag string."
        },
        "returns": {
          "_0": "CTAG record as Tag struct."
        }
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC721-isApprovedForAll}."
      },
      "name()": {
        "details": "See {IERC721Metadata-name}."
      },
      "ownerOf(uint256)": {
        "details": "See {IERC721-ownerOf}."
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "preSetPremiumTags(string[],bool)": {
        "params": {
          "_isPremium": "Boolean true for premium, false for not premium.",
          "_tags": "Array of tag strings."
        }
      },
      "proxiableUUID()": {
        "details": "Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate the implementation's compatibility when performing an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier."
      },
      "recycleTag(uint256)": {
        "params": {
          "_tokenId": "Id of CTAG token."
        }
      },
      "renewTag(uint256)": {
        "params": {
          "_tokenId": "Id of CTAG token."
        }
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "setAccessControls(address)": {
        "params": {
          "_accessControls": "Address of ETSAccessControls contract."
        }
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC721-setApprovalForAll}."
      },
      "setETSCore(address)": {
        "params": {
          "_ets": "Address of ETS contract."
        }
      },
      "setOwnershipTermLength(uint256)": {
        "params": {
          "_ownershipTermLength": "Ownership term length in days."
        }
      },
      "setPremiumFlag(uint256[],bool)": {
        "params": {
          "_isPremium": "Boolean true for premium, false for not premium.",
          "_tokenIds": "Array of CTAG Ids."
        }
      },
      "setReservedFlag(uint256[],bool)": {
        "params": {
          "_reserved": "Boolean true for reserved, false for not reserved.",
          "_tokenIds": "Array of CTAG Ids."
        }
      },
      "setTagMaxStringLength(uint256)": {
        "params": {
          "_tagMaxStringLength": "maximum character length of string."
        }
      },
      "setTagMinStringLength(uint256)": {
        "params": {
          "_tagMinStringLength": "minimum character length of string."
        }
      },
      "symbol()": {
        "details": "See {IERC721Metadata-symbol}."
      },
      "tagExistsById(uint256)": {
        "params": {
          "_tokenId": "Token Id uint computed from tag string via computeTargetId()."
        },
        "returns": {
          "_0": "true if CTAG token exists; false if not."
        }
      },
      "tagExistsByString(string)": {
        "params": {
          "_tag": "Tag string."
        },
        "returns": {
          "_0": "true if CTAG token exists; false if not."
        }
      },
      "tagOwnershipTermExpired(uint256)": {
        "params": {
          "_tokenId": "Token Id uint computed from tag string via computeTargetId()."
        },
        "returns": {
          "_0": "true if CTAG ownership term has expired; false if not."
        }
      },
      "tokenURI(uint256)": {
        "details": "See {IERC721Metadata-tokenURI}."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC721-transferFrom}."
      },
      "upgradeTo(address)": {
        "custom:oz-upgrades-unsafe-allow-reachable": "delegatecall",
        "details": "Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
      },
      "upgradeToAndCall(address,bytes)": {
        "custom:oz-upgrades-unsafe-allow-reachable": "delegatecall",
        "details": "Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
      }
    },
    "stateVariables": {
      "tokenIdToLastRenewed": {
        "details": "Mapping of tokenId to last renewal."
      },
      "tokenIdToTag": {
        "details": "Map of CTAG id to CTAG record."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "computeTagId(string)": {
        "notice": "Function to deterministically compute & return a CTAG token Id. Every CTAG token and it's associated data struct is mapped to by it's token Id. This Id is computed from the \"display\" tag string lowercased, hashed and cast as an unsigned integer. Note: Function does not verify if CTAG record exists."
      },
      "createTag(string,address,address)": {
        "notice": "Create CTAG token from tag string. Reverts if tag exists or is invalid. Only ETS Core can call this function."
      },
      "getCreatorAddress(uint256)": {
        "notice": "Retrieve Creator address for a CTAG token."
      },
      "getLastRenewed(uint256)": {
        "notice": "Retrieve last renewal block timestamp for a CTAG."
      },
      "getOrCreateTagId(string,address,address)": {
        "notice": "Get CTAG token Id from tag string. Combo function that accepts a tag string and returns it's CTAG token Id if it exists, or creates a new CTAG and returns corresponding Id. Only ETS Core can call this function."
      },
      "getOwnershipTermLength()": {
        "notice": "Retrieve CTAG ownership term length global setting."
      },
      "getPlatformAddress()": {
        "notice": "Retrieve wallet address for ETS Platform."
      },
      "getTagById(uint256)": {
        "notice": "Retrieve a CTAG record for a given token Id. Note: returns a struct with empty members when no CTAG exists."
      },
      "getTagByString(string)": {
        "notice": "Retrieve a CTAG record for a given tag string. Note: returns a struct with empty members when no CTAG exists."
      },
      "isTagPremium(string)": {
        "notice": "Defines whether a tag has been set up as premium"
      },
      "pause()": {
        "notice": "Pauses ETSToken contract."
      },
      "preSetPremiumTags(string[],bool)": {
        "notice": "Admin function to flag/unflag tag string(s) as premium prior to minting."
      },
      "recycleTag(uint256)": {
        "notice": "Recycles a CTAG back to ETS. When ownership term of a CTAG has expired, any wallet or contract may call this function to recycle the tag back to ETS. Once recycled, a tag may be auctioned again."
      },
      "renewTag(uint256)": {
        "notice": "Renews ownership term of a CTAG. A \"CTAG ownership term\" is utilized to prevent CTAGs from being abandoned or inaccessable due to lost private keys. Any wallet address may renew the term of a CTAG for an owner. When renewed, the term is extended from the current block timestamp plus the ownershipTermLength public variable."
      },
      "setAccessControls(address)": {
        "notice": "Sets ETSAccessControls on the ETSToken contract function calls can be restricted to ETS platform only. Note: Caller of this function must be deployer or pre-set as admin of new contract."
      },
      "setETSCore(address)": {
        "notice": "Sets ETS core on the ETSToken contract so functions can be restricted to ETS platform only."
      },
      "setOwnershipTermLength(uint256)": {
        "notice": "Admin function to set the ownership term length of a CTAG is set."
      },
      "setPremiumFlag(uint256[],bool)": {
        "notice": "Admin function to flag/unflag CTAG(s) as premium."
      },
      "setReservedFlag(uint256[],bool)": {
        "notice": "Admin function to flag/unflag CTAG(s) as reserved. Tags flagged as reserved cannot be auctioned."
      },
      "setTagMaxStringLength(uint256)": {
        "notice": "admin function to set maximum character length of CTAG display string."
      },
      "setTagMinStringLength(uint256)": {
        "notice": "Admin function to set minimum  character length of CTAG display string."
      },
      "tagExistsById(uint256)": {
        "notice": "Check that CTAG token exists for a given computed token Id."
      },
      "tagExistsByString(string)": {
        "notice": "Check that a CTAG token exists for a given tag string."
      },
      "tagOwnershipTermExpired(uint256)": {
        "notice": "Check if CTAG token ownership term has expired."
      },
      "unPause()": {
        "notice": "Unpauses ETSToken contract."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 912,
        "contract": "contracts/ETSToken.sol:ETSToken",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 915,
        "contract": "contracts/ETSToken.sol:ETSToken",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 3508,
        "contract": "contracts/ETSToken.sol:ETSToken",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 4159,
        "contract": "contracts/ETSToken.sol:ETSToken",
        "label": "__gap",
        "offset": 0,
        "slot": "51",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 1940,
        "contract": "contracts/ETSToken.sol:ETSToken",
        "label": "_name",
        "offset": 0,
        "slot": "101",
        "type": "t_string_storage"
      },
      {
        "astId": 1942,
        "contract": "contracts/ETSToken.sol:ETSToken",
        "label": "_symbol",
        "offset": 0,
        "slot": "102",
        "type": "t_string_storage"
      },
      {
        "astId": 1946,
        "contract": "contracts/ETSToken.sol:ETSToken",
        "label": "_owners",
        "offset": 0,
        "slot": "103",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 1950,
        "contract": "contracts/ETSToken.sol:ETSToken",
        "label": "_balances",
        "offset": 0,
        "slot": "104",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 1954,
        "contract": "contracts/ETSToken.sol:ETSToken",
        "label": "_tokenApprovals",
        "offset": 0,
        "slot": "105",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 1960,
        "contract": "contracts/ETSToken.sol:ETSToken",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "106",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 2862,
        "contract": "contracts/ETSToken.sol:ETSToken",
        "label": "__gap",
        "offset": 0,
        "slot": "107",
        "type": "t_array(t_uint256)44_storage"
      },
      {
        "astId": 1231,
        "contract": "contracts/ETSToken.sol:ETSToken",
        "label": "_paused",
        "offset": 0,
        "slot": "151",
        "type": "t_bool"
      },
      {
        "astId": 1336,
        "contract": "contracts/ETSToken.sol:ETSToken",
        "label": "__gap",
        "offset": 0,
        "slot": "152",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 3109,
        "contract": "contracts/ETSToken.sol:ETSToken",
        "label": "__gap",
        "offset": 0,
        "slot": "201",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 3046,
        "contract": "contracts/ETSToken.sol:ETSToken",
        "label": "__gap",
        "offset": 0,
        "slot": "251",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 1351,
        "contract": "contracts/ETSToken.sol:ETSToken",
        "label": "_status",
        "offset": 0,
        "slot": "301",
        "type": "t_uint256"
      },
      {
        "astId": 1420,
        "contract": "contracts/ETSToken.sol:ETSToken",
        "label": "__gap",
        "offset": 0,
        "slot": "302",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 894,
        "contract": "contracts/ETSToken.sol:ETSToken",
        "label": "__gap",
        "offset": 0,
        "slot": "351",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 1209,
        "contract": "contracts/ETSToken.sol:ETSToken",
        "label": "__gap",
        "offset": 0,
        "slot": "401",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 13203,
        "contract": "contracts/ETSToken.sol:ETSToken",
        "label": "ets",
        "offset": 0,
        "slot": "451",
        "type": "t_contract(IETS)14647"
      },
      {
        "astId": 13206,
        "contract": "contracts/ETSToken.sol:ETSToken",
        "label": "etsAccessControls",
        "offset": 0,
        "slot": "452",
        "type": "t_contract(IETSAccessControls)14833"
      },
      {
        "astId": 13211,
        "contract": "contracts/ETSToken.sol:ETSToken",
        "label": "tagMinStringLength",
        "offset": 0,
        "slot": "453",
        "type": "t_uint256"
      },
      {
        "astId": 13213,
        "contract": "contracts/ETSToken.sol:ETSToken",
        "label": "tagMaxStringLength",
        "offset": 0,
        "slot": "454",
        "type": "t_uint256"
      },
      {
        "astId": 13215,
        "contract": "contracts/ETSToken.sol:ETSToken",
        "label": "ownershipTermLength",
        "offset": 0,
        "slot": "455",
        "type": "t_uint256"
      },
      {
        "astId": 13221,
        "contract": "contracts/ETSToken.sol:ETSToken",
        "label": "tokenIdToTag",
        "offset": 0,
        "slot": "456",
        "type": "t_mapping(t_uint256,t_struct(Tag)15176_storage)"
      },
      {
        "astId": 13226,
        "contract": "contracts/ETSToken.sol:ETSToken",
        "label": "tokenIdToLastRenewed",
        "offset": 0,
        "slot": "457",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 13231,
        "contract": "contracts/ETSToken.sol:ETSToken",
        "label": "isTagPremium",
        "offset": 0,
        "slot": "458",
        "type": "t_mapping(t_string_memory_ptr,t_bool)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)44_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[44]",
        "numberOfBytes": "1408"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IETS)14647": {
        "encoding": "inplace",
        "label": "contract IETS",
        "numberOfBytes": "20"
      },
      "t_contract(IETSAccessControls)14833": {
        "encoding": "inplace",
        "label": "contract IETSAccessControls",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_string_memory_ptr,t_bool)": {
        "encoding": "mapping",
        "key": "t_string_memory_ptr",
        "label": "mapping(string => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_struct(Tag)15176_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct IETSToken.Tag)",
        "numberOfBytes": "32",
        "value": "t_struct(Tag)15176_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_memory_ptr": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Tag)15176_storage": {
        "encoding": "inplace",
        "label": "struct IETSToken.Tag",
        "members": [
          {
            "astId": 15167,
            "contract": "contracts/ETSToken.sol:ETSToken",
            "label": "relayer",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 15169,
            "contract": "contracts/ETSToken.sol:ETSToken",
            "label": "creator",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 15171,
            "contract": "contracts/ETSToken.sol:ETSToken",
            "label": "display",
            "offset": 0,
            "slot": "2",
            "type": "t_string_storage"
          },
          {
            "astId": 15173,
            "contract": "contracts/ETSToken.sol:ETSToken",
            "label": "premium",
            "offset": 0,
            "slot": "3",
            "type": "t_bool"
          },
          {
            "astId": 15175,
            "contract": "contracts/ETSToken.sol:ETSToken",
            "label": "reserved",
            "offset": 1,
            "slot": "3",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}