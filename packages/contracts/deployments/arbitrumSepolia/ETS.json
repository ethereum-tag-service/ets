{
  "address": "0x76cF4C272856B7e198DaED726C36186A98caF19E",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "newAccessControls",
          "type": "address"
        }
      ],
      "name": "AccessControlsSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "previousAdmin",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newAdmin",
          "type": "address"
        }
      ],
      "name": "AdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "beacon",
          "type": "address"
        }
      ],
      "name": "BeaconUpgraded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "who",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "FundsWithdrawn",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "platformPercentage",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "relayerPercentage",
          "type": "uint256"
        }
      ],
      "name": "PercentagesSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newTaggingFee",
          "type": "uint256"
        }
      ],
      "name": "TaggingFeeSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "taggingRecordId",
          "type": "uint256"
        }
      ],
      "name": "TaggingRecordCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "taggingRecordId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "enum IETS.TaggingAction",
          "name": "action",
          "type": "uint8"
        }
      ],
      "name": "TaggingRecordUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "implementation",
          "type": "address"
        }
      ],
      "name": "Upgraded",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "MODULO",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "NAME",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "VERSION",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "accrued",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_taggingRecordId",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "_tagIds",
          "type": "uint256[]"
        },
        {
          "internalType": "address",
          "name": "_tagger",
          "type": "address"
        }
      ],
      "name": "appendTags",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "_tagIds",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256",
          "name": "_targetId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_recordType",
          "type": "string"
        },
        {
          "internalType": "address payable",
          "name": "_tagger",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_relayer",
          "type": "address"
        }
      ],
      "name": "applyTagsWithCompositeKey",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "string",
              "name": "targetURI",
              "type": "string"
            },
            {
              "internalType": "string[]",
              "name": "tagStrings",
              "type": "string[]"
            },
            {
              "internalType": "string",
              "name": "recordType",
              "type": "string"
            }
          ],
          "internalType": "struct IETS.TaggingRecordRawInput",
          "name": "_rawInput",
          "type": "tuple"
        },
        {
          "internalType": "address payable",
          "name": "_tagger",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_relayer",
          "type": "address"
        }
      ],
      "name": "applyTagsWithRawInput",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_taggingRecordId",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "_tagIds",
          "type": "uint256[]"
        },
        {
          "internalType": "enum IETS.TaggingAction",
          "name": "_action",
          "type": "uint8"
        }
      ],
      "name": "computeTaggingFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "fee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "tagCount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "_tagIds",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256",
          "name": "_targetId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_recordType",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "_relayer",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_tagger",
          "type": "address"
        },
        {
          "internalType": "enum IETS.TaggingAction",
          "name": "_action",
          "type": "uint8"
        }
      ],
      "name": "computeTaggingFeeFromCompositeKey",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "fee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "tagCount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "string",
              "name": "targetURI",
              "type": "string"
            },
            {
              "internalType": "string[]",
              "name": "tagStrings",
              "type": "string[]"
            },
            {
              "internalType": "string",
              "name": "recordType",
              "type": "string"
            }
          ],
          "internalType": "struct IETS.TaggingRecordRawInput",
          "name": "_rawInput",
          "type": "tuple"
        },
        {
          "internalType": "address",
          "name": "_relayer",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_tagger",
          "type": "address"
        },
        {
          "internalType": "enum IETS.TaggingAction",
          "name": "_action",
          "type": "uint8"
        }
      ],
      "name": "computeTaggingFeeFromRawInput",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "fee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "tagCount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_targetId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_recordType",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "_relayer",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_tagger",
          "type": "address"
        }
      ],
      "name": "computeTaggingRecordIdFromCompositeKey",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "taggingRecordId",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "string",
              "name": "targetURI",
              "type": "string"
            },
            {
              "internalType": "string[]",
              "name": "tagStrings",
              "type": "string[]"
            },
            {
              "internalType": "string",
              "name": "recordType",
              "type": "string"
            }
          ],
          "internalType": "struct IETS.TaggingRecordRawInput",
          "name": "_rawInput",
          "type": "tuple"
        },
        {
          "internalType": "address",
          "name": "_relayer",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_tagger",
          "type": "address"
        }
      ],
      "name": "computeTaggingRecordIdFromRawInput",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "taggingRecordId",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_tag",
          "type": "string"
        },
        {
          "internalType": "address payable",
          "name": "_creator",
          "type": "address"
        }
      ],
      "name": "createTag",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "_tagIds",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256",
          "name": "_targetId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_recordType",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "_tagger",
          "type": "address"
        }
      ],
      "name": "createTaggingRecord",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "_account",
          "type": "address"
        }
      ],
      "name": "drawDown",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "etsAccessControls",
      "outputs": [
        {
          "internalType": "contract IETSAccessControls",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "etsTarget",
      "outputs": [
        {
          "internalType": "contract IETSTarget",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "etsToken",
      "outputs": [
        {
          "internalType": "contract IETSToken",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_tag",
          "type": "string"
        },
        {
          "internalType": "address payable",
          "name": "_creator",
          "type": "address"
        }
      ],
      "name": "getOrCreateTagId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_targetId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_recordType",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "_relayer",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_tagger",
          "type": "address"
        }
      ],
      "name": "getTaggingRecordFromCompositeKey",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "tagIds",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256",
          "name": "targetId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "recordType",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "relayer",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tagger",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        }
      ],
      "name": "getTaggingRecordFromId",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "tagIds",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256",
          "name": "targetId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "recordType",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "relayer",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tagger",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "string",
              "name": "targetURI",
              "type": "string"
            },
            {
              "internalType": "string[]",
              "name": "tagStrings",
              "type": "string[]"
            },
            {
              "internalType": "string",
              "name": "recordType",
              "type": "string"
            }
          ],
          "internalType": "struct IETS.TaggingRecordRawInput",
          "name": "_rawInput",
          "type": "tuple"
        },
        {
          "internalType": "address",
          "name": "_relayer",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_tagger",
          "type": "address"
        }
      ],
      "name": "getTaggingRecordFromRawInput",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "tagIds",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256",
          "name": "targetId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "recordType",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "relayer",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tagger",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IETSAccessControls",
          "name": "_etsAccessControls",
          "type": "address"
        },
        {
          "internalType": "contract IETSToken",
          "name": "_etsToken",
          "type": "address"
        },
        {
          "internalType": "contract IETSTarget",
          "name": "_etsTarget",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_taggingFee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_platformPercentage",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_relayerPercentage",
          "type": "uint256"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "paid",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "platformPercentage",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "proxiableUUID",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "relayerPercentage",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_taggingRecordId",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "_tagIds",
          "type": "uint256[]"
        },
        {
          "internalType": "address",
          "name": "_tagger",
          "type": "address"
        }
      ],
      "name": "removeTags",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "_tagIds",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256",
          "name": "_targetId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_recordType",
          "type": "string"
        },
        {
          "internalType": "address payable",
          "name": "_tagger",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_relayer",
          "type": "address"
        }
      ],
      "name": "removeTagsWithCompositeKey",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "string",
              "name": "targetURI",
              "type": "string"
            },
            {
              "internalType": "string[]",
              "name": "tagStrings",
              "type": "string[]"
            },
            {
              "internalType": "string",
              "name": "recordType",
              "type": "string"
            }
          ],
          "internalType": "struct IETS.TaggingRecordRawInput",
          "name": "_rawInput",
          "type": "tuple"
        },
        {
          "internalType": "address",
          "name": "_tagger",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_relayer",
          "type": "address"
        }
      ],
      "name": "removeTagsWithRawInput",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_taggingRecordId",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "_tagIds",
          "type": "uint256[]"
        },
        {
          "internalType": "address",
          "name": "_tagger",
          "type": "address"
        }
      ],
      "name": "replaceTags",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "_tagIds",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256",
          "name": "_targetId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_recordType",
          "type": "string"
        },
        {
          "internalType": "address payable",
          "name": "_tagger",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_relayer",
          "type": "address"
        }
      ],
      "name": "replaceTagsWithCompositeKey",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "string",
              "name": "targetURI",
              "type": "string"
            },
            {
              "internalType": "string[]",
              "name": "tagStrings",
              "type": "string[]"
            },
            {
              "internalType": "string",
              "name": "recordType",
              "type": "string"
            }
          ],
          "internalType": "struct IETS.TaggingRecordRawInput",
          "name": "_rawInput",
          "type": "tuple"
        },
        {
          "internalType": "address payable",
          "name": "_tagger",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_relayer",
          "type": "address"
        }
      ],
      "name": "replaceTagsWithRawInput",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IETSAccessControls",
          "name": "_accessControls",
          "type": "address"
        }
      ],
      "name": "setAccessControls",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_platformPercentage",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_relayerPercentage",
          "type": "uint256"
        }
      ],
      "name": "setPercentages",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_fee",
          "type": "uint256"
        }
      ],
      "name": "setTaggingFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "taggingFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_taggingRecordId",
          "type": "uint256"
        }
      ],
      "name": "taggingRecordExists",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_targetId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_recordType",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "_relayer",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_tagger",
          "type": "address"
        }
      ],
      "name": "taggingRecordExistsByCompositeKey",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "string",
              "name": "targetURI",
              "type": "string"
            },
            {
              "internalType": "string[]",
              "name": "tagStrings",
              "type": "string[]"
            },
            {
              "internalType": "string",
              "name": "recordType",
              "type": "string"
            }
          ],
          "internalType": "struct IETS.TaggingRecordRawInput",
          "name": "_rawInput",
          "type": "tuple"
        },
        {
          "internalType": "address",
          "name": "_relayer",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_tagger",
          "type": "address"
        }
      ],
      "name": "taggingRecordExistsByRawInput",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "taggingRecords",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "targetId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "recordType",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "relayer",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tagger",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        }
      ],
      "name": "totalDue",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_due",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        }
      ],
      "name": "upgradeTo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "upgradeToAndCall",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    }
  ],
  "numDeployments": 3,
  "solcInputHash": "e471eeaea25ffae79d2822e7e98866a5",
  "metadata": "{\"compiler\":{\"version\":\"0.8.12+commit.f00d7308\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAccessControls\",\"type\":\"address\"}],\"name\":\"AccessControlsSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\"}],\"name\":\"BeaconUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"FundsWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"platformPercentage\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"relayerPercentage\",\"type\":\"uint256\"}],\"name\":\"PercentagesSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newTaggingFee\",\"type\":\"uint256\"}],\"name\":\"TaggingFeeSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"taggingRecordId\",\"type\":\"uint256\"}],\"name\":\"TaggingRecordCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"taggingRecordId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"enum IETS.TaggingAction\",\"name\":\"action\",\"type\":\"uint8\"}],\"name\":\"TaggingRecordUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MODULO\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"NAME\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"VERSION\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"accrued\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_taggingRecordId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"_tagIds\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"_tagger\",\"type\":\"address\"}],\"name\":\"appendTags\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_tagIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"_targetId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_recordType\",\"type\":\"string\"},{\"internalType\":\"address payable\",\"name\":\"_tagger\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_relayer\",\"type\":\"address\"}],\"name\":\"applyTagsWithCompositeKey\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"targetURI\",\"type\":\"string\"},{\"internalType\":\"string[]\",\"name\":\"tagStrings\",\"type\":\"string[]\"},{\"internalType\":\"string\",\"name\":\"recordType\",\"type\":\"string\"}],\"internalType\":\"struct IETS.TaggingRecordRawInput\",\"name\":\"_rawInput\",\"type\":\"tuple\"},{\"internalType\":\"address payable\",\"name\":\"_tagger\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_relayer\",\"type\":\"address\"}],\"name\":\"applyTagsWithRawInput\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_taggingRecordId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"_tagIds\",\"type\":\"uint256[]\"},{\"internalType\":\"enum IETS.TaggingAction\",\"name\":\"_action\",\"type\":\"uint8\"}],\"name\":\"computeTaggingFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tagCount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_tagIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"_targetId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_recordType\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_relayer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tagger\",\"type\":\"address\"},{\"internalType\":\"enum IETS.TaggingAction\",\"name\":\"_action\",\"type\":\"uint8\"}],\"name\":\"computeTaggingFeeFromCompositeKey\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tagCount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"targetURI\",\"type\":\"string\"},{\"internalType\":\"string[]\",\"name\":\"tagStrings\",\"type\":\"string[]\"},{\"internalType\":\"string\",\"name\":\"recordType\",\"type\":\"string\"}],\"internalType\":\"struct IETS.TaggingRecordRawInput\",\"name\":\"_rawInput\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"_relayer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tagger\",\"type\":\"address\"},{\"internalType\":\"enum IETS.TaggingAction\",\"name\":\"_action\",\"type\":\"uint8\"}],\"name\":\"computeTaggingFeeFromRawInput\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tagCount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_targetId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_recordType\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_relayer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tagger\",\"type\":\"address\"}],\"name\":\"computeTaggingRecordIdFromCompositeKey\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"taggingRecordId\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"targetURI\",\"type\":\"string\"},{\"internalType\":\"string[]\",\"name\":\"tagStrings\",\"type\":\"string[]\"},{\"internalType\":\"string\",\"name\":\"recordType\",\"type\":\"string\"}],\"internalType\":\"struct IETS.TaggingRecordRawInput\",\"name\":\"_rawInput\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"_relayer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tagger\",\"type\":\"address\"}],\"name\":\"computeTaggingRecordIdFromRawInput\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"taggingRecordId\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_tag\",\"type\":\"string\"},{\"internalType\":\"address payable\",\"name\":\"_creator\",\"type\":\"address\"}],\"name\":\"createTag\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_tagIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"_targetId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_recordType\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_tagger\",\"type\":\"address\"}],\"name\":\"createTaggingRecord\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"drawDown\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"etsAccessControls\",\"outputs\":[{\"internalType\":\"contract IETSAccessControls\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"etsTarget\",\"outputs\":[{\"internalType\":\"contract IETSTarget\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"etsToken\",\"outputs\":[{\"internalType\":\"contract IETSToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_tag\",\"type\":\"string\"},{\"internalType\":\"address payable\",\"name\":\"_creator\",\"type\":\"address\"}],\"name\":\"getOrCreateTagId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_targetId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_recordType\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_relayer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tagger\",\"type\":\"address\"}],\"name\":\"getTaggingRecordFromCompositeKey\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tagIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"targetId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"recordType\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"relayer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tagger\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"getTaggingRecordFromId\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tagIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"targetId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"recordType\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"relayer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tagger\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"targetURI\",\"type\":\"string\"},{\"internalType\":\"string[]\",\"name\":\"tagStrings\",\"type\":\"string[]\"},{\"internalType\":\"string\",\"name\":\"recordType\",\"type\":\"string\"}],\"internalType\":\"struct IETS.TaggingRecordRawInput\",\"name\":\"_rawInput\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"_relayer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tagger\",\"type\":\"address\"}],\"name\":\"getTaggingRecordFromRawInput\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tagIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"targetId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"recordType\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"relayer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tagger\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IETSAccessControls\",\"name\":\"_etsAccessControls\",\"type\":\"address\"},{\"internalType\":\"contract IETSToken\",\"name\":\"_etsToken\",\"type\":\"address\"},{\"internalType\":\"contract IETSTarget\",\"name\":\"_etsTarget\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_taggingFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_platformPercentage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_relayerPercentage\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"paid\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"platformPercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxiableUUID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"relayerPercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_taggingRecordId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"_tagIds\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"_tagger\",\"type\":\"address\"}],\"name\":\"removeTags\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_tagIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"_targetId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_recordType\",\"type\":\"string\"},{\"internalType\":\"address payable\",\"name\":\"_tagger\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_relayer\",\"type\":\"address\"}],\"name\":\"removeTagsWithCompositeKey\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"targetURI\",\"type\":\"string\"},{\"internalType\":\"string[]\",\"name\":\"tagStrings\",\"type\":\"string[]\"},{\"internalType\":\"string\",\"name\":\"recordType\",\"type\":\"string\"}],\"internalType\":\"struct IETS.TaggingRecordRawInput\",\"name\":\"_rawInput\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"_tagger\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_relayer\",\"type\":\"address\"}],\"name\":\"removeTagsWithRawInput\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_taggingRecordId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"_tagIds\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"_tagger\",\"type\":\"address\"}],\"name\":\"replaceTags\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_tagIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"_targetId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_recordType\",\"type\":\"string\"},{\"internalType\":\"address payable\",\"name\":\"_tagger\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_relayer\",\"type\":\"address\"}],\"name\":\"replaceTagsWithCompositeKey\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"targetURI\",\"type\":\"string\"},{\"internalType\":\"string[]\",\"name\":\"tagStrings\",\"type\":\"string[]\"},{\"internalType\":\"string\",\"name\":\"recordType\",\"type\":\"string\"}],\"internalType\":\"struct IETS.TaggingRecordRawInput\",\"name\":\"_rawInput\",\"type\":\"tuple\"},{\"internalType\":\"address payable\",\"name\":\"_tagger\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_relayer\",\"type\":\"address\"}],\"name\":\"replaceTagsWithRawInput\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IETSAccessControls\",\"name\":\"_accessControls\",\"type\":\"address\"}],\"name\":\"setAccessControls\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_platformPercentage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_relayerPercentage\",\"type\":\"uint256\"}],\"name\":\"setPercentages\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"}],\"name\":\"setTaggingFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"taggingFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_taggingRecordId\",\"type\":\"uint256\"}],\"name\":\"taggingRecordExists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_targetId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_recordType\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_relayer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tagger\",\"type\":\"address\"}],\"name\":\"taggingRecordExistsByCompositeKey\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"targetURI\",\"type\":\"string\"},{\"internalType\":\"string[]\",\"name\":\"tagStrings\",\"type\":\"string[]\"},{\"internalType\":\"string\",\"name\":\"recordType\",\"type\":\"string\"}],\"internalType\":\"struct IETS.TaggingRecordRawInput\",\"name\":\"_rawInput\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"_relayer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tagger\",\"type\":\"address\"}],\"name\":\"taggingRecordExistsByRawInput\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"taggingRecords\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"targetId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"recordType\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"relayer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tagger\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"totalDue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_due\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"upgradeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"appendTags(uint256,uint256[],address)\":{\"params\":{\"_tagIds\":\"Array of CTAG token Ids.\",\"_tagger\":\"Address of that calls Relayer to tag a targetURI.\",\"_taggingRecordId\":\"tagging record being updated.\"}},\"applyTagsWithCompositeKey(uint256[],uint256,string,address,address)\":{\"params\":{\"_recordType\":\"Arbitrary identifier for type of tagging record.\",\"_relayer\":\"Address of Relayer contract that facilitated tagging record.\",\"_tagIds\":\"Array of CTAG token Ids.\",\"_tagger\":\"Address of that calls Relayer to create tagging record.\",\"_targetId\":\"targetId of the URI being tagged. See ETSTarget.sol\"}},\"applyTagsWithRawInput((string,string[],string),address,address)\":{\"params\":{\"_rawInput\":\"Raw client input data formed as TaggingRecordRawInput struct.\",\"_relayer\":\"Address of Relayer contract that facilitated tagging record\",\"_tagger\":\"Address that calls Relayer to tag a targetURI.\"}},\"computeTaggingFee(uint256,uint256[],uint8)\":{\"params\":{\"_action\":\"Integer representing action to be performed according to enum TaggingAction.\",\"_tagIds\":\"Array of CTAG token Ids.\",\"_taggingRecordId\":\"Id of tagging record.\"},\"returns\":{\"fee\":\"Calculated tagging fee in ETH/Matic\",\"tagCount\":\"Number of new tags being added to tagging record.\"}},\"computeTaggingFeeFromCompositeKey(uint256[],uint256,string,address,address,uint8)\":{\"params\":{\"_action\":\"Integer representing action to be performed according to enum TaggingAction.\",\"_relayer\":\"Address of tagging record Relayer contract.\",\"_tagIds\":\"Array of CTAG token Ids.\",\"_tagger\":\"Address interacting with Relayer to tag content (\\\"Tagger\\\").\"},\"returns\":{\"fee\":\"Calculated tagging fee in ETH/Matic\",\"tagCount\":\"Number of new tags being added to tagging record.\"}},\"computeTaggingFeeFromRawInput((string,string[],string),address,address,uint8)\":{\"params\":{\"_action\":\"Integer representing action to be performed according to enum TaggingAction.\",\"_rawInput\":\"Raw client input data formed as TaggingRecordRawInput struct.\",\"_relayer\":\"Address of tagging record Relayer contract.\",\"_tagger\":\"Address interacting with Relayer to tag content (\\\"Tagger\\\").\"},\"returns\":{\"fee\":\"Calculated tagging fee in ETH/Matic\",\"tagCount\":\"Number of new tags being added to tagging record.\"}},\"computeTaggingRecordIdFromCompositeKey(uint256,string,address,address)\":{\"params\":{\"_recordType\":\"Arbitrary identifier for type of tagging record.\",\"_relayer\":\"Address of tagging record Relayer contract.\",\"_tagger\":\"Address interacting with Relayer to tag content (\\\"Tagger\\\").\",\"_targetId\":\"Id of target being tagged (see ETSTarget.sol).\"},\"returns\":{\"taggingRecordId\":\"Unique identifier for a tagging record.\"}},\"computeTaggingRecordIdFromRawInput((string,string[],string),address,address)\":{\"params\":{\"_rawInput\":\"Raw client input data formed as TaggingRecordRawInput struct.\",\"_relayer\":\"Address of tagging record Relayer contract.\",\"_tagger\":\"Address interacting with Relayer to tag content (\\\"Tagger\\\").\"},\"returns\":{\"taggingRecordId\":\"Unique identifier for a tagging record.\"}},\"constructor\":{\"custom:oz-upgrades-unsafe-allow\":\"constructor\"},\"createTag(string,address)\":{\"params\":{\"_creator\":\"Address credited with creating CTAG.\",\"_tag\":\"Tag string.\"},\"returns\":{\"_tokenId\":\"Id of CTAG token.\"}},\"createTaggingRecord(uint256[],uint256,string,address)\":{\"params\":{\"_recordType\":\"Arbitrary identifier for type of tagging record.\",\"_tagIds\":\"Array of CTAG token Ids.\",\"_tagger\":\"Address calling Relayer contract to create tagging record.\",\"_targetId\":\"targetId of the URI being tagged. See ETSTarget.sol\"}},\"drawDown(address)\":{\"params\":{\"_account\":\"Address of account being drawn down and which will receive the funds.\"}},\"getOrCreateTagId(string,address)\":{\"params\":{\"_creator\":\"Address credited with creating CTAG.\",\"_tag\":\"Tag string.\"},\"returns\":{\"tokenId\":\"Id of CTAG token.\"}},\"getTaggingRecordFromCompositeKey(uint256,string,address,address)\":{\"params\":{\"_recordType\":\"Arbitrary identifier for type of tagging record.\",\"_relayer\":\"Address of Relayer contract that wrote tagging record.\",\"_tagger\":\"Address of wallet that initiated tagging record via relayer.\",\"_targetId\":\"Id of target being tagged.\"},\"returns\":{\"recordType\":\"Type of tagging record.\",\"relayer\":\"Address of tagging record Relayer contract.\",\"tagIds\":\"CTAG token ids.\",\"tagger\":\"Address interacting with Relayer to tag content (\\\"Tagger\\\").\",\"targetId\":\"TargetId that was tagged.\"}},\"getTaggingRecordFromId(uint256)\":{\"params\":{\"_id\":\"taggingRecordId.\"},\"returns\":{\"recordType\":\"Type of tagging record.\",\"relayer\":\"Address of tagging record Relayer contract.\",\"tagIds\":\"CTAG token ids.\",\"tagger\":\"Address interacting with Relayer to tag content (\\\"Tagger\\\").\",\"targetId\":\"TargetId that was tagged.\"}},\"getTaggingRecordFromRawInput((string,string[],string),address,address)\":{\"params\":{\"_rawInput\":\"Raw client input data formed as TaggingRecordRawInput struct.\",\"_relayer\":\"Address of tagging record Relayer contract.\",\"_tagger\":\"Address interacting with Relayer to tag content (\\\"Tagger\\\").\"},\"returns\":{\"recordType\":\"Type of tagging record.\",\"relayer\":\"Address of tagging record Relayer contract.\",\"tagIds\":\"CTAG token ids.\",\"tagger\":\"Address interacting with Relayer to tag content (\\\"Tagger\\\").\",\"targetId\":\"TargetId that was tagged.\"}},\"proxiableUUID()\":{\"details\":\"Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate the implementation's compatibility when performing an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\"},\"removeTags(uint256,uint256[],address)\":{\"params\":{\"_tagIds\":\"Array of CTAG token Ids.\",\"_tagger\":\"Address of that calls Relayer to tag a targetURI.\",\"_taggingRecordId\":\"tagging record being updated.\"}},\"removeTagsWithCompositeKey(uint256[],uint256,string,address,address)\":{\"params\":{\"_recordType\":\"Arbitrary identifier for type of tagging record.\",\"_relayer\":\"Address of Relayer contract that facilitated tagging record.\",\"_tagIds\":\"Array of CTAG token Ids.\",\"_tagger\":\"Address of that calls Relayer to create tagging record.\",\"_targetId\":\"targetId of the URI being tagged. See ETSTarget.sol\"}},\"removeTagsWithRawInput((string,string[],string),address,address)\":{\"params\":{\"_rawInput\":\"Raw client input data formed as TaggingRecordRawInput struct.\",\"_relayer\":\"Address of Relayer contract that facilitated tagging record.\",\"_tagger\":\"Address that calls Relayer to tag a targetURI.\"}},\"replaceTags(uint256,uint256[],address)\":{\"params\":{\"_tagIds\":\"Array of CTAG token Ids.\",\"_tagger\":\"Address of that calls Relayer to tag a targetURI.\",\"_taggingRecordId\":\"tagging record being updated.\"}},\"replaceTagsWithCompositeKey(uint256[],uint256,string,address,address)\":{\"params\":{\"_recordType\":\"Arbitrary identifier for type of tagging record.\",\"_relayer\":\"Address of Relayer contract that facilitated tagging record.\",\"_tagIds\":\"Array of CTAG token Ids.\",\"_tagger\":\"Address of that calls Relayer to create tagging record.\",\"_targetId\":\"targetId of the URI being tagged. See ETSTarget.sol\"}},\"replaceTagsWithRawInput((string,string[],string),address,address)\":{\"params\":{\"_rawInput\":\"Raw client input data formed as TaggingRecordRawInput struct.\",\"_relayer\":\"Address of Relayer contract that facilitated tagging record.\",\"_tagger\":\"Address that calls Relayer to tag a targetURI.\"}},\"setAccessControls(address)\":{\"params\":{\"_accessControls\":\"Address of ETSAccessControls contract.\"}},\"setPercentages(uint256,uint256)\":{\"params\":{\"_platformPercentage\":\"percentage for platform.\",\"_relayerPercentage\":\"percentage for relayer.\"}},\"setTaggingFee(uint256)\":{\"params\":{\"_fee\":\"Value of the fee in WEI.\"}},\"taggingRecordExists(uint256)\":{\"params\":{\"_taggingRecordId\":\"taggingRecordId.\"},\"returns\":{\"_0\":\"boolean; true for exists, false for not.\"}},\"taggingRecordExistsByCompositeKey(uint256,string,address,address)\":{\"params\":{\"_recordType\":\"Arbitrary identifier for type of tagging record.\",\"_relayer\":\"Address of Relayer contract that wrote tagging record.\",\"_tagger\":\"Address of wallet that initiated tagging record via relayer.\",\"_targetId\":\"Id of target being tagged.\"},\"returns\":{\"_0\":\"boolean; true for exists, false for not.\"}},\"taggingRecordExistsByRawInput((string,string[],string),address,address)\":{\"params\":{\"_rawInput\":\"Raw client input data formed as TaggingRecordRawInput struct.\",\"_relayer\":\"Address of tagging record Relayer contract.\",\"_tagger\":\"Address interacting with Relayer to tag content (\\\"Tagger\\\").\"},\"returns\":{\"_0\":\"boolean; true for exists, false for not.\"}},\"totalDue(address)\":{\"params\":{\"_account\":\"Address of the account being queried.\"},\"returns\":{\"_due\":\"Amount of WEI in MATIC due to account.\"}},\"upgradeTo(address)\":{\"custom:oz-upgrades-unsafe-allow-reachable\":\"delegatecall\",\"details\":\"Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"},\"upgradeToAndCall(address,bytes)\":{\"custom:oz-upgrades-unsafe-allow-reachable\":\"delegatecall\",\"details\":\"Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"}},\"stateVariables\":{\"accrued\":{\"details\":\"Map for holding amount accrued to participant address wallets.\"},\"etsAccessControls\":{\"details\":\"ETS access controls contract.\"},\"etsTarget\":{\"details\":\"ETS Targets contract.\"},\"etsToken\":{\"details\":\"CTAG erc-721 token contract.\"},\"paid\":{\"details\":\"Map for holding lifetime amount drawn down from accrued by participants.\"},\"platformPercentage\":{\"details\":\"Percentage of tagging fee allocated to ETS.\"},\"relayerPercentage\":{\"details\":\"Percentage of tagging fee allocated to Relayer.\"},\"taggingFee\":{\"details\":\"Fee in MATIC Collected by ETS for tagging.\"},\"taggingRecords\":{\"details\":\"Map of tagging id to tagging record.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"NAME()\":{\"notice\":\"Public constants\"},\"appendTags(uint256,uint256[],address)\":{\"notice\":\"Append one or more tags to a tagging record.\"},\"applyTagsWithCompositeKey(uint256[],uint256,string,address,address)\":{\"notice\":\"Apply one or more tags to a targetId using using tagging record composite key. Records new ETS Tagging Record to the blockchain or appends tags if Tagging Record already exists. CTAGs and targetId are created if they don't exist. Caller must be Relayer contract.\"},\"applyTagsWithRawInput((string,string[],string),address,address)\":{\"notice\":\"Apply one or more tags to a targetURI using tagging record raw client input data. Like it's sister function applyTagsWithCompositeKey, records new ETS Tagging Record or appends tags to an existing record if found to already exist. This function differs in that it creates new ETS target records and CTAG tokens for novel targetURIs and hastag strings respectively. This function can only be called by Relayer contracts. If this is a new tagging record, ETS will use msg.sender, if it's an existing tagging record, ETS will use _relayer parameter.\"},\"computeTaggingFee(uint256,uint256[],uint8)\":{\"notice\":\"Compute tagging fee for CTAGs, tagging record id and desired action. If the global, service wide tagging fee is set (see ETS.taggingFee() & ETS.setTaggingFee()) ETS charges a per tag for all new tags applied to a tagging record. This applies to both new tagging records and modified tagging records. Computing the tagging fee involves checking to see if a tagging record exists and if so, given the desired action (append or replace) determining the number of new tags being added and multiplying by the ETS per tag fee.\"},\"computeTaggingFeeFromCompositeKey(uint256[],uint256,string,address,address,uint8)\":{\"notice\":\"Compute tagging fee for CTAGs, tagging record composite key and desired action.\"},\"computeTaggingFeeFromRawInput((string,string[],string),address,address,uint8)\":{\"notice\":\"Compute tagging fee for raw input and desired action.\"},\"computeTaggingRecordIdFromCompositeKey(uint256,string,address,address)\":{\"notice\":\"Compute & return a taggingRecordId. Every TaggingRecord in ETS is mapped to by it's taggingRecordId. This Id is a composite key composed of targetId, recordType, relayer contract address and tagger address hashed and cast as a uint256.\"},\"computeTaggingRecordIdFromRawInput((string,string[],string),address,address)\":{\"notice\":\"Compute a taggingRecordId from raw input.\"},\"createTag(string,address)\":{\"notice\":\"Create CTAG token from tag string. Reverts if tag exists or is invalid. Only ETS Relayer contracts may call this function.\"},\"createTaggingRecord(uint256[],uint256,string,address)\":{\"notice\":\"Create a new tagging record. Requirements:   - Caller must be relayer contract.   - CTAG(s) and TargetId must exist.\"},\"drawDown(address)\":{\"notice\":\"Function for withdrawing funds from an accrual account. Can be called by the account owner or on behalf of the account. Does nothing when there is nothing due to the account.\"},\"getOrCreateTagId(string,address)\":{\"notice\":\"Get or create CTAG token from tag string. Combo function that accepts a tag string and returns corresponding CTAG token Id if it exists, or if it doesn't exist, creates a new CTAG and then returns corresponding Id. Only ETS Relayer contracts may call this function.\"},\"getTaggingRecordFromCompositeKey(uint256,string,address,address)\":{\"notice\":\"Retrieve a tagging record from composite key parts.\"},\"getTaggingRecordFromId(uint256)\":{\"notice\":\"Retrieve a tagging record from Id.\"},\"getTaggingRecordFromRawInput((string,string[],string),address,address)\":{\"notice\":\"Retrieve a tagging record from it's raw input.\"},\"removeTags(uint256,uint256[],address)\":{\"notice\":\"Remove one or more tags from a tagging record.\"},\"removeTagsWithCompositeKey(uint256[],uint256,string,address,address)\":{\"notice\":\"Remove one or more tags from a tagging record using composite key for record lookup.\"},\"removeTagsWithRawInput((string,string[],string),address,address)\":{\"notice\":\"Remove one or more tags from a tagging record using raw data for record lookup.\"},\"replaceTags(uint256,uint256[],address)\":{\"notice\":\"Replaces tags in tagging record. This function overwrites the tags in a tagging record with the supplied tags, only charging for the new tags in the replacement set.\"},\"replaceTagsWithCompositeKey(uint256[],uint256,string,address,address)\":{\"notice\":\"Replace entire tag set in tagging record using composite key for record lookup. This function overwrites the tags in a tagging record with the supplied tags, only charging for the new tags in the replacement set.\"},\"replaceTagsWithRawInput((string,string[],string),address,address)\":{\"notice\":\"Replace entire tag set in tagging record using raw data for record lookup. If supplied tag strings don't have CTAGs, new ones are minted.\"},\"setAccessControls(address)\":{\"notice\":\"Sets ETSAccessControls on the ETSTarget contract so functions can be restricted to ETS platform only. Note Caller of this function must be deployer or pre-set as admin of new contract.\"},\"setPercentages(uint256,uint256)\":{\"notice\":\"Admin functionality for updating the percentages.\"},\"setTaggingFee(uint256)\":{\"notice\":\"Sets the fee required to tag an NFT asset.\"},\"taggingRecordExists(uint256)\":{\"notice\":\"Check that a tagging record exsits by it's Id.\"},\"taggingRecordExistsByCompositeKey(uint256,string,address,address)\":{\"notice\":\"Check that a tagging record exists by it's componsite key parts.\"},\"taggingRecordExistsByRawInput((string,string[],string),address,address)\":{\"notice\":\"Check that a tagging record exists for given raw input.\"},\"totalDue(address)\":{\"notice\":\"Function to check how much MATIC has been accrued by an address factoring in amount paid out.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/ETS.sol\":\"ETS\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControlUpgradeable {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0xb8f5302f12138c5561362e88a78d061573e6298b7a1a5afe84a1e2c8d4d5aeaa\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/interfaces/IERC1967Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (interfaces/IERC1967.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC-1967: Proxy Storage Slots. This interface contains the events defined in the ERC.\\n *\\n * _Available since v4.8.3._\\n */\\ninterface IERC1967Upgradeable {\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Emitted when the beacon is changed.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n}\\n\",\"keccak256\":\"0x47d6e06872b12e72c79d1b5eb55842f860b5fb1207b2317c2358d2766b950a7b\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822ProxiableUpgradeable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x77c89f893e403efc6929ba842b7ccf6534d4ffe03afe31670b4a528c0ad78c0f\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/ERC1967/ERC1967Upgrade.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeaconUpgradeable.sol\\\";\\nimport \\\"../../interfaces/IERC1967Upgradeable.sol\\\";\\nimport \\\"../../interfaces/draft-IERC1822Upgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../../utils/StorageSlotUpgradeable.sol\\\";\\nimport {Initializable} from \\\"../utils/Initializable.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract ERC1967UpgradeUpgradeable is Initializable, IERC1967Upgradeable {\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    function __ERC1967Upgrade_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC1967Upgrade_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(AddressUpgradeable.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(address newImplementation, bytes memory data, bool forceCall) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            AddressUpgradeable.functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallUUPS(address newImplementation, bytes memory data, bool forceCall) internal {\\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\\n        if (StorageSlotUpgradeable.getBooleanSlot(_ROLLBACK_SLOT).value) {\\n            _setImplementation(newImplementation);\\n        } else {\\n            try IERC1822ProxiableUpgradeable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n                require(slot == _IMPLEMENTATION_SLOT, \\\"ERC1967Upgrade: unsupported proxiableUUID\\\");\\n            } catch {\\n                revert(\\\"ERC1967Upgrade: new implementation is not UUPS\\\");\\n            }\\n            _upgradeToAndCall(newImplementation, data, forceCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(AddressUpgradeable.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            AddressUpgradeable.isContract(IBeaconUpgradeable(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(address newBeacon, bytes memory data, bool forceCall) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            AddressUpgradeable.functionDelegateCall(IBeaconUpgradeable(newBeacon).implementation(), data);\\n        }\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x7795808e3899c805254e3ae58074b20f799b466e3f43e057e47bedee5fb771f8\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeaconUpgradeable {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0x24b86ac8c005b8c654fbf6ac34a5a4f61580d7273541e83e013e89d66fbf0908\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x89be10e757d242e9b18d5a32c9fbe2019f6d63052bbe46397a430a1d60d7f794\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/UUPSUpgradeable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../interfaces/draft-IERC1822Upgradeable.sol\\\";\\nimport \\\"../ERC1967/ERC1967UpgradeUpgradeable.sol\\\";\\nimport {Initializable} from \\\"./Initializable.sol\\\";\\n\\n/**\\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\\n *\\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\\n * `UUPSUpgradeable` with a custom implementation of upgrades.\\n *\\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract UUPSUpgradeable is Initializable, IERC1822ProxiableUpgradeable, ERC1967UpgradeUpgradeable {\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable state-variable-assignment\\n    address private immutable __self = address(this);\\n\\n    /**\\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\\n     * a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\\n     * function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\\n     * fail.\\n     */\\n    modifier onlyProxy() {\\n        require(address(this) != __self, \\\"Function must be called through delegatecall\\\");\\n        require(_getImplementation() == __self, \\\"Function must be called through active proxy\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Check that the execution is not being performed through a delegate call. This allows a function to be\\n     * callable on the implementing contract but not through proxies.\\n     */\\n    modifier notDelegated() {\\n        require(address(this) == __self, \\\"UUPSUpgradeable: must not be called through delegatecall\\\");\\n        _;\\n    }\\n\\n    function __UUPSUpgradeable_init() internal onlyInitializing {\\n    }\\n\\n    function __UUPSUpgradeable_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the\\n     * implementation. It is used to validate the implementation's compatibility when performing an upgrade.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\\n     */\\n    function proxiableUUID() external view virtual override notDelegated returns (bytes32) {\\n        return _IMPLEMENTATION_SLOT;\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     *\\n     * @custom:oz-upgrades-unsafe-allow-reachable delegatecall\\n     */\\n    function upgradeTo(address newImplementation) public virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, new bytes(0), false);\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\\n     * encoded in `data`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     *\\n     * @custom:oz-upgrades-unsafe-allow-reachable delegatecall\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes memory data) public payable virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, data, true);\\n    }\\n\\n    /**\\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\\n     * {upgradeTo} and {upgradeToAndCall}.\\n     *\\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\\n     *\\n     * ```solidity\\n     * function _authorizeUpgrade(address) internal override onlyOwner {}\\n     * ```\\n     */\\n    function _authorizeUpgrade(address newImplementation) internal virtual;\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xefb41f5c1a00249b7a99f0782f8c557865605426a3fb6e5fe9ae334293ae4f33\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == _ENTERED;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x2025ccf05f6f1f2fd4e078e552836f525a1864e3854ed555047cd732320ab29b\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721Upgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xbe63437e37e32162d5d11ea8f11a44378c092b4bcbb05b51a813fe4bf33297d4\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9c80f545915582e63fe206c6ce27cbe85a86fc10b9cd2a0e8c9488fb7c2ee422\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x75097e35253e7fb282ee4d7f27a80eaacfa759923185bf17302a89cbc059c5ef\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._\\n * _Available since v4.9 for `string`, `bytes`._\\n */\\nlibrary StorageSlotUpgradeable {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x07ac95acad040f1fb1f6120dd0aa5f702db69446e95f82613721879d30de0908\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\"},\"contracts/ETS.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n/**\\n * @title ETS\\n * @author Ethereum Tag Service <team@ets.xyz>\\n *\\n *  \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\n *  \\u2588\\u2588\\u2554\\u2550\\u2550\\u2550\\u2550\\u255d\\u255a\\u2550\\u2550\\u2588\\u2588\\u2554\\u2550\\u2550\\u255d\\u2588\\u2588\\u2554\\u2550\\u2550\\u2550\\u2550\\u255d\\n *  \\u2588\\u2588\\u2588\\u2588\\u2588\\u2557     \\u2588\\u2588\\u2551   \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\n *  \\u2588\\u2588\\u2554\\u2550\\u2550\\u255d     \\u2588\\u2588\\u2551   \\u255a\\u2550\\u2550\\u2550\\u2550\\u2588\\u2588\\u2551\\n *  \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557   \\u2588\\u2588\\u2551   \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2551\\n *  \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d   \\u255a\\u2550\\u255d   \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\n *\\n * @notice This is the core ETS tagging contract that records TaggingRecords to the blockchain.\\n * It also contains some governance functions around tagging fees as well as means for market\\n * participants to access accrued funds.\\n */\\n\\npragma solidity ^0.8.10;\\n\\nimport { IETS } from \\\"./interfaces/IETS.sol\\\";\\nimport { IETSToken } from \\\"./interfaces/IETSToken.sol\\\";\\nimport { IETSTarget } from \\\"./interfaces/IETSTarget.sol\\\";\\nimport { IETSAccessControls } from \\\"./interfaces/IETSAccessControls.sol\\\";\\nimport { UintArrayUtils } from \\\"./libraries/UintArrayUtils.sol\\\";\\nimport { ContextUpgradeable } from \\\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\\\";\\nimport { Initializable } from \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport { UUPSUpgradeable } from \\\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\\\";\\nimport { ReentrancyGuardUpgradeable } from \\\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\\\";\\n\\ncontract ETS is IETS, Initializable, ContextUpgradeable, ReentrancyGuardUpgradeable, UUPSUpgradeable {\\n    using UintArrayUtils for uint256[];\\n\\n    // Public variables\\n\\n    /// @dev ETS access controls contract.\\n    IETSAccessControls public etsAccessControls;\\n\\n    /// @dev CTAG erc-721 token contract.\\n    IETSToken public etsToken;\\n\\n    /// @dev ETS Targets contract.\\n    IETSTarget public etsTarget;\\n\\n    /// @dev Fee in MATIC Collected by ETS for tagging.\\n    uint256 public override taggingFee;\\n\\n    /// @dev Percentage of tagging fee allocated to ETS.\\n    uint256 public platformPercentage;\\n\\n    /// @dev Percentage of tagging fee allocated to Relayer.\\n    uint256 public relayerPercentage;\\n\\n    /// @dev Map for holding amount accrued to participant address wallets.\\n    mapping(address => uint256) public accrued;\\n\\n    /// @dev Map for holding lifetime amount drawn down from accrued by participants.\\n    mapping(address => uint256) public paid;\\n\\n    /// @dev Map of tagging id to tagging record.\\n    mapping(uint256 => TaggingRecord) public taggingRecords;\\n\\n    /// Public constants\\n\\n    string public constant NAME = \\\"ETS Core\\\";\\n    string public constant VERSION = \\\"0.0.1\\\";\\n    uint256 public constant MODULO = 100;\\n\\n    /// Modifiers\\n\\n    /// @dev When applied to a method, only allows execution when the sender has the admin role.\\n    modifier onlyAdmin() {\\n        require(etsAccessControls.isAdmin(_msgSender()), \\\"Caller not Administrator\\\");\\n        _;\\n    }\\n\\n    modifier onlyRelayer() {\\n        require(etsAccessControls.isRelayer(_msgSender()), \\\"Caller not Relayer\\\");\\n        _;\\n    }\\n\\n    // ============ UUPS INTERFACE ============\\n\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\n    constructor() {\\n        _disableInitializers();\\n    }\\n\\n    function initialize(\\n        IETSAccessControls _etsAccessControls,\\n        IETSToken _etsToken,\\n        IETSTarget _etsTarget,\\n        uint256 _taggingFee,\\n        uint256 _platformPercentage,\\n        uint256 _relayerPercentage\\n    ) public initializer {\\n        __ReentrancyGuard_init();\\n        etsAccessControls = _etsAccessControls;\\n        etsToken = _etsToken;\\n        etsTarget = _etsTarget;\\n        setTaggingFee(_taggingFee);\\n        setPercentages(_platformPercentage, _relayerPercentage);\\n    }\\n\\n    // Ensure that only address with admin role can upgrade.\\n    // solhint-disable-next-line\\n    function _authorizeUpgrade(address) internal override onlyAdmin {}\\n\\n    // ============ OWNER INTERFACE ============\\n\\n    /**\\n     * @notice Sets ETSAccessControls on the ETSTarget contract so functions can be\\n     * restricted to ETS platform only. Note Caller of this function must be deployer\\n     * or pre-set as admin of new contract.\\n     *\\n     * @param _accessControls Address of ETSAccessControls contract.\\n     */\\n    function setAccessControls(IETSAccessControls _accessControls) public onlyAdmin {\\n        require(address(_accessControls) != address(0), \\\"Address cannot be zero\\\");\\n        require(_accessControls.isAdmin(_msgSender()), \\\"Caller not admin in new contract\\\");\\n        etsAccessControls = _accessControls;\\n        emit AccessControlsSet(address(etsAccessControls));\\n    }\\n\\n    /// @notice Sets the fee required to tag an NFT asset.\\n    /// @param _fee Value of the fee in WEI.\\n    function setTaggingFee(uint256 _fee) public onlyAdmin {\\n        taggingFee = _fee;\\n        emit TaggingFeeSet(taggingFee);\\n    }\\n\\n    /// @notice Admin functionality for updating the percentages.\\n    /// @param _platformPercentage percentage for platform.\\n    /// @param _relayerPercentage percentage for relayer.\\n    function setPercentages(uint256 _platformPercentage, uint256 _relayerPercentage) public onlyAdmin {\\n        require(_platformPercentage + _relayerPercentage <= 100, \\\"percentages must not be over 100\\\");\\n        platformPercentage = _platformPercentage;\\n        relayerPercentage = _relayerPercentage;\\n\\n        emit PercentagesSet(platformPercentage, relayerPercentage);\\n    }\\n\\n    // ============ PUBLIC INTERFACE ============\\n\\n    /// @inheritdoc IETS\\n    function createTaggingRecord(\\n        uint256[] memory _tagIds,\\n        uint256 _targetId,\\n        string calldata _recordType,\\n        address _tagger\\n    ) public payable nonReentrant onlyRelayer {\\n        uint256 tagCount = _tagIds.length;\\n        require(tagCount > 0, \\\"No tags supplied\\\");\\n        for (uint256 i; i < tagCount; ++i) {\\n            require(etsToken.tagExistsById(_tagIds[i]), \\\"Invalid tagId\\\");\\n        }\\n        require(bytes(_recordType).length >= 3 && bytes(_recordType).length < 31, \\\"Record type too long\\\");\\n        require(etsTarget.targetExistsById(_targetId), \\\"Invalid targetId\\\");\\n        _processTaggingFees(_tagIds);\\n        _createTaggingRecord(_tagIds, _targetId, _recordType, _msgSender(), _tagger);\\n    }\\n\\n    /// @inheritdoc IETS\\n    function getOrCreateTagId(\\n        string calldata _tag,\\n        address payable _creator\\n    ) public payable onlyRelayer returns (uint256 tokenId) {\\n        return etsToken.getOrCreateTagId(_tag, payable(_msgSender()), _creator);\\n    }\\n\\n    /// @inheritdoc IETS\\n    function createTag(\\n        string calldata _tag,\\n        address payable _creator\\n    ) public payable nonReentrant onlyRelayer returns (uint256 _tokenId) {\\n        return etsToken.createTag(_tag, payable(_msgSender()), _creator);\\n    }\\n\\n    /// @inheritdoc IETS\\n    function applyTagsWithRawInput(\\n        TaggingRecordRawInput calldata _rawInput,\\n        address payable _tagger,\\n        address _relayer\\n    ) public payable onlyRelayer {\\n        // Derive tagIds for the tagStrings.\\n        uint256 tagCount = _rawInput.tagStrings.length;\\n        require(tagCount > 0, \\\"No tags supplied\\\");\\n\\n        uint256[] memory tagIds = new uint256[](tagCount);\\n        for (uint256 i; i < tagCount; ++i) {\\n            tagIds[i] = getOrCreateTagId(_rawInput.tagStrings[i], _tagger);\\n        }\\n\\n        uint256 taggingRecordId = computeTaggingRecordIdFromRawInput(_rawInput, _relayer, _tagger);\\n\\n        if (taggingRecordExists(taggingRecordId)) {\\n            appendTags(taggingRecordId, tagIds, _tagger);\\n        } else {\\n            // Derive targetId from targetURI. Will revert if targetURI is empty.\\n            uint256 targetId = etsTarget.getOrCreateTargetId(_rawInput.targetURI);\\n            // Require new tagging records be inserted by calling relayer.\\n            createTaggingRecord(tagIds, targetId, _rawInput.recordType, _tagger);\\n        }\\n    }\\n\\n    /// @inheritdoc IETS\\n    function applyTagsWithCompositeKey(\\n        uint256[] memory _tagIds,\\n        uint256 _targetId,\\n        string calldata _recordType,\\n        address payable _tagger,\\n        address _relayer\\n    ) public payable onlyRelayer {\\n        uint256 tagCount = _tagIds.length;\\n        require(tagCount > 0, \\\"No tags supplied\\\");\\n\\n        uint256 taggingRecordId = computeTaggingRecordIdFromCompositeKey(_targetId, _recordType, _relayer, _tagger);\\n        if (taggingRecordExists(taggingRecordId)) {\\n            appendTags(taggingRecordId, _tagIds, _tagger);\\n        } else {\\n            createTaggingRecord(_tagIds, _targetId, _recordType, _tagger);\\n        }\\n    }\\n\\n    /// @inheritdoc IETS\\n    function replaceTagsWithRawInput(\\n        TaggingRecordRawInput calldata _rawInput,\\n        address payable _tagger,\\n        address _relayer\\n    ) public payable onlyRelayer {\\n        uint256 tagCount = _rawInput.tagStrings.length;\\n        require(tagCount > 0, \\\"No tags supplied\\\");\\n\\n        uint256[] memory tagIds = new uint256[](tagCount);\\n        for (uint256 i; i < tagCount; ++i) {\\n            // New tags are created via calling relayer.\\n            tagIds[i] = getOrCreateTagId(_rawInput.tagStrings[i], _tagger);\\n        }\\n\\n        replaceTags(computeTaggingRecordIdFromRawInput(_rawInput, _relayer, _tagger), tagIds, _tagger);\\n    }\\n\\n    /// @inheritdoc IETS\\n    function replaceTagsWithCompositeKey(\\n        uint256[] calldata _tagIds,\\n        uint256 _targetId,\\n        string memory _recordType,\\n        address payable _tagger,\\n        address _relayer\\n    ) public payable onlyRelayer {\\n        replaceTags(\\n            computeTaggingRecordIdFromCompositeKey(_targetId, _recordType, _relayer, _tagger),\\n            _tagIds,\\n            _tagger\\n        );\\n    }\\n\\n    /// @inheritdoc IETS\\n    function removeTagsWithRawInput(\\n        TaggingRecordRawInput calldata _rawInput,\\n        address _tagger,\\n        address _relayer\\n    ) public onlyRelayer {\\n        uint256 rawTagCount = _rawInput.tagStrings.length;\\n        uint256[] memory tagIds = new uint256[](rawTagCount);\\n        for (uint256 i; i < rawTagCount; ++i) {\\n            tagIds[i] = etsToken.computeTagId(_rawInput.tagStrings[i]);\\n        }\\n        removeTags(computeTaggingRecordIdFromRawInput(_rawInput, _relayer, _tagger), tagIds, _tagger);\\n    }\\n\\n    /// @inheritdoc IETS\\n    function removeTagsWithCompositeKey(\\n        uint256[] calldata _tagIds,\\n        uint256 _targetId,\\n        string memory _recordType,\\n        address payable _tagger,\\n        address _relayer\\n    ) public onlyRelayer {\\n        removeTags(computeTaggingRecordIdFromCompositeKey(_targetId, _recordType, _relayer, _tagger), _tagIds, _tagger);\\n    }\\n\\n    /// @inheritdoc IETS\\n    function appendTags(\\n        uint256 _taggingRecordId,\\n        uint256[] memory _tagIds,\\n        address _tagger\\n    ) public payable nonReentrant onlyRelayer {\\n        require(_tagIds.length > 0, \\\"No tags supplied\\\");\\n        require(taggingRecords[_taggingRecordId].tagger == _tagger, \\\"Not authorized\\\");\\n\\n        // Filter out new tags from the supplied tags.\\n        _tagIds = UintArrayUtils.difference(_tagIds, taggingRecords[_taggingRecordId].tagIds);\\n\\n        if (_tagIds.length > 0) {\\n            _processTaggingFees(_tagIds);\\n            _appendTags(_taggingRecordId, _tagIds);\\n        }\\n    }\\n\\n    /// @inheritdoc IETS\\n    function replaceTags(\\n        uint256 _taggingRecordId,\\n        uint256[] memory _tagIds,\\n        address _tagger\\n    ) public payable nonReentrant onlyRelayer {\\n        require(_tagIds.length > 0, \\\"No tags supplied\\\");\\n        require(taggingRecords[_taggingRecordId].tagger == _tagger, \\\"Not authorized\\\");\\n\\n        // Find all the tags NOT SHARED by the tagging record and the replacement set.\\n        uint256[] memory notShared = UintArrayUtils.difference(taggingRecords[_taggingRecordId].tagIds, _tagIds);\\n\\n        // Remove these from the tagging record.\\n        if (notShared.length > 0) {\\n            _removeTags(_taggingRecordId, notShared);\\n        }\\n\\n        // Filter out new tags from the replacement set\\n        _tagIds = UintArrayUtils.difference(_tagIds, taggingRecords[_taggingRecordId].tagIds);\\n\\n        if (_tagIds.length > 0) {\\n            _processTaggingFees(_tagIds);\\n            _appendTags(_taggingRecordId, _tagIds);\\n        }\\n    }\\n\\n    /// @inheritdoc IETS\\n    function removeTags(\\n        uint256 _taggingRecordId,\\n        uint256[] memory _tagIds,\\n        address _tagger\\n    ) public nonReentrant onlyRelayer {\\n        require(_tagIds.length > 0, \\\"No tags supplied\\\");\\n        require(taggingRecords[_taggingRecordId].tagger == _tagger, \\\"Not authorized\\\");\\n\\n        // Find tags shared by supplied tags and tagging record tags.\\n        _tagIds = UintArrayUtils.intersect(_tagIds, taggingRecords[_taggingRecordId].tagIds);\\n\\n        if (_tagIds.length > 0) {\\n            // No tagging fee when tags are removed.\\n            _removeTags(_taggingRecordId, _tagIds);\\n        }\\n    }\\n\\n    /// @inheritdoc IETS\\n    function drawDown(address payable _account) external nonReentrant {\\n        uint256 balanceDue = totalDue(_account);\\n        if (balanceDue > 0 && balanceDue <= address(this).balance) {\\n            paid[_account] = paid[_account] + balanceDue;\\n\\n            (bool success, ) = _account.call{ value: balanceDue }(\\\"\\\");\\n            require(success, \\\"Transfer failed.\\\");\\n\\n            emit FundsWithdrawn(_account, balanceDue);\\n        }\\n    }\\n\\n    // ============ PUBLIC VIEW FUNCTIONS ============\\n\\n    /// @inheritdoc IETS\\n    function computeTaggingRecordIdFromRawInput(\\n        TaggingRecordRawInput memory _rawInput,\\n        address _relayer,\\n        address _tagger\\n    ) public view returns (uint256 taggingRecordId) {\\n        return\\n            computeTaggingRecordIdFromCompositeKey(\\n                etsTarget.computeTargetId(_rawInput.targetURI),\\n                _rawInput.recordType,\\n                _relayer,\\n                _tagger\\n            );\\n    }\\n\\n    /// @inheritdoc IETS\\n    function computeTaggingRecordIdFromCompositeKey(\\n        uint256 _targetId,\\n        string memory _recordType,\\n        address _relayer,\\n        address _tagger\\n    ) public pure returns (uint256 taggingRecordId) {\\n        taggingRecordId = uint256(keccak256(abi.encodePacked(_targetId, _recordType, _relayer, _tagger)));\\n    }\\n\\n    /// @inheritdoc IETS\\n    function computeTaggingFeeFromRawInput(\\n        TaggingRecordRawInput calldata _rawInput,\\n        address _relayer,\\n        address _tagger,\\n        TaggingAction _action\\n    ) public view returns (uint256 fee, uint256 tagCount) {\\n        uint256 rawTagCount = _rawInput.tagStrings.length;\\n        uint256[] memory tagIds = new uint256[](rawTagCount);\\n        for (uint256 i; i < rawTagCount; ++i) {\\n            tagIds[i] = etsToken.computeTagId(_rawInput.tagStrings[i]);\\n        }\\n        return computeTaggingFee(computeTaggingRecordIdFromRawInput(_rawInput, _relayer, _tagger), tagIds, _action);\\n    }\\n\\n    /// @inheritdoc IETS\\n    function computeTaggingFeeFromCompositeKey(\\n        uint256[] memory _tagIds,\\n        uint256 _targetId,\\n        string calldata _recordType,\\n        address _relayer,\\n        address _tagger,\\n        TaggingAction _action\\n    ) public view returns (uint256 fee, uint256 tagCount) {\\n        return\\n            computeTaggingFee(\\n                computeTaggingRecordIdFromCompositeKey(_targetId, _recordType, _relayer, _tagger),\\n                _tagIds,\\n                _action\\n            );\\n    }\\n\\n    /// @inheritdoc IETS\\n    function computeTaggingFee(\\n        uint256 _taggingRecordId,\\n        uint256[] memory _tagIds,\\n        TaggingAction _action\\n    ) public view returns (uint256 fee, uint256 tagCount) {\\n        // Return quickly when no tagging record exists.\\n        if (!taggingRecordExists(_taggingRecordId)) {\\n            return (_computeTaggingFee(_tagIds.length), _tagIds.length);\\n        }\\n\\n        if (TaggingAction(_action) == TaggingAction.APPEND) {\\n            // remove tagging record tag ids from input tag ids to return number of new tags applied.\\n            _tagIds = UintArrayUtils.difference(_tagIds, taggingRecords[_taggingRecordId].tagIds);\\n        }\\n\\n        if (TaggingAction(_action) == TaggingAction.REPLACE) {\\n            // Remove tags from tagging record not in replacement tag set.\\n            uint256[] memory taggingRecordTags = taggingRecords[_taggingRecordId].tagIds;\\n            uint256[] memory tagsToRemove = UintArrayUtils.difference(taggingRecords[_taggingRecordId].tagIds, _tagIds);\\n            if (tagsToRemove.length > 0) {\\n                taggingRecordTags = UintArrayUtils.difference(taggingRecords[_taggingRecordId].tagIds, tagsToRemove);\\n            }\\n\\n            _tagIds = UintArrayUtils.difference(_tagIds, taggingRecordTags);\\n        }\\n\\n        if (TaggingAction(_action) == TaggingAction.REMOVE) {\\n            // Find tags shared by supplied tags and tagging record tags.\\n            _tagIds = UintArrayUtils.intersect(_tagIds, taggingRecords[_taggingRecordId].tagIds);\\n\\n            // No fee charged for removing tags at the present time, but still nice to give\\n            // clients a way to know how many tags will be removed.\\n            return (0, _tagIds.length);\\n        }\\n\\n        return (_computeTaggingFee(_tagIds.length), _tagIds.length);\\n    }\\n\\n    /// @inheritdoc IETS\\n    function getTaggingRecordFromRawInput(\\n        TaggingRecordRawInput memory _rawInput,\\n        address _relayer,\\n        address _tagger\\n    )\\n        public\\n        view\\n        returns (uint256[] memory tagIds, uint256 targetId, string memory recordType, address relayer, address tagger)\\n    {\\n        return\\n            this.getTaggingRecordFromId(\\n                computeTaggingRecordIdFromCompositeKey(\\n                    etsTarget.computeTargetId(_rawInput.targetURI),\\n                    _rawInput.recordType,\\n                    _relayer,\\n                    _tagger\\n                )\\n            );\\n    }\\n\\n    /// @inheritdoc IETS\\n    function getTaggingRecordFromCompositeKey(\\n        uint256 _targetId,\\n        string memory _recordType,\\n        address _relayer,\\n        address _tagger\\n    )\\n        public\\n        view\\n        returns (uint256[] memory tagIds, uint256 targetId, string memory recordType, address relayer, address tagger)\\n    {\\n        return\\n            this.getTaggingRecordFromId(\\n                computeTaggingRecordIdFromCompositeKey(_targetId, _recordType, _relayer, _tagger)\\n            );\\n    }\\n\\n    /// @inheritdoc IETS\\n    function getTaggingRecordFromId(\\n        uint256 _id\\n    )\\n        public\\n        view\\n        returns (uint256[] memory tagIds, uint256 targetId, string memory recordType, address relayer, address tagger)\\n    {\\n        TaggingRecord storage taggingRecord = taggingRecords[_id];\\n        return (\\n            taggingRecord.tagIds,\\n            taggingRecord.targetId,\\n            taggingRecord.recordType,\\n            taggingRecord.relayer,\\n            taggingRecord.tagger\\n        );\\n    }\\n\\n    /// @inheritdoc IETS\\n    function taggingRecordExistsByRawInput(\\n        TaggingRecordRawInput memory _rawInput,\\n        address _relayer,\\n        address _tagger\\n    ) public view returns (bool) {\\n        return\\n            taggingRecordExists(\\n                computeTaggingRecordIdFromCompositeKey(\\n                    etsTarget.computeTargetId(_rawInput.targetURI),\\n                    _rawInput.recordType,\\n                    _relayer,\\n                    _tagger\\n                )\\n            );\\n    }\\n\\n    /// @inheritdoc IETS\\n    function taggingRecordExistsByCompositeKey(\\n        uint256 _targetId,\\n        string memory _recordType,\\n        address _relayer,\\n        address _tagger\\n    ) public view returns (bool) {\\n        return taggingRecordExists(computeTaggingRecordIdFromCompositeKey(_targetId, _recordType, _relayer, _tagger));\\n    }\\n\\n    /// @inheritdoc IETS\\n    function taggingRecordExists(uint256 _taggingRecordId) public view returns (bool) {\\n        return taggingRecords[_taggingRecordId].targetId != 0 ? true : false;\\n    }\\n\\n    /// @inheritdoc IETS\\n    function totalDue(address _account) public view returns (uint256 _due) {\\n        return accrued[_account] - paid[_account];\\n    }\\n\\n    // ============ INTERNAL FUNCTIONS ============\\n\\n    /// @dev write a tagging record, mapping a taggingRecordId to a TaggingRecord struct.\\n    function _createTaggingRecord(\\n        uint256[] memory _tagIds,\\n        uint256 _targetId,\\n        string calldata _recordType,\\n        address _relayer,\\n        address _tagger\\n    ) private {\\n        uint256 taggingRecordId = computeTaggingRecordIdFromCompositeKey(_targetId, _recordType, _relayer, _tagger);\\n        taggingRecords[taggingRecordId] = TaggingRecord({\\n            tagIds: _tagIds,\\n            targetId: _targetId,\\n            recordType: _recordType,\\n            relayer: _relayer,\\n            tagger: _tagger\\n        });\\n\\n        emit TaggingRecordCreated(taggingRecordId);\\n    }\\n\\n    /**\\n     * @dev Append tags to a tagging record\\n     */\\n    function _appendTags(uint256 _taggingRecordId, uint256[] memory _tagIds) private {\\n        // Merge _newTagIds with existing tags.\\n        taggingRecords[_taggingRecordId].tagIds = UintArrayUtils.extend(\\n            taggingRecords[_taggingRecordId].tagIds,\\n            _tagIds\\n        );\\n        emit TaggingRecordUpdated(_taggingRecordId, TaggingAction.APPEND);\\n    }\\n\\n    /**\\n     * @dev Remove tags from tagging record.\\n     *\\n     * @param _taggingRecordId tagging record being updated.\\n     * @param _tagIds tagId to remove from tagging record.\\n     */\\n    function _removeTags(uint256 _taggingRecordId, uint256[] memory _tagIds) private {\\n        taggingRecords[_taggingRecordId].tagIds = UintArrayUtils.difference(\\n            taggingRecords[_taggingRecordId].tagIds,\\n            _tagIds\\n        );\\n        emit TaggingRecordUpdated(_taggingRecordId, TaggingAction.REMOVE);\\n    }\\n\\n    function _computeTaggingFee(uint256 _tagCount) internal view returns (uint256 _fee) {\\n        uint256 fee = 0;\\n        if (_tagCount > 0 && taggingFee > 0) {\\n            fee = _tagCount * taggingFee;\\n        }\\n        return (fee);\\n    }\\n\\n    function _processTaggingFees(uint256[] memory _tagIds) private {\\n        require((msg.value == _computeTaggingFee(_tagIds.length)), \\\"wrong fee supplied\\\");\\n        address platform = etsAccessControls.getPlatformAddress();\\n        for (uint256 i; i < _tagIds.length; ++i) {\\n            _processAccrued(_tagIds[i], platform);\\n        }\\n    }\\n\\n    // @dev Internal function to divide up the tagging fee and accrue it to ETS participants.\\n    function _processAccrued(uint256 _tagId, address _platform) private {\\n        // Note: This will cause _processTaggingFees to revert if tagId doesn't exist.\\n        address owner = etsToken.ownerOf(_tagId);\\n        IETSToken.Tag memory tag = etsToken.getTagById(_tagId);\\n\\n        uint256 platformAllocation = (msg.value * platformPercentage) / MODULO;\\n        uint256 relayerAllocation = (msg.value * relayerPercentage) / MODULO;\\n        uint256 remainingAllocation = msg.value - (platformAllocation + relayerAllocation);\\n\\n        accrued[_platform] = accrued[_platform] + platformAllocation;\\n        accrued[tag.relayer] = accrued[tag.relayer] + relayerAllocation;\\n\\n        // pre-auction.\\n        if (owner == _platform) {\\n            accrued[tag.creator] = accrued[tag.creator] + remainingAllocation;\\n        }\\n        // post-auction.\\n        else {\\n            accrued[owner] = accrued[owner] + remainingAllocation;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xfb8694468f557938dbd5bd9a41752e72f5886db499f0b8bcd682c979fae7b93d\",\"license\":\"MIT\"},\"contracts/interfaces/IETS.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n/**\\n * @title IETS\\n * @author Ethereum Tag Service <team@ets.xyz>\\n *\\n *  \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\n *  \\u2588\\u2588\\u2554\\u2550\\u2550\\u2550\\u2550\\u255d\\u255a\\u2550\\u2550\\u2588\\u2588\\u2554\\u2550\\u2550\\u255d\\u2588\\u2588\\u2554\\u2550\\u2550\\u2550\\u2550\\u255d\\n *  \\u2588\\u2588\\u2588\\u2588\\u2588\\u2557     \\u2588\\u2588\\u2551   \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\n *  \\u2588\\u2588\\u2554\\u2550\\u2550\\u255d     \\u2588\\u2588\\u2551   \\u255a\\u2550\\u2550\\u2550\\u2550\\u2588\\u2588\\u2551\\n *  \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557   \\u2588\\u2588\\u2551   \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2551`\\n *  \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d   \\u255a\\u2550\\u255d   \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\n *\\n * @notice This is the interface for the ETS.sol core contract that records ETS TaggingRecords to the blockchain.\\n */\\n\\npragma solidity ^0.8.10;\\n\\ninterface IETS {\\n    /**\\n     * @notice Data structure for raw client input data.\\n     *\\n     * @param targetURI Unique resource identifier string, eg. \\\"https://google.com\\\"\\n     * @param tagStrings Array of hashtag strings, eg. [\\\"#Love, \\\"#Blue\\\"]\\n     * @param recordType Arbitrary identifier for type of tagging record, eg. \\\"Bookmark\\\"\\n     */\\n    struct TaggingRecordRawInput {\\n        string targetURI;\\n        string[] tagStrings;\\n        string recordType;\\n    }\\n\\n    /**\\n     * @notice Data structure for an Ethereum Tag Service \\\"tagging record\\\".\\n     *\\n     * The TaggingRecord is the fundamental data structure of ETS and reflects \\\"who tagged what, where and why\\\".\\n     *\\n     * Every Tagging record has a unique Id computed from the hashed composite of targetId, recordType, tagger and\\n     * relayer addresses cast as a uint256. see computeTaggingRecordId()\\n     *\\n     * Given this design, a tagger who tags the same URI with the same tags and recordType via two different relayers\\n     * would produce two TaggingRecords in ETS.\\n     *\\n     * @param tagIds Ids of CTAG token(s).\\n     * @param targetId Id of target being tagged.\\n     * @param recordType Arbitrary identifier for type of tagging record.\\n     * @param relayer Address of Relayer contract that wrote tagging record.\\n     * @param tagger Address of wallet that initiated tagging record via relayer.\\n     */\\n    struct TaggingRecord {\\n        uint256[] tagIds;\\n        uint256 targetId;\\n        string recordType;\\n        address relayer;\\n        address tagger;\\n    }\\n\\n    /**\\n     * @dev Action types available for tags in a tagging record.\\n     *\\n     * 0 - APPEND Add tags to a tagging record.\\n     * 1 - REPLACE Replace (overwrite) tags in a tagging record.\\n     * 2 - REMOVE Remove tags in a tagging record.\\n     */\\n    enum TaggingAction {\\n        APPEND,\\n        REPLACE,\\n        REMOVE\\n    }\\n\\n    /**\\n     * @dev emitted when the ETS Access Controls is set.\\n     *\\n     * @param newAccessControls contract address access controls is set to.\\n     */\\n    event AccessControlsSet(address newAccessControls);\\n\\n    /**\\n     * @dev emitted when ETS tagging fee is set.\\n     *\\n     * @param newTaggingFee new tagging fee.\\n     */\\n    event TaggingFeeSet(uint256 newTaggingFee);\\n\\n    /**\\n     * @dev emitted when participant distribution percentages are set.\\n     *\\n     * @param platformPercentage percentage of tagging fee allocated to ETS.\\n     * @param relayerPercentage percentage of tagging fee allocated to relayer of record for CTAG being used in tagging record.\\n     */\\n    event PercentagesSet(uint256 platformPercentage, uint256 relayerPercentage);\\n\\n    /**\\n     * @dev emitted when a new tagging record is recorded within ETS.\\n     *\\n     * @param taggingRecordId Unique identifier of tagging record.\\n     */\\n    event TaggingRecordCreated(uint256 taggingRecordId);\\n\\n    /**\\n     * @dev emitted when a tagging record is updated.\\n     *\\n     * @param taggingRecordId tagging record being updated.\\n     * @param action Type of update applied as TaggingAction enum.\\n     */\\n    event TaggingRecordUpdated(uint256 taggingRecordId, TaggingAction action);\\n\\n    /**\\n     * @dev emitted when ETS participant draws down funds accrued to their contract or wallet.\\n     *\\n     * @param who contract or wallet address being drawn down.\\n     * @param amount amount being drawn down.\\n     */\\n    event FundsWithdrawn(address indexed who, uint256 amount);\\n\\n    // ============ PUBLIC INTERFACE ============\\n\\n    /**\\n     * @notice Create a new tagging record.\\n     *\\n     * Requirements:\\n     *\\n     *   - Caller must be relayer contract.\\n     *   - CTAG(s) and TargetId must exist.\\n     *\\n     * @param _tagIds Array of CTAG token Ids.\\n     * @param _targetId targetId of the URI being tagged. See ETSTarget.sol\\n     * @param _recordType Arbitrary identifier for type of tagging record.\\n     * @param _tagger Address calling Relayer contract to create tagging record.\\n     */\\n    function createTaggingRecord(\\n        uint256[] memory _tagIds,\\n        uint256 _targetId,\\n        string calldata _recordType,\\n        address _tagger\\n    ) external payable;\\n\\n    /**\\n     * @notice Get or create CTAG token from tag string.\\n     *\\n     * Combo function that accepts a tag string and returns corresponding CTAG token Id if it exists,\\n     * or if it doesn't exist, creates a new CTAG and then returns corresponding Id.\\n     *\\n     * Only ETS Relayer contracts may call this function.\\n     *\\n     * @param _tag Tag string.\\n     * @param _creator Address credited with creating CTAG.\\n     * @return tokenId Id of CTAG token.\\n     */\\n    function getOrCreateTagId(\\n        string calldata _tag,\\n        address payable _creator\\n    ) external payable returns (uint256 tokenId);\\n\\n    /**\\n     * @notice Create CTAG token from tag string.\\n     *\\n     * Reverts if tag exists or is invalid.\\n     *\\n     * Only ETS Relayer contracts may call this function.\\n     *\\n     * @param _tag Tag string.\\n     * @param _creator Address credited with creating CTAG.\\n     * @return tokenId Id of CTAG token.\\n     */\\n    function createTag(string calldata _tag, address payable _creator) external payable returns (uint256 tokenId);\\n\\n    /**\\n     * @notice Apply one or more tags to a targetURI using tagging record raw client input data.\\n     *\\n     * Like it's sister function applyTagsWithCompositeKey, records new ETS Tagging Record or appends tags to an\\n     * existing record if found to already exist. This function differs in that it creates new ETS target records\\n     * and CTAG tokens for novel targetURIs and hastag strings respectively. This function can only be called by\\n     * Relayer contracts. If this is a new tagging record, ETS will use msg.sender, if it's an existing tagging\\n     * record, ETS will use _relayer parameter.\\n     *\\n     * @param _rawInput Raw client input data formed as TaggingRecordRawInput struct.\\n     * @param _tagger Address that calls Relayer to tag a targetURI.\\n     * @param _relayer Address of Relayer contract that facilitated tagging record\\n     */\\n    function applyTagsWithRawInput(\\n        TaggingRecordRawInput calldata _rawInput,\\n        address payable _tagger,\\n        address _relayer\\n    ) external payable;\\n\\n    /**\\n     * @notice Apply one or more tags to a targetId using using tagging record composite key.\\n     *\\n     * Records new ETS Tagging Record to the blockchain or appends tags if Tagging Record already exists. CTAGs and\\n     * targetId are created if they don't exist. Caller must be Relayer contract.\\n     *\\n     * @param _tagIds Array of CTAG token Ids.\\n     * @param _targetId targetId of the URI being tagged. See ETSTarget.sol\\n     * @param _recordType Arbitrary identifier for type of tagging record.\\n     * @param _tagger Address of that calls Relayer to create tagging record.\\n     * @param _relayer Address of Relayer contract that facilitated tagging record.\\n     */\\n    function applyTagsWithCompositeKey(\\n        uint256[] calldata _tagIds,\\n        uint256 _targetId,\\n        string memory _recordType,\\n        address payable _tagger,\\n        address _relayer\\n    ) external payable;\\n\\n    /**\\n     * @notice Replace entire tag set in tagging record using raw data for record lookup.\\n     *\\n     * If supplied tag strings don't have CTAGs, new ones are minted.\\n     *\\n     * @param _rawInput Raw client input data formed as TaggingRecordRawInput struct.\\n     * @param _tagger Address that calls Relayer to tag a targetURI.\\n     * @param _relayer Address of Relayer contract that facilitated tagging record.\\n     */\\n    function replaceTagsWithRawInput(\\n        TaggingRecordRawInput calldata _rawInput,\\n        address payable _tagger,\\n        address _relayer\\n    ) external payable;\\n\\n    /**\\n     * @notice Replace entire tag set in tagging record using composite key for record lookup.\\n     *\\n     * This function overwrites the tags in a tagging record with the supplied tags, only\\n     * charging for the new tags in the replacement set.\\n     *\\n     * @param _tagIds Array of CTAG token Ids.\\n     * @param _targetId targetId of the URI being tagged. See ETSTarget.sol\\n     * @param _recordType Arbitrary identifier for type of tagging record.\\n     * @param _tagger Address of that calls Relayer to create tagging record.\\n     * @param _relayer Address of Relayer contract that facilitated tagging record.\\n     */\\n    function replaceTagsWithCompositeKey(\\n        uint256[] calldata _tagIds,\\n        uint256 _targetId,\\n        string memory _recordType,\\n        address payable _tagger,\\n        address _relayer\\n    ) external payable;\\n\\n    /**\\n     * @notice Remove one or more tags from a tagging record using raw data for record lookup.\\n     *\\n     * @param _rawInput Raw client input data formed as TaggingRecordRawInput struct.\\n     * @param _tagger Address that calls Relayer to tag a targetURI.\\n     * @param _relayer Address of Relayer contract that facilitated tagging record.\\n     */\\n    function removeTagsWithRawInput(\\n        TaggingRecordRawInput calldata _rawInput,\\n        address _tagger,\\n        address _relayer\\n    ) external;\\n\\n    /**\\n     * @notice Remove one or more tags from a tagging record using composite key for record lookup.\\n     *\\n     * @param _tagIds Array of CTAG token Ids.\\n     * @param _targetId targetId of the URI being tagged. See ETSTarget.sol\\n     * @param _recordType Arbitrary identifier for type of tagging record.\\n     * @param _tagger Address of that calls Relayer to create tagging record.\\n     * @param _relayer Address of Relayer contract that facilitated tagging record.\\n     */\\n    function removeTagsWithCompositeKey(\\n        uint256[] calldata _tagIds,\\n        uint256 _targetId,\\n        string memory _recordType,\\n        address payable _tagger,\\n        address _relayer\\n    ) external;\\n\\n    /**\\n     * @notice Append one or more tags to a tagging record.\\n     *\\n     * @param _taggingRecordId tagging record being updated.\\n     * @param _tagIds Array of CTAG token Ids.\\n     * @param _tagger Address of that calls Relayer to tag a targetURI.\\n     */\\n    function appendTags(uint256 _taggingRecordId, uint256[] calldata _tagIds, address _tagger) external payable;\\n\\n    /**\\n     * @notice Replaces tags in tagging record.\\n     *\\n     * This function overwrites the tags in a tagging record with the supplied tags, only\\n     * charging for the new tags in the replacement set.\\n     *\\n     * @param _taggingRecordId tagging record being updated.\\n     * @param _tagIds Array of CTAG token Ids.\\n     * @param _tagger Address of that calls Relayer to tag a targetURI.\\n     */\\n    function replaceTags(uint256 _taggingRecordId, uint256[] calldata _tagIds, address _tagger) external payable;\\n\\n    /**\\n     * @notice Remove one or more tags from a tagging record.\\n     *\\n     * @param _taggingRecordId tagging record being updated.\\n     * @param _tagIds Array of CTAG token Ids.\\n     * @param _tagger Address of that calls Relayer to tag a targetURI.\\n     */\\n    function removeTags(uint256 _taggingRecordId, uint256[] calldata _tagIds, address _tagger) external;\\n\\n    /**\\n     * @notice Function for withdrawing funds from an accrual account. Can be called by the account owner\\n     * or on behalf of the account. Does nothing when there is nothing due to the account.\\n     *\\n     * @param _account Address of account being drawn down and which will receive the funds.\\n     */\\n    function drawDown(address payable _account) external;\\n\\n    // ============ PUBLIC VIEW FUNCTIONS ============\\n\\n    /**\\n     * @notice Compute a taggingRecordId from raw input.\\n     *\\n     * @param _rawInput Raw client input data formed as TaggingRecordRawInput struct.\\n     * @param _relayer Address of tagging record Relayer contract.\\n     * @param _tagger Address interacting with Relayer to tag content (\\\"Tagger\\\").\\n     *\\n     * @return taggingRecordId Unique identifier for a tagging record.\\n     */\\n    function computeTaggingRecordIdFromRawInput(\\n        TaggingRecordRawInput calldata _rawInput,\\n        address _relayer,\\n        address _tagger\\n    ) external view returns (uint256 taggingRecordId);\\n\\n    /**\\n     * @notice Compute & return a taggingRecordId.\\n     *\\n     * Every TaggingRecord in ETS is mapped to by it's taggingRecordId. This Id is a composite key\\n     * composed of targetId, recordType, relayer contract address and tagger address hashed and cast as a uint256.\\n     *\\n     * @param _targetId Id of target being tagged (see ETSTarget.sol).\\n     * @param _recordType Arbitrary identifier for type of tagging record.\\n     * @param _relayer Address of tagging record Relayer contract.\\n     * @param _tagger Address interacting with Relayer to tag content (\\\"Tagger\\\").\\n     *\\n     * @return taggingRecordId Unique identifier for a tagging record.\\n     */\\n    function computeTaggingRecordIdFromCompositeKey(\\n        uint256 _targetId,\\n        string memory _recordType,\\n        address _relayer,\\n        address _tagger\\n    ) external pure returns (uint256 taggingRecordId);\\n\\n    /**\\n     * @notice Compute tagging fee for raw input and desired action.\\n     *\\n     * @param _rawInput Raw client input data formed as TaggingRecordRawInput struct.\\n     * @param _relayer Address of tagging record Relayer contract.\\n     * @param _tagger Address interacting with Relayer to tag content (\\\"Tagger\\\").\\n     * @param _action Integer representing action to be performed according to enum TaggingAction.\\n     *\\n     * @return fee Calculated tagging fee in ETH/Matic\\n     * @return tagCount Number of new tags being added to tagging record.\\n     */\\n    function computeTaggingFeeFromRawInput(\\n        TaggingRecordRawInput memory _rawInput,\\n        address _relayer,\\n        address _tagger,\\n        TaggingAction _action\\n    ) external view returns (uint256 fee, uint256 tagCount);\\n\\n    /**\\n     * @notice Compute tagging fee for CTAGs, tagging record composite key and desired action.\\n     *\\n     * @param _tagIds Array of CTAG token Ids.\\n     * @param _relayer Address of tagging record Relayer contract.\\n     * @param _tagger Address interacting with Relayer to tag content (\\\"Tagger\\\").\\n     * @param _action Integer representing action to be performed according to enum TaggingAction.\\n     *\\n     * @return fee Calculated tagging fee in ETH/Matic\\n     * @return tagCount Number of new tags being added to tagging record.\\n     */\\n    function computeTaggingFeeFromCompositeKey(\\n        uint256[] memory _tagIds,\\n        uint256 _targetId,\\n        string calldata _recordType,\\n        address _relayer,\\n        address _tagger,\\n        TaggingAction _action\\n    ) external view returns (uint256 fee, uint256 tagCount);\\n\\n    /**\\n     * @notice Compute tagging fee for CTAGs, tagging record id and desired action.\\n     *\\n     * If the global, service wide tagging fee is set (see ETS.taggingFee() & ETS.setTaggingFee()) ETS charges a per tag for all\\n     * new tags applied to a tagging record. This applies to both new tagging records and modified tagging records.\\n     *\\n     * Computing the tagging fee involves checking to see if a tagging record exists and if so, given the desired action\\n     * (append or replace) determining the number of new tags being added and multiplying by the ETS per tag fee.\\n     *\\n     * @param _taggingRecordId Id of tagging record.\\n     * @param _tagIds Array of CTAG token Ids.\\n     * @param _action Integer representing action to be performed according to enum TaggingAction.\\n     *\\n     * @return fee Calculated tagging fee in ETH/Matic\\n     * @return tagCount Number of new tags being added to tagging record.\\n     */\\n    function computeTaggingFee(\\n        uint256 _taggingRecordId,\\n        uint256[] memory _tagIds,\\n        TaggingAction _action\\n    ) external view returns (uint256 fee, uint256 tagCount);\\n\\n    /**\\n     * @notice Retrieve a tagging record from it's raw input.\\n     *\\n     * @param _rawInput Raw client input data formed as TaggingRecordRawInput struct.\\n     * @param _relayer Address of tagging record Relayer contract.\\n     * @param _tagger Address interacting with Relayer to tag content (\\\"Tagger\\\").\\n     *\\n     * @return tagIds CTAG token ids.\\n     * @return targetId TargetId that was tagged.\\n     * @return recordType Type of tagging record.\\n     * @return relayer Address of tagging record Relayer contract.\\n     * @return tagger Address interacting with Relayer to tag content (\\\"Tagger\\\").\\n     */\\n    function getTaggingRecordFromRawInput(\\n        TaggingRecordRawInput memory _rawInput,\\n        address _relayer,\\n        address _tagger\\n    )\\n        external\\n        view\\n        returns (uint256[] memory tagIds, uint256 targetId, string memory recordType, address relayer, address tagger);\\n\\n    /**\\n     * @notice Retrieve a tagging record from composite key parts.\\n     *\\n     * @param _targetId Id of target being tagged.\\n     * @param _recordType Arbitrary identifier for type of tagging record.\\n     * @param _relayer Address of Relayer contract that wrote tagging record.\\n     * @param _tagger Address of wallet that initiated tagging record via relayer.\\n     *\\n     * @return tagIds CTAG token ids.\\n     * @return targetId TargetId that was tagged.\\n     * @return recordType Type of tagging record.\\n     * @return relayer Address of tagging record Relayer contract.\\n     * @return tagger Address interacting with Relayer to tag content (\\\"Tagger\\\").\\n     */\\n    function getTaggingRecordFromCompositeKey(\\n        uint256 _targetId,\\n        string memory _recordType,\\n        address _relayer,\\n        address _tagger\\n    )\\n        external\\n        view\\n        returns (uint256[] memory tagIds, uint256 targetId, string memory recordType, address relayer, address tagger);\\n\\n    /**\\n     * @notice Retrieve a tagging record from Id.\\n     *\\n     * @param _id taggingRecordId.\\n     *\\n     * @return tagIds CTAG token ids.\\n     * @return targetId TargetId that was tagged.\\n     * @return recordType Type of tagging record.\\n     * @return relayer Address of tagging record Relayer contract.\\n     * @return tagger Address interacting with Relayer to tag content (\\\"Tagger\\\").\\n     */\\n    function getTaggingRecordFromId(\\n        uint256 _id\\n    )\\n        external\\n        view\\n        returns (uint256[] memory tagIds, uint256 targetId, string memory recordType, address relayer, address tagger);\\n\\n    /**\\n     * @notice Check that a tagging record exists for given raw input.\\n     *\\n     * @param _rawInput Raw client input data formed as TaggingRecordRawInput struct.\\n     * @param _relayer Address of tagging record Relayer contract.\\n     * @param _tagger Address interacting with Relayer to tag content (\\\"Tagger\\\").\\n     *\\n     * @return boolean; true for exists, false for not.\\n     */\\n    function taggingRecordExistsByRawInput(\\n        TaggingRecordRawInput memory _rawInput,\\n        address _relayer,\\n        address _tagger\\n    ) external view returns (bool);\\n\\n    /**\\n     * @notice Check that a tagging record exists by it's componsite key parts.\\n     *\\n     * @param _targetId Id of target being tagged.\\n     * @param _recordType Arbitrary identifier for type of tagging record.\\n     * @param _relayer Address of Relayer contract that wrote tagging record.\\n     * @param _tagger Address of wallet that initiated tagging record via relayer.\\n     *\\n     * @return boolean; true for exists, false for not.\\n     */\\n    function taggingRecordExistsByCompositeKey(\\n        uint256 _targetId,\\n        string memory _recordType,\\n        address _relayer,\\n        address _tagger\\n    ) external view returns (bool);\\n\\n    /**\\n     * @notice Check that a tagging record exsits by it's Id.\\n     *\\n     * @param _taggingRecordId taggingRecordId.\\n     *\\n     * @return boolean; true for exists, false for not.\\n     */\\n    function taggingRecordExists(uint256 _taggingRecordId) external view returns (bool);\\n\\n    /**\\n     * @notice Function to check how much MATIC has been accrued by an address factoring in amount paid out.\\n     *\\n     * @param _account Address of the account being queried.\\n     * @return _due Amount of WEI in MATIC due to account.\\n     */\\n    function totalDue(address _account) external view returns (uint256 _due);\\n\\n    /**\\n     * @notice Function to retrieve the ETS platform tagging fee.\\n     *\\n     * @return tagging fee.\\n     */\\n    function taggingFee() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x801884e24f616d9105a074ef9582e37b102def18cfea9ada381783fcd9584ede\",\"license\":\"MIT\"},\"contracts/interfaces/IETSAccessControls.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n/**\\n * @title IETSAccessControls\\n * @author Ethereum Tag Service <team@ets.xyz>\\n *\\n *  \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\n *  \\u2588\\u2588\\u2554\\u2550\\u2550\\u2550\\u2550\\u255d\\u255a\\u2550\\u2550\\u2588\\u2588\\u2554\\u2550\\u2550\\u255d\\u2588\\u2588\\u2554\\u2550\\u2550\\u2550\\u2550\\u255d\\n *  \\u2588\\u2588\\u2588\\u2588\\u2588\\u2557     \\u2588\\u2588\\u2551   \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\n *  \\u2588\\u2588\\u2554\\u2550\\u2550\\u255d     \\u2588\\u2588\\u2551   \\u255a\\u2550\\u2550\\u2550\\u2550\\u2588\\u2588\\u2551\\n *  \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557   \\u2588\\u2588\\u2551   \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2551`\\n *  \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d   \\u255a\\u2550\\u255d   \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\n *\\n * @notice This is the interface for the ETSAccessControls contract which allows ETS Core Dev\\n * Team to administer roles and control access to various parts of the ETS Platform.\\n * ETSAccessControls contract contains a mix of public and administrator only functions.\\n */\\n\\npragma solidity ^0.8.10;\\n\\nimport { IAccessControlUpgradeable } from \\\"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol\\\";\\n\\ninterface IETSAccessControls is IAccessControlUpgradeable {\\n    /**\\n     * @dev emitted when the ETS Platform address is set.\\n     *\\n     * @param newAddress wallet address platform is being set to.\\n     * @param prevAddress previous platform address.\\n     */\\n    event PlatformSet(address newAddress, address prevAddress);\\n\\n    /**\\n     * @dev emitted when a Relayer contract is added & enabled in ETS.\\n     *\\n     * Relayer contracts are not required implement all ETS Core API functions. Therefore, to ease\\n     * testing of ETS Core API fuinctions, ETS permits addition of ETS owned wallet addresses as Relayers.\\n     *\\n     * @param relayer Relayer contract address.\\n     */\\n    event RelayerAdded(address relayer);\\n\\n    /**\\n     * @dev emitted when a Relayer contract is paused or unpaused.\\n     *\\n     * @param relayer Address that had pause toggled.\\n     */\\n    event RelayerLockToggled(address relayer);\\n\\n    /**\\n     * @notice Sets the Platform wallet address. Can only be called by address with DEFAULT_ADMIN_ROLE.\\n     *\\n     * @param _platform The new Platform address to set.\\n     */\\n    function setPlatform(address payable _platform) external;\\n\\n    /**\\n     * @notice Adds a Relayer contract to ETS. Can only be called by address\\n     * with DEFAULT_ADMIN_ROLE.\\n     *\\n     * @param _relayer Address of the Relayer contract. Must conform to IETSRelayer.\\n     * @param _name Human readable name of the Relayer.\\n     * @param _owner Address of relayer owner.\\n     */\\n    function registerRelayer(address _relayer, string calldata _name, address _owner) external;\\n\\n    /**\\n     * @notice Pause relayer given the relayer owner address. Callable by Platform only.\\n     *\\n     * @param _relayerOwner Address of the Relayer owner.\\n     */\\n    function pauseRelayerByOwnerAddress(address _relayerOwner) external;\\n\\n    /**\\n     * @notice Change the relayer owner as stored in ETSAccessControls. Callable from Relayer only.\\n     * Called via changeOwner() on a relayer.\\n     *\\n     * @param _currentOwner Address of the current relayer owner.\\n     * @param _newOwner Address of the new relayer owner.\\n     */\\n    function changeRelayerOwner(address _currentOwner, address _newOwner) external;\\n\\n    /**\\n     * @notice Pauses/Unpauses a Relayer contract. Can only be called by address\\n     * with DEFAULT_ADMIN_ROLE.\\n     *\\n     * @param _relayer Address of the Relayer contract.\\n     */\\n    function toggleRelayerLock(address _relayer) external;\\n\\n    /**\\n     * @notice Sets the role admin for a given role. An address with role admin can grant or\\n     * revoke that role for other addresses. Can only be called by address with DEFAULT_ADMIN_ROLE.\\n     *\\n     * @param _role bytes32 representation of role being administered.\\n     * @param _adminRole bytes32 representation of administering role.\\n     */\\n    function setRoleAdmin(bytes32 _role, bytes32 _adminRole) external;\\n\\n    /**\\n     * @notice Checks whether given address has SMART_CONTRACT role.\\n     *\\n     * @param _addr Address being checked.\\n     * @return boolean True if address has SMART_CONTRACT role.\\n     */\\n    function isSmartContract(address _addr) external view returns (bool);\\n\\n    /**\\n     * @notice Checks whether given address has DEFAULT_ADMIN_ROLE role.\\n     *\\n     * @param _addr Address being checked.\\n     * @return boolean True if address has DEFAULT_ADMIN_ROLE role.\\n     */\\n    function isAdmin(address _addr) external view returns (bool);\\n\\n    /**\\n     * @notice Checks whether given address has AUCTION_ORACLE_ROLE role.\\n     *\\n     * @param _addr Address being checked.\\n     * @return boolean True if address has AUCTION_ORACLE_ROLE role.\\n     */\\n    function isAuctionOracle(address _addr) external view returns (bool);\\n\\n    /**\\n     * @notice Checks whether given address can act as relayer factory.\\n     *\\n     * @param _addr Address being checked.\\n     * @return boolean True if address can act as relayer factory.\\n     */\\n    function isRelayerFactory(address _addr) external view returns (bool);\\n\\n    /**\\n     * @notice Checks whether given address is a relayer.\\n     *\\n     * @param _addr Address being checked.\\n     * @return boolean True if address can be a relayer.\\n     */\\n    function isRelayer(address _addr) external view returns (bool);\\n\\n    /**\\n     * @notice Checks whether given address is a registered Relayer and not paused.\\n     *\\n     * @param _addr Address being checked.\\n     * @return boolean True if address is a Relayer and not paused.\\n     */\\n    function isRelayerAndNotPaused(address _addr) external view returns (bool);\\n\\n    /**\\n     * @notice Checks relayer is paused by ETS Platform.\\n     *\\n     * @param _addr Address being checked.\\n     * @return boolean True if relayer address is paused by platform.\\n     */\\n    function isRelayerLocked(address _addr) external view returns (bool);\\n\\n    /**\\n     * @notice Checks whether given address owns a relayer.\\n     *\\n     * @param _addr Address being checked.\\n     * @return boolean True if address owns a relayer.\\n     */\\n    function isRelayerByOwner(address _addr) external view returns (bool);\\n\\n    /**\\n     * @notice Checks whether given address has RELAYER_ADMIN role.\\n     *\\n     * @param _addr Address being checked.\\n     * @return boolean True if address has RELAYER_ADMIN role.\\n     */\\n    function isRelayerAdmin(address _addr) external view returns (bool);\\n\\n    /**\\n     * @notice Checks whether given Relayer Name is a registered Relayer.\\n     *\\n     * @param _name Name being checked.\\n     * @return boolean True if _name is a Relayer.\\n     */\\n    function isRelayerByName(string calldata _name) external view returns (bool);\\n\\n    /**\\n     * @notice Checks whether given address is a registered Relayer.\\n     *\\n     * @param _addr Address being checked.\\n     * @return boolean True if address is a registered Relayer.\\n     */\\n    function isRelayerByAddress(address _addr) external view returns (bool);\\n\\n    /**\\n     * @notice Get relayer address from it's name.\\n     *\\n     * @param _name Name of relayer.\\n     * @return Address of relayer.\\n     */\\n    function getRelayerAddressFromName(string calldata _name) external view returns (address);\\n\\n    /**\\n     * @notice Get relayer name from it's address.\\n     *\\n     * @param _address Adsdress of relayer.\\n     * @return Name of relayer.\\n     */\\n    function getRelayerNameFromAddress(address _address) external view returns (string calldata);\\n\\n    /**\\n     * @notice Get relayer address from its owner address.\\n     *\\n     * @param _address address of relayer owner.\\n     * @return Address of relayer.\\n     */\\n    function getRelayerAddressFromOwner(address _address) external view returns (address);\\n\\n    /**\\n     * @notice Returns wallet address for ETS Platform.\\n     *\\n     * @return ETS Platform address.\\n     */\\n    function getPlatformAddress() external view returns (address payable);\\n}\\n\",\"keccak256\":\"0x0948eb19ab50fdd3cb1ac728be863567c9cefd4da0e4ecc2b3b052020c86ed74\",\"license\":\"MIT\"},\"contracts/interfaces/IETSTarget.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n/**\\n * @title IETSTarget\\n * @author Ethereum Tag Service <team@ets.xyz>\\n *\\n *  \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\n *  \\u2588\\u2588\\u2554\\u2550\\u2550\\u2550\\u2550\\u255d\\u255a\\u2550\\u2550\\u2588\\u2588\\u2554\\u2550\\u2550\\u255d\\u2588\\u2588\\u2554\\u2550\\u2550\\u2550\\u2550\\u255d\\n *  \\u2588\\u2588\\u2588\\u2588\\u2588\\u2557     \\u2588\\u2588\\u2551   \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\n *  \\u2588\\u2588\\u2554\\u2550\\u2550\\u255d     \\u2588\\u2588\\u2551   \\u255a\\u2550\\u2550\\u2550\\u2550\\u2588\\u2588\\u2551\\n *  \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557   \\u2588\\u2588\\u2551   \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2551`\\n *  \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d   \\u255a\\u2550\\u255d   \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\n *\\n * @notice This is the standard interface for the core ETSTarget.sol contract. It includes both public\\n * and administration functions.\\n *\\n * In ETS, a \\\"Target\\\" is our data structure, stored onchain, that references/points to a URI. Target records\\n * are identified in ETS by their Id (targetId) which is a unsigned integer computed from the URI string.\\n * Target Ids are combined with CTAG Ids by ETS core (ETS.sol) to form \\\"Tagging Records\\\".\\n *\\n * For context, from Wikipedia, URI is short for Uniform Resource Identifier and is a unique sequence of\\n * characters that identifies a logical or physical resource used by web technologies. URIs may be used to\\n * identify anything, including real-world objects, such as people and places, concepts, or information\\n * resources such as web pages and books.\\n *\\n * For our purposes, as much as possible, we are restricting our interpretation of URIs to the more technical\\n * parameters defined by the IETF in [RFC3986](https://www.rfc-editor.org/rfc/rfc3986). For newer protocols, such\\n * as blockchains, For newer protocols, such as blockchains we will lean on newer emerging URI standards such\\n * as the [Blink](https://w3c-ccg.github.io/blockchain-links) and [BIP-122](https://github.com/bitcoin/bips/blob/master/bip-0122.mediawiki)\\n *\\n * One the thing to keep in mind with URIs & ETS Targets is that differently shaped URIs can sometimes point to the same\\n * resource. The effect of that is that different Target IDs in ETS can similarly point to the same resource.\\n */\\n\\npragma solidity ^0.8.10;\\n\\ninterface IETSTarget {\\n    /**\\n     * @notice Data structure for an ETS Target.\\n     *\\n     * @param targetURI Unique resource identifier Target points to\\n     * @param createdBy Address of IETSTargetTagger implementation that created Target\\n     * @param enriched block timestamp when Target was last enriched. Defaults to 0\\n     * @param httpStatus https status of last response from ETSEnrichTarget API eg. \\\"404\\\", \\\"200\\\". defaults to 0\\n     * @param ipfsHash ipfsHash of additional metadata for Target collected by ETSEnrichTarget API\\n     */\\n    struct Target {\\n        string targetURI;\\n        address createdBy;\\n        uint256 enriched;\\n        uint256 httpStatus;\\n        string ipfsHash;\\n    }\\n\\n    /**\\n     * @dev emitted when the ETSAccessControls is set.\\n     *\\n     * @param etsAccessControls contract address ETSAccessControls is set to.\\n     */\\n    event AccessControlsSet(address etsAccessControls);\\n\\n    /**\\n     * @dev emitted when the ETSEnrichTarget API address is set.\\n     *\\n     * @param etsEnrichTarget contract address ETSEnrichTarget is set to.\\n     */\\n    event EnrichTargetSet(address etsEnrichTarget);\\n\\n    /**\\n     * @dev emitted when a new Target is created.\\n     *\\n     * @param targetId Unique Id of new Target.\\n     */\\n    event TargetCreated(uint256 targetId);\\n\\n    /**\\n     * @dev emitted when an existing Target is updated.\\n     *\\n     * @param targetId Id of Target being updated.\\n     */\\n    event TargetUpdated(uint256 targetId);\\n\\n    /**\\n     * @notice Sets ETSEnrichTarget contract address so that Target metadata enrichment\\n     * functions can be called from ETSTarget.\\n     *\\n     * @param _etsEnrichTarget Address of ETSEnrichTarget contract.\\n     */\\n    function setEnrichTarget(address _etsEnrichTarget) external;\\n\\n    /**\\n     * @notice Get ETS targetId from URI.\\n     *\\n     * Combo function that given a URI string will return it's ETS targetId if it exists,\\n     * or create a new Target record and return corresponding targetId.\\n     *\\n     * @param _targetURI URI passed in as string\\n     * @return Id of ETS Target record\\n     */\\n    function getOrCreateTargetId(string memory _targetURI) external returns (uint256);\\n\\n    /**\\n     * @notice Create a Target record and return it's targetId.\\n     *\\n     * @param _targetURI URI passed in as string\\n     * @return targetId Id of ETS Target record\\n     */\\n    function createTarget(string memory _targetURI) external returns (uint256 targetId);\\n\\n    /**\\n     * @notice Update a Target record.\\n     *\\n     * @param _targetId Id of Target being updated.\\n     * @param _targetURI Unique resource identifier Target points to.\\n     * @param _enriched block timestamp when Target was last enriched\\n     * @param _httpStatus https status of last response from ETSEnrichTarget API eg. \\\"404\\\", \\\"200\\\". defaults to 0\\n     * @param _ipfsHash ipfsHash of additional metadata for Target collected by ETSEnrichTarget API\\n\\n     * @return success true when Target is successfully updated.\\n     */\\n    function updateTarget(\\n        uint256 _targetId,\\n        string calldata _targetURI,\\n        uint256 _enriched,\\n        uint256 _httpStatus,\\n        string calldata _ipfsHash\\n    ) external returns (bool success);\\n\\n    /**\\n     * @notice Function to deterministically compute & return a targetId.\\n     *\\n     * Every Target in ETS is mapped to by it's targetId. This Id is computed from\\n     * the target URI sting hashed and cast as a uint256.\\n     *\\n     * Note: Function does not verify if Target record exists.\\n     *\\n     * @param _targetURI Unique resource identifier Target record points to.\\n     * @return targetId Id of the potential Target record.\\n     */\\n    function computeTargetId(string memory _targetURI) external view returns (uint256 targetId);\\n\\n    /**\\n     * @notice Check that a Target record exists for a given URI string.\\n     *\\n     * @param _targetURI Unique resource identifier Target record points to.\\n     * @return true if Target record exists; false if not.\\n     */\\n    function targetExistsByURI(string memory _targetURI) external view returns (bool);\\n\\n    /**\\n     * @notice Check that a Target record exists for a given computed targetId.\\n     *\\n     * @param _targetId targetId uint computed from URI via computeTargetId().\\n     * @return true if Target record exists; false if not.\\n     */\\n    function targetExistsById(uint256 _targetId) external view returns (bool);\\n\\n    /**\\n     * @notice Retrieve a Target record for a given URI string.\\n     *\\n     * Note: returns a struct with empty members when no Target exists.\\n     *\\n     * @param _targetURI Unique resource identifier Target record points to.\\n     * @return Target record.\\n     */\\n    function getTargetByURI(string memory _targetURI) external view returns (Target memory);\\n\\n    /**\\n     * @notice Retrieve a Target record for a computed targetId.\\n     *\\n     * Note: returns a struct with empty members when no Target exists.\\n     *\\n     * @param _targetId targetId uint computed from URI via computeTargetId().\\n     * @return Target record.\\n     */\\n    function getTargetById(uint256 _targetId) external view returns (Target memory);\\n}\\n\",\"keccak256\":\"0xb6c3a34352303df2ced14765c40d27bf712597c37be7b2a4c0736843bac731b5\",\"license\":\"MIT\"},\"contracts/interfaces/IETSToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n/**\\n * @title IETSToken\\n * @author Ethereum Tag Service <team@ets.xyz>\\n *\\n *  \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\n *  \\u2588\\u2588\\u2554\\u2550\\u2550\\u2550\\u2550\\u255d\\u255a\\u2550\\u2550\\u2588\\u2588\\u2554\\u2550\\u2550\\u255d\\u2588\\u2588\\u2554\\u2550\\u2550\\u2550\\u2550\\u255d\\n *  \\u2588\\u2588\\u2588\\u2588\\u2588\\u2557     \\u2588\\u2588\\u2551   \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\n *  \\u2588\\u2588\\u2554\\u2550\\u2550\\u255d     \\u2588\\u2588\\u2551   \\u255a\\u2550\\u2550\\u2550\\u2550\\u2588\\u2588\\u2551\\n *  \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557   \\u2588\\u2588\\u2551   \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2551`\\n *  \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d   \\u255a\\u2550\\u255d   \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\n *\\n * @notice This is the interface for the ETSToken.sol core contract that governs the creation & management\\n * of Ethereum Tag Service composable tags (CTAGs).\\n *\\n * CTAGs are ERC-721 non-fungible tokens that store a single tag string and origin attribution data including\\n * a \\\"Relayer\\\" address and a \\\"Creator\\\" address. The tag string must conform to a few simple validation rules.\\n *\\n * CTAGs are identified in ETS by their Id (tagId) which is an unsigned integer computed from the lowercased\\n * tag \\\"display\\\" string. Given this, only one CTAG exists for a tag string regardless of its case. For\\n * example, #Punks, #punks and #PUNKS all resolve to the same CTAG.\\n *\\n * CTAG Ids are combined with Target Ids (see ETSTarget.sol) by ETS core (ETS.sol) to form \\\"Tagging Records\\\".\\n *\\n * CTAGs may only be generated by Relayer contracts (see examples/ETSRelayer.sol) via ETS core (ETS.sol)\\n */\\n\\npragma solidity ^0.8.10;\\n\\nimport { IERC721Upgradeable } from \\\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol\\\";\\n\\ninterface IETSToken is IERC721Upgradeable {\\n    /**\\n     * @notice Data structure for CTAG Token.\\n     *\\n     * Only premium and reserved flags are editable.\\n     *\\n     * @param relayer Address of IETSTargetTagger implementation that created CTAG.\\n     * @param creator Address interacting with relayer to initiate CTAG creation.\\n     * @param display Display version of CTAG string.\\n     * @param premium ETS governed boolean flag to identify a CTAG as premium/higher value.\\n     * @param reserved ETS governed boolean flag to restrict a CTAG from release to auction.\\n     */\\n    struct Tag {\\n        address relayer;\\n        address creator;\\n        string display;\\n        bool premium;\\n        bool reserved;\\n    }\\n\\n    // Events\\n\\n    /**\\n     * @dev emitted when the maximum character length of CTAG display string is set.\\n     *\\n     * @param maxStringLength maximum character length of string.\\n     */\\n    event TagMaxStringLengthSet(uint256 maxStringLength);\\n\\n    /**\\n     * @dev emitted when the minimum character length of CTAG display string is set.\\n     *\\n     * @param minStringLength minimum character length of string.\\n     */\\n    event TagMinStringLengthSet(uint256 minStringLength);\\n\\n    /**\\n     * @dev emitted when the ownership term length of a CTAG is set.\\n     *\\n     * @param termLength Ownership term length in days.\\n     */\\n    event OwnershipTermLengthSet(uint256 termLength);\\n\\n    /**\\n     * @dev emitted when the ETS core contract is set.\\n     *\\n     * @param ets ets core contract address.\\n     */\\n    event ETSCoreSet(address ets);\\n\\n    /**\\n     * @dev emitted when the ETS Access Controls is set.\\n     *\\n     * @param etsAccessControls contract address access controls is set to.\\n     */\\n    event AccessControlsSet(address etsAccessControls);\\n\\n    /**\\n     * @dev emitted when a tag string is flagged/unflagged as premium prior to minting.\\n     *\\n     * @param tag tag string being flagged.\\n     * @param isPremium boolean true for premium/false not premium.\\n     */\\n    event PremiumTagPreSet(string tag, bool isPremium);\\n\\n    /**\\n     * @dev emitted when a CTAG is flagged/unflagged as premium subsequent to minting.\\n     *\\n     * @param tagId Id of CTAG token.\\n     * @param isPremium boolean true for premium/false not premium.\\n     */\\n    event PremiumFlagSet(uint256 tagId, bool isPremium);\\n\\n    /**\\n     * @dev emitted when a CTAG is flagged/unflagged as reserved subsequent to minting.\\n     *\\n     * @param tagId Id of CTAG token.\\n     * @param isReserved boolean true for reserved/false for not reserved.\\n     */\\n    event ReservedFlagSet(uint256 tagId, bool isReserved);\\n\\n    /**\\n     * @dev emitted when CTAG token is renewed.\\n     *\\n     * @param tokenId Id of CTAG token.\\n     * @param caller address of renewer.\\n     */\\n    event TagRenewed(uint256 indexed tokenId, address indexed caller);\\n\\n    /**\\n     * @dev emitted when CTAG token is recycled back to ETS.\\n     *\\n     * @param tokenId Id of CTAG token.\\n     * @param caller address of recycler.\\n     */\\n    event TagRecycled(uint256 indexed tokenId, address indexed caller);\\n\\n    // ============ OWNER INTERFACE ============\\n\\n    /**\\n     * @notice admin function to set maximum character length of CTAG display string.\\n     *\\n     * @param _tagMaxStringLength maximum character length of string.\\n     */\\n    function setTagMaxStringLength(uint256 _tagMaxStringLength) external;\\n\\n    /**\\n     * @notice Admin function to set minimum  character length of CTAG display string.\\n     *\\n     * @param _tagMinStringLength minimum character length of string.\\n     */\\n    function setTagMinStringLength(uint256 _tagMinStringLength) external;\\n\\n    /**\\n     * @notice Admin function to set the ownership term length of a CTAG is set.\\n     *\\n     * @param _ownershipTermLength Ownership term length in days.\\n     */\\n    function setOwnershipTermLength(uint256 _ownershipTermLength) external;\\n\\n    /**\\n     * @notice Admin function to flag/unflag tag string(s) as premium prior to minting.\\n     *\\n     * @param _tags Array of tag strings.\\n     * @param _isPremium Boolean true for premium, false for not premium.\\n     */\\n    function preSetPremiumTags(string[] calldata _tags, bool _isPremium) external;\\n\\n    /**\\n     * @notice Admin function to flag/unflag CTAG(s) as premium.\\n     *\\n     * @param _tokenIds Array of CTAG Ids.\\n     * @param _isPremium Boolean true for premium, false for not premium.\\n     */\\n    function setPremiumFlag(uint256[] calldata _tokenIds, bool _isPremium) external;\\n\\n    /**\\n     * @notice Admin function to flag/unflag CTAG(s) as reserved.\\n     *\\n     * Tags flagged as reserved cannot be auctioned.\\n     *\\n     * @param _tokenIds Array of CTAG Ids.\\n     * @param _reserved Boolean true for reserved, false for not reserved.\\n     */\\n    function setReservedFlag(uint256[] calldata _tokenIds, bool _reserved) external;\\n\\n    // ============ PUBLIC INTERFACE ============\\n\\n    /**\\n     * @notice Get CTAG token Id from tag string.\\n     *\\n     * Combo function that accepts a tag string and returns it's CTAG token Id if it exists,\\n     * or creates a new CTAG and returns corresponding Id.\\n     *\\n     * Only ETS Core can call this function.\\n     *\\n     * @param _tag Tag string.\\n     * @param _relayer Address of Relayer contract calling ETS Core.\\n     * @param _creator Address credited with creating CTAG.\\n     * @return tokenId Id of CTAG token.\\n     */\\n    function getOrCreateTagId(\\n        string calldata _tag,\\n        address payable _relayer,\\n        address payable _creator\\n    ) external payable returns (uint256 tokenId);\\n\\n    /**\\n     * @notice Create CTAG token from tag string.\\n     *\\n     * Reverts if tag exists or is invalid.\\n     *\\n     * Only ETS Core can call this function.\\n     *\\n     * @param _tag Tag string.\\n     * @param _creator Address credited with creating CTAG.\\n     * @return tokenId Id of CTAG token.\\n     */\\n    function createTag(\\n        string calldata _tag,\\n        address payable _relayer,\\n        address payable _creator\\n    ) external payable returns (uint256 tokenId);\\n\\n    /**\\n     * @notice Renews ownership term of a CTAG.\\n     *\\n     * A \\\"CTAG ownership term\\\" is utilized to prevent CTAGs from being abandoned or inaccessable\\n     * due to lost private keys.\\n     *\\n     * Any wallet address may renew the term of a CTAG for an owner. When renewed, the term\\n     * is extended from the current block timestamp plus the ownershipTermLength public variable.\\n     *\\n     * @param _tokenId Id of CTAG token.\\n     */\\n    function renewTag(uint256 _tokenId) external;\\n\\n    /**\\n     * @notice Recycles a CTAG back to ETS.\\n     *\\n     * When ownership term of a CTAG has expired, any wallet or contract may call this function\\n     * to recycle the tag back to ETS. Once recycled, a tag may be auctioned again.\\n     *\\n     * @param _tokenId Id of CTAG token.\\n     */\\n    function recycleTag(uint256 _tokenId) external;\\n\\n    // ============ PUBLIC VIEW FUNCTIONS ============\\n\\n    /**\\n     * @notice Function to deterministically compute & return a CTAG token Id.\\n     *\\n     * Every CTAG token and it's associated data struct is mapped to by it's token Id. This Id is computed\\n     * from the \\\"display\\\" tag string lowercased, hashed and cast as an unsigned integer.\\n     *\\n     * Note: Function does not verify if CTAG record exists.\\n     *\\n     * @param _tag Tag string.\\n     * @return Id of potential CTAG token id.\\n     */\\n    function computeTagId(string memory _tag) external pure returns (uint256);\\n\\n    /**\\n     * @notice Check that a CTAG token exists for a given tag string.\\n     *\\n     * @param _tag Tag string.\\n     * @return true if CTAG token exists; false if not.\\n     */\\n    function tagExistsByString(string calldata _tag) external view returns (bool);\\n\\n    /**\\n     * @notice Check that CTAG token exists for a given computed token Id.\\n     *\\n     * @param _tokenId Token Id uint computed from tag string via computeTargetId().\\n     * @return true if CTAG token exists; false if not.\\n     */\\n    function tagExistsById(uint256 _tokenId) external view returns (bool);\\n\\n    /**\\n     * @notice Check if CTAG token ownership term has expired.\\n     *\\n     * @param _tokenId Token Id uint computed from tag string via computeTargetId().\\n     * @return true if CTAG ownership term has expired; false if not.\\n     */\\n    function tagOwnershipTermExpired(uint256 _tokenId) external view returns (bool);\\n\\n    /**\\n     * @notice Retrieve a CTAG record for a given tag string.\\n     *\\n     * Note: returns a struct with empty members when no CTAG exists.\\n     *\\n     * @param _tag Tag string.\\n     * @return CTAG record as Tag struct.\\n     */\\n    function getTagByString(string calldata _tag) external view returns (Tag memory);\\n\\n    /**\\n     * @notice Retrieve a CTAG record for a given token Id.\\n     *\\n     * Note: returns a struct with empty members when no CTAG exists.\\n     *\\n     * @param _tokenId CTAG token Id.\\n     * @return CTAG record as Tag struct.\\n     */\\n    function getTagById(uint256 _tokenId) external view returns (Tag memory);\\n\\n    /**\\n     * @notice Retrieve wallet address for ETS Platform.\\n     *\\n     * @return wallet address for ETS Platform.\\n     */\\n    function getPlatformAddress() external view returns (address payable);\\n\\n    /**\\n     * @notice Retrieve Creator address for a CTAG token.\\n     *\\n     * @param _tokenId CTAG token Id.\\n     * @return _creator Creator address of the CTAG.\\n     */\\n    function getCreatorAddress(uint256 _tokenId) external view returns (address);\\n\\n    /**\\n     * @notice Retrieve last renewal block timestamp for a CTAG.\\n     *\\n     * @param _tokenId CTAG token Id.\\n     * @return Block timestamp.\\n     */\\n    function getLastRenewed(uint256 _tokenId) external view returns (uint256);\\n\\n    /**\\n     * @notice Retrieve CTAG ownership term length global setting.\\n     *\\n     * @return Term length in days.\\n     */\\n    function getOwnershipTermLength() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xe82f096b9cb9d70211a119401a6b1714073d40a388b6d0a20f78e5cd908cccd8\",\"license\":\"MIT\"},\"contracts/libraries/UintArrayUtils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.10;\\n\\n// Adapted from Cryptofin labs Array Utilities\\n// https://github.com/cryptofinlabs/cryptofin-solidity/blob/master/contracts/array-utils/AddressArrayUtils.sol\\n\\nlibrary UintArrayUtils {\\n    /**\\n     * Finds the index of the first occurrence of the given element.\\n     * @param A The input array to search\\n     * @param a The value to find\\n     * @return Returns (index and isIn) for the first occurrence starting from index 0\\n     */\\n    function indexOf(uint256[] memory A, uint256 a) internal pure returns (uint256, bool) {\\n        uint256 length = A.length;\\n        for (uint256 i = 0; i < length; i++) {\\n            if (A[i] == a) {\\n                return (i, true);\\n            }\\n        }\\n        return (0, false);\\n    }\\n\\n    /**\\n     * Returns true if the value is present in the list. Uses indexOf internally.\\n     * @param A The input array to search\\n     * @param a The value to find\\n     * @return Returns isIn for the first occurrence starting from index 0\\n     */\\n    function contains(uint256[] memory A, uint256 a) internal pure returns (bool) {\\n        (, bool isIn) = indexOf(A, a);\\n        return isIn;\\n    }\\n\\n    /**\\n     * Computes the difference of two arrays. Assumes there are no duplicates.\\n     * @param A The first array\\n     * @param B The second array\\n     * @return A - B; an array of values in A not found in B.\\n     */\\n    function difference(uint256[] memory A, uint256[] memory B) internal pure returns (uint256[] memory) {\\n        uint256 length = A.length;\\n        bool[] memory includeMap = new bool[](length);\\n        uint256 count = 0;\\n        // First count the new length because can't push for in-memory arrays\\n        for (uint256 i = 0; i < length; i++) {\\n            uint256 e = A[i];\\n            if (!contains(B, e)) {\\n                includeMap[i] = true;\\n                count++;\\n            }\\n        }\\n        uint256[] memory newItems = new uint256[](count);\\n        uint256 j = 0;\\n        for (uint256 i = 0; i < length; i++) {\\n            if (includeMap[i]) {\\n                newItems[j] = A[i];\\n                j++;\\n            }\\n        }\\n        return newItems;\\n    }\\n\\n    /**\\n     * Returns the intersection of two arrays. Arrays are treated as collections, so duplicates are kept.\\n     * @param A The first array\\n     * @param B The second array\\n     * @return The intersection of the two arrays\\n     */\\n    function intersect(uint256[] memory A, uint256[] memory B) internal pure returns (uint256[] memory) {\\n        uint256 length = A.length;\\n        bool[] memory includeMap = new bool[](length);\\n        uint256 newLength = 0;\\n        for (uint256 i = 0; i < length; i++) {\\n            if (contains(B, A[i])) {\\n                includeMap[i] = true;\\n                newLength++;\\n            }\\n        }\\n        uint256[] memory newArray = new uint256[](newLength);\\n        uint256 j = 0;\\n        for (uint256 i = 0; i < length; i++) {\\n            if (includeMap[i]) {\\n                newArray[j] = A[i];\\n                j++;\\n            }\\n        }\\n        return newArray;\\n    }\\n\\n    /**\\n     * Returns the combination of two arrays\\n     * @param A The first array\\n     * @param B The second array\\n     * @return Returns A extended by B\\n     */\\n    function extend(uint256[] memory A, uint256[] memory B) internal pure returns (uint256[] memory) {\\n        uint256 aLength = A.length;\\n        uint256 bLength = B.length;\\n        uint256[] memory newArray = new uint256[](aLength + bLength);\\n        for (uint256 i = 0; i < aLength; i++) {\\n            newArray[i] = A[i];\\n        }\\n        for (uint256 i = 0; i < bLength; i++) {\\n            newArray[aLength + i] = B[i];\\n        }\\n        return newArray;\\n    }\\n}\\n\",\"keccak256\":\"0xaa77a18dd714b2947b83bd29af205dcec67950bbd0569e5237a1dbd29224192f\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a0604052306080523480156200001557600080fd5b506200002062000026565b620000e7565b600054610100900460ff1615620000935760405162461bcd60e51b815260206004820152602760248201527f496e697469616c697a61626c653a20636f6e747261637420697320696e697469604482015266616c697a696e6760c81b606482015260840160405180910390fd5b60005460ff90811614620000e5576000805460ff191660ff9081179091556040519081527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b565b60805161556e6200011f60003960008181610b2d01528181610bb701528181611082015281816111070152611252015261556e6000f3fe6080604052600436106102e75760003560e01c806380cece4811610184578063bcec58f7116100d6578063cd15832f1161008a578063f8e6135e11610064578063f8e6135e14610830578063fe52656f14610843578063ffa1ad741461085957600080fd5b8063cd15832f146107d0578063ea552bc1146107f0578063f79fa9881461081057600080fd5b8063bd7a5f05116100bb578063bd7a5f051461078a578063c20620051461079d578063c38f3037146107bd57600080fd5b8063bcec58f714610757578063bd2ec8c51461076a57600080fd5b8063a33def1511610138578063a53d30a411610112578063a53d30a4146106f5578063a8586f7b14610715578063b148440f1461072a57600080fd5b8063a33def1514610652578063a340cf7914610672578063a3f4df7e1461069f57600080fd5b80638633899c116101695780638633899c146105ff578063962ed2321461061f578063a27eee3c1461063f57600080fd5b806380cece48146105bf5780638299f9f9146105df57600080fd5b80634f1ef2861161023d57806358f48469116101f1578063728cdbca116101cb578063728cdbca1461055c57806374716c811461057c5780637cfe5213146105ac57600080fd5b806358f48469146104f8578063590ce8481461051857806368fd4dee1461052b57600080fd5b806352d1902d1161022257806352d1902d146104b057806354b4d676146104c557806356c63489146104d857600080fd5b80634f1ef2861461047d57806350064ea41461049057600080fd5b8063249f3eec1161029f57806346ca0f4d1161027957806346ca0f4d1461041257806349b6af311461044a5780634ad97b351461046a57600080fd5b8063249f3eec146103a55780632a1e1ee1146103da5780633659cfe6146103f057600080fd5b80631632a9bc116102d05780631632a9bc1461033f57806318fc47761461035f5780631f7418971461038f57600080fd5b806306d05ed2146102ec5780630ad2f0c31461031f575b600080fd5b3480156102f857600080fd5b5061030c6103073660046146e8565b6108a2565b6040519081526020015b60405180910390f35b34801561032b57600080fd5b5061030c61033a366004614754565b6108dc565b34801561034b57600080fd5b5061030c61035a366004614899565b610910565b34801561036b57600080fd5b5061037f61037a3660046148fd565b61099e565b6040519015158152602001610316565b34801561039b57600080fd5b5061030c60cd5481565b3480156103b157600080fd5b506103c56103c036600461493d565b6109c3565b60408051928352602083019190915201610316565b3480156103e657600080fd5b5061030c60ce5481565b3480156103fc57600080fd5b5061041061040b366004614754565b610b22565b005b34801561041e57600080fd5b5060ca54610432906001600160a01b031681565b6040516001600160a01b039091168152602001610316565b34801561045657600080fd5b50610410610465366004614a16565b610ca3565b610410610478366004614a16565b610e90565b61041061048b366004614a66565b611077565b34801561049c57600080fd5b506103c56104ab366004614b0c565b6111e4565b3480156104bc57600080fd5b5061030c611245565b61030c6104d3366004614bb5565b61130a565b3480156104e457600080fd5b5060cb54610432906001600160a01b031681565b34801561050457600080fd5b50610410610513366004614c01565b611452565b610410610526366004614c39565b611662565b34801561053757600080fd5b5061054b6105463660046148fd565b6117dc565b604051610316959493929190614d2a565b34801561056857600080fd5b50610410610577366004614da4565b61190c565b34801561058857600080fd5b5061059c6105973660046148fd565b611a90565b6040516103169493929190614e09565b6104106105ba366004614e43565b611b51565b3480156105cb57600080fd5b506104106105da366004614e43565b611c5e565b3480156105eb57600080fd5b5060c954610432906001600160a01b031681565b34801561060b57600080fd5b5061054b61061a366004614899565b611d63565b34801561062b57600080fd5b5061041061063a3660046148fd565b611e6f565b61030c61064d366004614bb5565b611f71565b34801561065e57600080fd5b5061054b61066d3660046146e8565b6120a6565b34801561067e57600080fd5b5061030c61068d366004614754565b60d06020526000908152604090205481565b3480156106ab57600080fd5b506106e86040518060400160405280600881526020017f45545320436f726500000000000000000000000000000000000000000000000081525081565b6040516103169190614f04565b34801561070157600080fd5b506103c5610710366004614f17565b612137565b34801561072157600080fd5b5061030c606481565b34801561073657600080fd5b5061030c610745366004614754565b60cf6020526000908152604090205481565b610410610765366004614c01565b6123de565b34801561077657600080fd5b50610410610785366004614f6e565b6125b9565b610410610798366004614a16565b612721565b3480156107a957600080fd5b506104106107b8366004614754565b612985565b6104106107cb366004614f90565b612ad2565b3480156107dc57600080fd5b506104106107eb366004614754565b612e20565b3480156107fc57600080fd5b5061037f61080b366004614899565b61305b565b34801561081c57600080fd5b5061037f61082b3660046146e8565b6130e3565b61041061083e366004614c01565b6130ff565b34801561084f57600080fd5b5061030c60cc5481565b34801561086557600080fd5b506106e86040518060400160405280600581526020017f302e302e3100000000000000000000000000000000000000000000000000000081525081565b6000848484846040516020016108bb9493929190615018565b60408051601f19818403018152919052805160209091012095945050505050565b6001600160a01b038116600090815260d0602090815260408083205460cf90925282205461090a919061507b565b92915050565b60cb5483516040516323c7e9f360e01b8152600092610994926001600160a01b03909116916323c7e9f39161094791600401614f04565b602060405180830381865afa158015610964573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109889190615092565b856040015185856108a2565b90505b9392505050565b600081815260d160205260408120600101546109bb57600061090a565b600192915050565b600080806109d460208801886150ab565b9050905060008167ffffffffffffffff8111156109f3576109f36145aa565b604051908082528060200260200182016040528015610a1c578160200160208202803683370190505b50905060005b82811015610af55760ca546001600160a01b031663f143fc61610a4860208c018c6150ab565b84818110610a5857610a586150f5565b9050602002810190610a6a919061510b565b6040518363ffffffff1660e01b8152600401610a8792919061517b565b602060405180830381865afa158015610aa4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ac89190615092565b828281518110610ada57610ada6150f5565b6020908102919091010152610aee8161518f565b9050610a22565b50610b13610b0c610b058a6151aa565b8989610910565b8287612137565b93509350505094509492505050565b306001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161415610bb55760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201526b19195b1959d85d1958d85b1b60a21b60648201526084015b60405180910390fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316610c107f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc546001600160a01b031690565b6001600160a01b031614610c7b5760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201526b6163746976652070726f787960a01b6064820152608401610bac565b610c8481613362565b60408051600080825260208201909252610ca091839190613428565b50565b610cab6135c8565b60c9546001600160a01b031663541d5548336040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602401602060405180830381865afa158015610d01573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d2591906151c6565b610d665760405162461bcd60e51b815260206004820152601260248201527121b0b63632b9103737ba102932b630bcb2b960711b6044820152606401610bac565b6000825111610daa5760405162461bcd60e51b815260206004820152601060248201526f139bc81d1859dcc81cdd5c1c1b1a595960821b6044820152606401610bac565b600083815260d160205260409020600401546001600160a01b03828116911614610e075760405162461bcd60e51b815260206004820152600e60248201526d139bdd08185d5d1a1bdc9a5e995960921b6044820152606401610bac565b600083815260d160209081526040918290208054835181840281018401909452808452610e6d93869390929190830182828015610e6357602002820191906000526020600020905b815481526020019060010190808311610e4f575b5050505050613622565b805190925015610e8157610e8183836137bd565b610e8b6001603355565b505050565b610e986135c8565b60c9546001600160a01b031663541d5548336040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602401602060405180830381865afa158015610eee573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f1291906151c6565b610f535760405162461bcd60e51b815260206004820152601260248201527121b0b63632b9103737ba102932b630bcb2b960711b6044820152606401610bac565b6000825111610f975760405162461bcd60e51b815260206004820152601060248201526f139bc81d1859dcc81cdd5c1c1b1a595960821b6044820152606401610bac565b600083815260d160205260409020600401546001600160a01b03828116911614610ff45760405162461bcd60e51b815260206004820152600e60248201526d139bdd08185d5d1a1bdc9a5e995960921b6044820152606401610bac565b600083815260d16020908152604091829020805483518184028101840190945280845261105a9386939092919083018282801561105057602002820191906000526020600020905b81548152602001906001019080831161103c575b505050505061387a565b805190925015610e815761106d82613a0d565b610e818383613b2d565b306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614156111055760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201526b19195b1959d85d1958d85b1b60a21b6064820152608401610bac565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166111607f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc546001600160a01b031690565b6001600160a01b0316146111cb5760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201526b6163746976652070726f787960a01b6064820152608401610bac565b6111d482613362565b6111e082826001613428565b5050565b60008061123561122e8989898080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152508b92508a91506108a29050565b8a85612137565b9150915097509795505050505050565b6000306001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146112e55760405162461bcd60e51b815260206004820152603860248201527f555550535570677261646561626c653a206d757374206e6f742062652063616c60448201527f6c6564207468726f7567682064656c656761746563616c6c00000000000000006064820152608401610bac565b507f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc90565b60006113146135c8565b60c9546001600160a01b031663541d5548336040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602401602060405180830381865afa15801561136a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061138e91906151c6565b6113cf5760405162461bcd60e51b815260206004820152601260248201527121b0b63632b9103737ba102932b630bcb2b960711b6044820152606401610bac565b60ca546001600160a01b031663a675f1e3858533866040518563ffffffff1660e01b815260040161140394939291906151e1565b6020604051808303816000875af1158015611422573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114469190615092565b90506109976001603355565b60c9546001600160a01b031663541d5548336040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602401602060405180830381865afa1580156114a8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114cc91906151c6565b61150d5760405162461bcd60e51b815260206004820152601260248201527121b0b63632b9103737ba102932b630bcb2b960711b6044820152606401610bac565b600061151c60208501856150ab565b9050905060008167ffffffffffffffff81111561153b5761153b6145aa565b604051908082528060200260200182016040528015611564578160200160208202803683370190505b50905060005b8281101561163d5760ca546001600160a01b031663f143fc6161159060208901896150ab565b848181106115a0576115a06150f5565b90506020028101906115b2919061510b565b6040518363ffffffff1660e01b81526004016115cf92919061517b565b602060405180830381865afa1580156115ec573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116109190615092565b828281518110611622576116226150f5565b60209081029190910101526116368161518f565b905061156a565b5061165b61165461164d876151aa565b8587610910565b8286610ca3565b5050505050565b60c9546001600160a01b031663541d5548336040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602401602060405180830381865afa1580156116b8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116dc91906151c6565b61171d5760405162461bcd60e51b815260206004820152601260248201527121b0b63632b9103737ba102932b630bcb2b960711b6044820152606401610bac565b85518061175f5760405162461bcd60e51b815260206004820152601060248201526f139bc81d1859dcc81cdd5c1c1b1a595960821b6044820152606401610bac565b60006117a58787878080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152508892508991506108a29050565b90506117b08161099e565b156117c5576117c0818986610e90565b6117d2565b6117d28888888888612ad2565b5050505050505050565b600081815260d16020908152604080832060018101546003820154600483015483548551818802810188019096528086526060979688968896879690958695919460028701946001600160a01b0392831694929093169287919083018282801561186557602002820191906000526020600020905b815481526020019060010190808311611851575b5050505050945082805461187890615216565b80601f01602080910402602001604051908101604052809291908181526020018280546118a490615216565b80156118f15780601f106118c6576101008083540402835291602001916118f1565b820191906000526020600020905b8154815290600101906020018083116118d457829003601f168201915b50505050509250955095509550955095505091939590929450565b600054610100900460ff161580801561192c5750600054600160ff909116105b806119465750303b158015611946575060005460ff166001145b6119b85760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a65640000000000000000000000000000000000006064820152608401610bac565b6000805460ff1916600117905580156119db576000805461ff0019166101001790555b6119e3613be5565b60c980546001600160a01b03808a1673ffffffffffffffffffffffffffffffffffffffff199283161790925560ca805489841690831617905560cb805492881692909116919091179055611a3684611e6f565b611a4083836125b9565b8015611a87576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498906020015b60405180910390a15b50505050505050565b60d16020526000908152604090206001810154600282018054919291611ab590615216565b80601f0160208091040260200160405190810160405280929190818152602001828054611ae190615216565b8015611b2e5780601f10611b0357610100808354040283529160200191611b2e565b820191906000526020600020905b815481529060010190602001808311611b1157829003601f168201915b50505050600383015460049093015491926001600160a01b039081169216905084565b60c9546001600160a01b031663541d5548336040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602401602060405180830381865afa158015611ba7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611bcb91906151c6565b611c0c5760405162461bcd60e51b815260206004820152601260248201527121b0b63632b9103737ba102932b630bcb2b960711b6044820152606401610bac565b611c56611c1b858584866108a2565b878780806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250879250612721915050565b505050505050565b60c9546001600160a01b031663541d5548336040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602401602060405180830381865afa158015611cb4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611cd891906151c6565b611d195760405162461bcd60e51b815260206004820152601260248201527121b0b63632b9103737ba102932b630bcb2b960711b6044820152606401610bac565b611c56611d28858584866108a2565b878780806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250879250610ca3915050565b60cb5483516040516323c7e9f360e01b815260609260009284928492839230926368fd4dee92611df8926001600160a01b03909116916323c7e9f391611dab91600401614f04565b602060405180830381865afa158015611dc8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611dec9190615092565b8b604001518b8b6108a2565b6040518263ffffffff1660e01b8152600401611e1691815260200190565b600060405180830381865afa158015611e33573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611e5b919081019061529b565b939c929b5090995097509095509350505050565b60c9546001600160a01b03166324d7806c336040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602401602060405180830381865afa158015611ec5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ee991906151c6565b611f355760405162461bcd60e51b815260206004820152601860248201527f43616c6c6572206e6f742041646d696e6973747261746f7200000000000000006044820152606401610bac565b60cc8190556040518181527fc7c22e024ab071901183022e8bc5d443dd329ae4134ff83caa3944e1eab152d8906020015b60405180910390a150565b60c9546000906001600160a01b031663541d5548336040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602401602060405180830381865afa158015611fca573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611fee91906151c6565b61202f5760405162461bcd60e51b815260206004820152601260248201527121b0b63632b9103737ba102932b630bcb2b960711b6044820152606401610bac565b60ca546001600160a01b031663fed6c2e9858533866040518563ffffffff1660e01b815260040161206394939291906151e1565b6020604051808303816000875af1158015612082573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109949190615092565b60606000818180306368fd4dee6120bf8b8b8b8b6108a2565b6040518263ffffffff1660e01b81526004016120dd91815260200190565b600060405180830381865afa1580156120fa573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052612122919081019061529b565b94509450945094509450945094509450945094565b6000806121438561099e565b61215c576121518451613c5a565b8451915091506123d6565b600083600281111561217057612170615382565b14156121dd57600085815260d1602090815260409182902080548351818402810184019094528084526121da93889390929190830182828015611050576020028201919060005260206000209081548152602001906001019080831161103c57505050505061387a565b93505b60018360028111156121f1576121f1615382565b141561233857600085815260d1602090815260408083208054825181850281018501909352808352919290919083018282801561224d57602002820191906000526020600020905b815481526020019060010190808311612239575b505050600089815260d160209081526040808320805482518185028101850190935280835296975092956122ba9550909350908301828280156122af57602002820191906000526020600020905b81548152602001906001019080831161229b575b50505050508761387a565b80519091501561232957600087815260d160209081526040918290208054835181840281018401909452808452612326939283018282801561231b57602002820191906000526020600020905b815481526020019060010190808311612307575b50505050508261387a565b91505b612333868361387a565b955050505b600283600281111561234c5761234c615382565b14156123c557600085815260d1602090815260409182902080548351818402810184019094528084526123b693889390929190830182828015610e635760200282019190600052602060002090815481526020019060010190808311610e4f575050505050613622565b935060008451915091506123d6565b6123cf8451613c5a565b8451915091505b935093915050565b60c9546001600160a01b031663541d5548336040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602401602060405180830381865afa158015612434573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061245891906151c6565b6124995760405162461bcd60e51b815260206004820152601260248201527121b0b63632b9103737ba102932b630bcb2b960711b6044820152606401610bac565b60006124a860208501856150ab565b915050806124eb5760405162461bcd60e51b815260206004820152601060248201526f139bc81d1859dcc81cdd5c1c1b1a595960821b6044820152606401610bac565b60008167ffffffffffffffff811115612506576125066145aa565b60405190808252806020026020018201604052801561252f578160200160208202803683370190505b50905060005b828110156125a25761257561254d60208801886150ab565b8381811061255d5761255d6150f5565b905060200281019061256f919061510b565b87611f71565b828281518110612587576125876150f5565b602090810291909101015261259b8161518f565b9050612535565b5061165b6125b261164d876151aa565b8286612721565b60c9546001600160a01b03166324d7806c336040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602401602060405180830381865afa15801561260f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061263391906151c6565b61267f5760405162461bcd60e51b815260206004820152601860248201527f43616c6c6572206e6f742041646d696e6973747261746f7200000000000000006044820152606401610bac565b606461268b8284615398565b11156126d95760405162461bcd60e51b815260206004820181905260248201527f70657263656e7461676573206d757374206e6f74206265206f766572203130306044820152606401610bac565b60cd82905560ce81905560408051838152602081018390527fea32590d8a489d3bc12129ff9ed59ccf95efa42b017e0f23a14b57881a562a5e91015b60405180910390a15050565b6127296135c8565b60c9546001600160a01b031663541d5548336040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602401602060405180830381865afa15801561277f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127a391906151c6565b6127e45760405162461bcd60e51b815260206004820152601260248201527121b0b63632b9103737ba102932b630bcb2b960711b6044820152606401610bac565b60008251116128285760405162461bcd60e51b815260206004820152601060248201526f139bc81d1859dcc81cdd5c1c1b1a595960821b6044820152606401610bac565b600083815260d160205260409020600401546001600160a01b038281169116146128855760405162461bcd60e51b815260206004820152600e60248201526d139bdd08185d5d1a1bdc9a5e995960921b6044820152606401610bac565b600083815260d16020908152604080832080548251818502810185019093528083526128e5938301828280156128da57602002820191906000526020600020905b8154815260200190600101908083116128c6575b50505050508461387a565b8051909150156128f9576128f984826137bd565b600084815260d16020908152604091829020805483518184028101840190945280845261295d93879390929190830182828015611050576020028201919060005260206000209081548152602001906001019080831161103c57505050505061387a565b80519093501561297a5761297083613a0d565b61297a8484613b2d565b50610e8b6001603355565b61298d6135c8565b6000612998826108dc565b90506000811180156129aa5750478111155b15612ac7576001600160a01b038216600090815260d060205260409020546129d3908290615398565b6001600160a01b038316600081815260d0602052604080822093909355915183908381818185875af1925050503d8060008114612a2c576040519150601f19603f3d011682016040523d82523d6000602084013e612a31565b606091505b5050905080612a825760405162461bcd60e51b815260206004820152601060248201527f5472616e73666572206661696c65642e000000000000000000000000000000006044820152606401610bac565b826001600160a01b03167feaff4b37086828766ad3268786972c0cd24259d4c87a80f9d3963a3c3d999b0d83604051612abd91815260200190565b60405180910390a2505b50610ca06001603355565b612ada6135c8565b60c9546001600160a01b031663541d5548336040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602401602060405180830381865afa158015612b30573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b5491906151c6565b612b955760405162461bcd60e51b815260206004820152601260248201527121b0b63632b9103737ba102932b630bcb2b960711b6044820152606401610bac565b845180612bd75760405162461bcd60e51b815260206004820152601060248201526f139bc81d1859dcc81cdd5c1c1b1a595960821b6044820152606401610bac565b60005b81811015612cce5760ca5487516001600160a01b039091169063b7bd44ed90899084908110612c0b57612c0b6150f5565b60200260200101516040518263ffffffff1660e01b8152600401612c3191815260200190565b602060405180830381865afa158015612c4e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c7291906151c6565b612cbe5760405162461bcd60e51b815260206004820152600d60248201527f496e76616c6964207461674964000000000000000000000000000000000000006044820152606401610bac565b612cc78161518f565b9050612bda565b5060038310801590612ce05750601f83105b612d2c5760405162461bcd60e51b815260206004820152601460248201527f5265636f7264207479706520746f6f206c6f6e670000000000000000000000006044820152606401610bac565b60cb546040517fcd7c68e2000000000000000000000000000000000000000000000000000000008152600481018790526001600160a01b039091169063cd7c68e290602401602060405180830381865afa158015612d8e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612db291906151c6565b612dfe5760405162461bcd60e51b815260206004820152601060248201527f496e76616c6964207461726765744964000000000000000000000000000000006044820152606401610bac565b612e0786613a0d565b612e15868686863387613c80565b5061165b6001603355565b60c9546001600160a01b03166324d7806c336040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602401602060405180830381865afa158015612e76573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e9a91906151c6565b612ee65760405162461bcd60e51b815260206004820152601860248201527f43616c6c6572206e6f742041646d696e6973747261746f7200000000000000006044820152606401610bac565b6001600160a01b038116612f3c5760405162461bcd60e51b815260206004820152601660248201527f416464726573732063616e6e6f74206265207a65726f000000000000000000006044820152606401610bac565b6001600160a01b0381166324d7806c336040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602401602060405180830381865afa158015612f90573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612fb491906151c6565b6130005760405162461bcd60e51b815260206004820181905260248201527f43616c6c6572206e6f742061646d696e20696e206e657720636f6e74726163746044820152606401610bac565b60c9805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0383169081179091556040519081527f2f55f724ae3134584dfdd86a4ee1e090635ff9913722b5fe06e064cc7e3ed8b490602001611f66565b60cb5483516040516323c7e9f360e01b81526000926109949261037a926001600160a01b03909216916323c7e9f39161309691600401614f04565b602060405180830381865afa1580156130b3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906130d79190615092565b866040015186866108a2565b60006130f461037a868686866108a2565b90505b949350505050565b60c9546001600160a01b031663541d5548336040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602401602060405180830381865afa158015613155573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061317991906151c6565b6131ba5760405162461bcd60e51b815260206004820152601260248201527121b0b63632b9103737ba102932b630bcb2b960711b6044820152606401610bac565b60006131c960208501856150ab565b9150508061320c5760405162461bcd60e51b815260206004820152601060248201526f139bc81d1859dcc81cdd5c1c1b1a595960821b6044820152606401610bac565b60008167ffffffffffffffff811115613227576132276145aa565b604051908082528060200260200182016040528015613250578160200160208202803683370190505b50905060005b8281101561329b5761326e61254d60208801886150ab565b828281518110613280576132806150f5565b60209081029190910101526132948161518f565b9050613256565b5060006132aa61164d876151aa565b90506132b58161099e565b156132ca576132c5818387610e90565b611c56565b60cb546000906001600160a01b031663cf99c8156132e8898061510b565b6040518363ffffffff1660e01b815260040161330592919061517b565b6020604051808303816000875af1158015613324573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906133489190615092565b9050611a87838261335c60408b018b61510b565b8a612ad2565b60c9546001600160a01b03166324d7806c336040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602401602060405180830381865afa1580156133b8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906133dc91906151c6565b610ca05760405162461bcd60e51b815260206004820152601860248201527f43616c6c6572206e6f742041646d696e6973747261746f7200000000000000006044820152606401610bac565b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff161561345b57610e8b83613def565b826001600160a01b03166352d1902d6040518163ffffffff1660e01b8152600401602060405180830381865afa9250505080156134b5575060408051601f3d908101601f191682019092526134b291810190615092565b60015b6135275760405162461bcd60e51b815260206004820152602e60248201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960448201527f6f6e206973206e6f7420555550530000000000000000000000000000000000006064820152608401610bac565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc81146135bc5760405162461bcd60e51b815260206004820152602960248201527f45524331393637557067726164653a20756e737570706f727465642070726f7860448201527f6961626c655555494400000000000000000000000000000000000000000000006064820152608401610bac565b50610e8b838383613eba565b6002603354141561361b5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610bac565b6002603355565b815160609060008167ffffffffffffffff811115613642576136426145aa565b60405190808252806020026020018201604052801561366b578160200160208202803683370190505b5090506000805b838110156136e65761369d86888381518110613690576136906150f5565b6020026020010151613ee5565b156136d45760018382815181106136b6576136b66150f5565b91151560209283029190910190910152816136d08161518f565b9250505b806136de8161518f565b915050613672565b5060008167ffffffffffffffff811115613702576137026145aa565b60405190808252806020026020018201604052801561372b578160200160208202803683370190505b5090506000805b858110156137b05784818151811061374c5761374c6150f5565b60200260200101511561379e5788818151811061376b5761376b6150f5565b6020026020010151838381518110613785576137856150f5565b60209081029190910101528161379a8161518f565b9250505b806137a88161518f565b915050613732565b5090979650505050505050565b600082815260d16020908152604091829020805483518184028101840190945280845261381d939283018282801561231b57602002820191906000526020600020908154815260200190600101908083116123075750505050508261387a565b600083815260d160209081526040909120825161384093919291909101906144d7565b507f926bdaffb66b17607427b94e3524f536690b435ab89ee7178c6fef859c17f5be8260026040516127159291906153b0565b6001603355565b815160609060008167ffffffffffffffff81111561389a5761389a6145aa565b6040519080825280602002602001820160405280156138c3578160200160208202803683370190505b5090506000805b838110156139435760008782815181106138e6576138e66150f5565b602002602001015190506138fa8782613ee5565b613930576001848381518110613912576139126150f5565b911515602092830291909101909101528261392c8161518f565b9350505b508061393b8161518f565b9150506138ca565b5060008167ffffffffffffffff81111561395f5761395f6145aa565b604051908082528060200260200182016040528015613988578160200160208202803683370190505b5090506000805b858110156137b0578481815181106139a9576139a96150f5565b6020026020010151156139fb578881815181106139c8576139c86150f5565b60200260200101518383815181106139e2576139e26150f5565b6020908102919091010152816139f78161518f565b9250505b80613a058161518f565b91505061398f565b613a178151613c5a565b3414613a655760405162461bcd60e51b815260206004820152601260248201527f77726f6e672066656520737570706c69656400000000000000000000000000006044820152606401610bac565b60c954604080517f3c0c456600000000000000000000000000000000000000000000000000000000815290516000926001600160a01b031691633c0c45669160048083019260209291908290030181865afa158015613ac8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613aec91906153e2565b905060005b8251811015610e8b57613b1d838281518110613b0f57613b0f6150f5565b602002602001015183613efb565b613b268161518f565b9050613af1565b600082815260d160209081526040918290208054835181840281018401909452808452613b8f9392830182828015613b8457602002820191906000526020600020905b815481526020019060010190808311613b70575b50505050508261417c565b600083815260d1602090815260409091208251613bb293919291909101906144d7565b507f926bdaffb66b17607427b94e3524f536690b435ab89ee7178c6fef859c17f5be8260006040516127159291906153b0565b600054610100900460ff16613c505760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608401610bac565b613c58614292565b565b6000808215801590613c6e5750600060cc54115b1561090a5760cc5461099790846153ff565b6000613cc68686868080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152508892508791506108a29050565b90506040518060a0016040528088815260200187815260200186868080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201829052509385525050506001600160a01b0380871660208085019190915290861660409384015284825260d18152919020825180519192613d53928492909101906144d7565b50602082810151600183015560408301518051613d769260028501920190614522565b50606082015160038201805473ffffffffffffffffffffffffffffffffffffffff199081166001600160a01b03938416179091556080909301516004909201805490931691161790556040518181527f68ebebf651507af1acff160fd4e8f900a0b89fe3224f86b8306a3b857cd7542e90602001611a7e565b6001600160a01b0381163b613e6c5760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201527f6f74206120636f6e7472616374000000000000000000000000000000000000006064820152608401610bac565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b613ec3836142fd565b600082511180613ed05750805b15610e8b57613edf838361433d565b50505050565b600080613ef28484614362565b95945050505050565b60ca546040517f6352211e000000000000000000000000000000000000000000000000000000008152600481018490526000916001600160a01b031690636352211e90602401602060405180830381865afa158015613f5e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613f8291906153e2565b60ca546040517f4b3d267f000000000000000000000000000000000000000000000000000000008152600481018690529192506000916001600160a01b0390911690634b3d267f90602401600060405180830381865afa158015613fea573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052614012919081019061541e565b90506000606460cd543461402691906153ff565b61403091906154d3565b90506000606460ce543461404491906153ff565b61404e91906154d3565b9050600061405c8284615398565b614066903461507b565b6001600160a01b038716600090815260cf602052604090205490915061408d908490615398565b6001600160a01b03808816600090815260cf6020526040808220939093558651909116815220546140bf908390615398565b84516001600160a01b03908116600090815260cf60205260409020919091558581169087161415614136576020808501516001600160a01b0316600090815260cf9091526040902054614113908290615398565b6020808601516001600160a01b0316600090815260cf9091526040902055611a87565b6001600160a01b038516600090815260cf602052604090205461415a908290615398565b6001600160a01b038616600090815260cf602052604090205550505050505050565b815181516060919060006141908284615398565b67ffffffffffffffff8111156141a8576141a86145aa565b6040519080825280602002602001820160405280156141d1578160200160208202803683370190505b50905060005b83811015614228578681815181106141f1576141f16150f5565b602002602001015182828151811061420b5761420b6150f5565b6020908102919091010152806142208161518f565b9150506141d7565b5060005b8281101561428857858181518110614246576142466150f5565b602002602001015182828661425b9190615398565b8151811061426b5761426b6150f5565b6020908102919091010152806142808161518f565b91505061422c565b5095945050505050565b600054610100900460ff166138735760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608401610bac565b61430681613def565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b60606109978383604051806060016040528060278152602001615512602791396143c4565b81516000908190815b818110156143b35784868281518110614386576143866150f5565b602002602001015114156143a1579250600191506143bd9050565b806143ab8161518f565b91505061436b565b5060008092509250505b9250929050565b6060600080856001600160a01b0316856040516143e191906154f5565b600060405180830381855af49150503d806000811461441c576040519150601f19603f3d011682016040523d82523d6000602084013e614421565b606091505b50915091506144328683838761443c565b9695505050505050565b606083156144a85782516144a1576001600160a01b0385163b6144a15760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610bac565b50816130f7565b6130f783838151156144bd5781518083602001fd5b8060405162461bcd60e51b8152600401610bac9190614f04565b828054828255906000526020600020908101928215614512579160200282015b828111156145125782518255916020019190600101906144f7565b5061451e929150614595565b5090565b82805461452e90615216565b90600052602060002090601f0160209004810192826145505760008555614512565b82601f1061456957805160ff1916838001178555614512565b8280016001018555821561451257918201828111156145125782518255916020019190600101906144f7565b5b8082111561451e5760008155600101614596565b634e487b7160e01b600052604160045260246000fd5b6040516060810167ffffffffffffffff811182821017156145e3576145e36145aa565b60405290565b60405160a0810167ffffffffffffffff811182821017156145e3576145e36145aa565b604051601f8201601f1916810167ffffffffffffffff81118282101715614635576146356145aa565b604052919050565b600067ffffffffffffffff821115614657576146576145aa565b50601f01601f191660200190565b60006146786146738461463d565b61460c565b905082815283838301111561468c57600080fd5b828260208301376000602084830101529392505050565b600082601f8301126146b457600080fd5b61099783833560208501614665565b6001600160a01b0381168114610ca057600080fd5b80356146e3816146c3565b919050565b600080600080608085870312156146fe57600080fd5b84359350602085013567ffffffffffffffff81111561471c57600080fd5b614728878288016146a3565b9350506040850135614739816146c3565b91506060850135614749816146c3565b939692955090935050565b60006020828403121561476657600080fd5b8135610997816146c3565b600067ffffffffffffffff82111561478b5761478b6145aa565b5060051b60200190565b6000606082840312156147a757600080fd5b6147af6145c0565b9050813567ffffffffffffffff808211156147c957600080fd5b6147d5858386016146a3565b83526020915081840135818111156147ec57600080fd5b8401601f810186136147fd57600080fd5b803561480b61467382614771565b81815260059190911b8201840190848101908883111561482a57600080fd5b8584015b83811015614862578035868111156148465760008081fd5b6148548b89838901016146a3565b84525091860191860161482e565b50808688015250505050604084013591508082111561488057600080fd5b5061488d848285016146a3565b60408301525092915050565b6000806000606084860312156148ae57600080fd5b833567ffffffffffffffff8111156148c557600080fd5b6148d186828701614795565b93505060208401356148e2816146c3565b915060408401356148f2816146c3565b809150509250925092565b60006020828403121561490f57600080fd5b5035919050565b60006060828403121561492857600080fd5b50919050565b8035600381106146e357600080fd5b6000806000806080858703121561495357600080fd5b843567ffffffffffffffff81111561496a57600080fd5b61497687828801614916565b9450506020850135614987816146c3565b92506040850135614997816146c3565b91506149a56060860161492e565b905092959194509250565b600082601f8301126149c157600080fd5b813560206149d161467383614771565b82815260059290921b840181019181810190868411156149f057600080fd5b8286015b84811015614a0b57803583529183019183016149f4565b509695505050505050565b600080600060608486031215614a2b57600080fd5b83359250602084013567ffffffffffffffff811115614a4957600080fd5b614a55868287016149b0565b92505060408401356148f2816146c3565b60008060408385031215614a7957600080fd5b8235614a84816146c3565b9150602083013567ffffffffffffffff811115614aa057600080fd5b8301601f81018513614ab157600080fd5b614ac085823560208401614665565b9150509250929050565b60008083601f840112614adc57600080fd5b50813567ffffffffffffffff811115614af457600080fd5b6020830191508360208285010111156143bd57600080fd5b600080600080600080600060c0888a031215614b2757600080fd5b873567ffffffffffffffff80821115614b3f57600080fd5b614b4b8b838c016149b0565b985060208a0135975060408a0135915080821115614b6857600080fd5b50614b758a828b01614aca565b9096509450506060880135614b89816146c3565b92506080880135614b99816146c3565b9150614ba760a0890161492e565b905092959891949750929550565b600080600060408486031215614bca57600080fd5b833567ffffffffffffffff811115614be157600080fd5b614bed86828701614aca565b90945092505060208401356148f2816146c3565b600080600060608486031215614c1657600080fd5b833567ffffffffffffffff811115614c2d57600080fd5b6148d186828701614916565b60008060008060008060a08789031215614c5257600080fd5b863567ffffffffffffffff80821115614c6a57600080fd5b614c768a838b016149b0565b9750602089013596506040890135915080821115614c9357600080fd5b50614ca089828a01614aca565b9095509350506060870135614cb4816146c3565b91506080870135614cc4816146c3565b809150509295509295509295565b60005b83811015614ced578181015183820152602001614cd5565b83811115613edf5750506000910152565b60008151808452614d16816020860160208601614cd2565b601f01601f19169290920160200192915050565b60a0808252865190820181905260009060209060c0840190828a01845b82811015614d6357815184529284019290840190600101614d47565b50505087828501528381036040850152614d7d8188614cfe565b925050506001600160a01b0380851660608401528084166080840152509695505050505050565b60008060008060008060c08789031215614dbd57600080fd5b8635614dc8816146c3565b95506020870135614dd8816146c3565b94506040870135614de8816146c3565b959894975094956060810135955060808101359460a0909101359350915050565b848152608060208201526000614e226080830186614cfe565b6001600160a01b039485166040840152929093166060909101529392505050565b60008060008060008060a08789031215614e5c57600080fd5b863567ffffffffffffffff80821115614e7457600080fd5b818901915089601f830112614e8857600080fd5b813581811115614e9757600080fd5b8a60208260051b8501011115614eac57600080fd5b60209283019850965090880135945060408801359080821115614ece57600080fd5b50614edb89828a016146a3565b935050614eea606088016146d8565b9150614ef8608088016146d8565b90509295509295509295565b6020815260006109976020830184614cfe565b600080600060608486031215614f2c57600080fd5b83359250602084013567ffffffffffffffff811115614f4a57600080fd5b614f56868287016149b0565b925050614f656040850161492e565b90509250925092565b60008060408385031215614f8157600080fd5b50508035926020909101359150565b600080600080600060808688031215614fa857600080fd5b853567ffffffffffffffff80821115614fc057600080fd5b614fcc89838a016149b0565b9650602088013595506040880135915080821115614fe957600080fd5b50614ff688828901614aca565b909450925050606086013561500a816146c3565b809150509295509295909350565b84815260008451615030816020850160208901614cd2565b6bffffffffffffffffffffffff19606095861b81169190930160208101919091529290931b1660348201526048019392505050565b634e487b7160e01b600052601160045260246000fd5b60008282101561508d5761508d615065565b500390565b6000602082840312156150a457600080fd5b5051919050565b6000808335601e198436030181126150c257600080fd5b83018035915067ffffffffffffffff8211156150dd57600080fd5b6020019150600581901b36038213156143bd57600080fd5b634e487b7160e01b600052603260045260246000fd5b6000808335601e1984360301811261512257600080fd5b83018035915067ffffffffffffffff82111561513d57600080fd5b6020019150368190038213156143bd57600080fd5b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b602081526000610994602083018486615152565b60006000198214156151a3576151a3615065565b5060010190565b600061090a3683614795565b805180151581146146e357600080fd5b6000602082840312156151d857600080fd5b610997826151b6565b6060815260006151f5606083018688615152565b6001600160a01b039485166020840152929093166040909101529392505050565b600181811c9082168061522a57607f821691505b6020821081141561492857634e487b7160e01b600052602260045260246000fd5b600082601f83011261525c57600080fd5b815161526a6146738261463d565b81815284602083860101111561527f57600080fd5b6130f7826020830160208701614cd2565b80516146e3816146c3565b600080600080600060a086880312156152b357600080fd5b855167ffffffffffffffff808211156152cb57600080fd5b818801915088601f8301126152df57600080fd5b815160206152ef61467383614771565b82815260059290921b8401810191818101908c84111561530e57600080fd5b948201945b8386101561532c57855182529482019490820190615313565b918b015160408c0151929a50985090935050508082111561534c57600080fd5b506153598882890161524b565b93505061536860608701615290565b915061537660808701615290565b90509295509295909350565b634e487b7160e01b600052602160045260246000fd5b600082198211156153ab576153ab615065565b500190565b82815260408101600383106153d557634e487b7160e01b600052602160045260246000fd5b8260208301529392505050565b6000602082840312156153f457600080fd5b8151610997816146c3565b600081600019048311821515161561541957615419615065565b500290565b60006020828403121561543057600080fd5b815167ffffffffffffffff8082111561544857600080fd5b9083019060a0828603121561545c57600080fd5b6154646145e9565b825161546f816146c3565b8152602083015161547f816146c3565b602082015260408301518281111561549657600080fd5b6154a28782860161524b565b6040830152506154b4606084016151b6565b60608201526154c5608084016151b6565b608082015295945050505050565b6000826154f057634e487b7160e01b600052601260045260246000fd5b500490565b60008251615507818460208701614cd2565b919091019291505056fe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a2646970667358221220b938bb01f95b5548860ce2066d7206f1fb1e31b0ca597ef40767848b0d467b5864736f6c634300080c0033",
  "deployedBytecode": "0x6080604052600436106102e75760003560e01c806380cece4811610184578063bcec58f7116100d6578063cd15832f1161008a578063f8e6135e11610064578063f8e6135e14610830578063fe52656f14610843578063ffa1ad741461085957600080fd5b8063cd15832f146107d0578063ea552bc1146107f0578063f79fa9881461081057600080fd5b8063bd7a5f05116100bb578063bd7a5f051461078a578063c20620051461079d578063c38f3037146107bd57600080fd5b8063bcec58f714610757578063bd2ec8c51461076a57600080fd5b8063a33def1511610138578063a53d30a411610112578063a53d30a4146106f5578063a8586f7b14610715578063b148440f1461072a57600080fd5b8063a33def1514610652578063a340cf7914610672578063a3f4df7e1461069f57600080fd5b80638633899c116101695780638633899c146105ff578063962ed2321461061f578063a27eee3c1461063f57600080fd5b806380cece48146105bf5780638299f9f9146105df57600080fd5b80634f1ef2861161023d57806358f48469116101f1578063728cdbca116101cb578063728cdbca1461055c57806374716c811461057c5780637cfe5213146105ac57600080fd5b806358f48469146104f8578063590ce8481461051857806368fd4dee1461052b57600080fd5b806352d1902d1161022257806352d1902d146104b057806354b4d676146104c557806356c63489146104d857600080fd5b80634f1ef2861461047d57806350064ea41461049057600080fd5b8063249f3eec1161029f57806346ca0f4d1161027957806346ca0f4d1461041257806349b6af311461044a5780634ad97b351461046a57600080fd5b8063249f3eec146103a55780632a1e1ee1146103da5780633659cfe6146103f057600080fd5b80631632a9bc116102d05780631632a9bc1461033f57806318fc47761461035f5780631f7418971461038f57600080fd5b806306d05ed2146102ec5780630ad2f0c31461031f575b600080fd5b3480156102f857600080fd5b5061030c6103073660046146e8565b6108a2565b6040519081526020015b60405180910390f35b34801561032b57600080fd5b5061030c61033a366004614754565b6108dc565b34801561034b57600080fd5b5061030c61035a366004614899565b610910565b34801561036b57600080fd5b5061037f61037a3660046148fd565b61099e565b6040519015158152602001610316565b34801561039b57600080fd5b5061030c60cd5481565b3480156103b157600080fd5b506103c56103c036600461493d565b6109c3565b60408051928352602083019190915201610316565b3480156103e657600080fd5b5061030c60ce5481565b3480156103fc57600080fd5b5061041061040b366004614754565b610b22565b005b34801561041e57600080fd5b5060ca54610432906001600160a01b031681565b6040516001600160a01b039091168152602001610316565b34801561045657600080fd5b50610410610465366004614a16565b610ca3565b610410610478366004614a16565b610e90565b61041061048b366004614a66565b611077565b34801561049c57600080fd5b506103c56104ab366004614b0c565b6111e4565b3480156104bc57600080fd5b5061030c611245565b61030c6104d3366004614bb5565b61130a565b3480156104e457600080fd5b5060cb54610432906001600160a01b031681565b34801561050457600080fd5b50610410610513366004614c01565b611452565b610410610526366004614c39565b611662565b34801561053757600080fd5b5061054b6105463660046148fd565b6117dc565b604051610316959493929190614d2a565b34801561056857600080fd5b50610410610577366004614da4565b61190c565b34801561058857600080fd5b5061059c6105973660046148fd565b611a90565b6040516103169493929190614e09565b6104106105ba366004614e43565b611b51565b3480156105cb57600080fd5b506104106105da366004614e43565b611c5e565b3480156105eb57600080fd5b5060c954610432906001600160a01b031681565b34801561060b57600080fd5b5061054b61061a366004614899565b611d63565b34801561062b57600080fd5b5061041061063a3660046148fd565b611e6f565b61030c61064d366004614bb5565b611f71565b34801561065e57600080fd5b5061054b61066d3660046146e8565b6120a6565b34801561067e57600080fd5b5061030c61068d366004614754565b60d06020526000908152604090205481565b3480156106ab57600080fd5b506106e86040518060400160405280600881526020017f45545320436f726500000000000000000000000000000000000000000000000081525081565b6040516103169190614f04565b34801561070157600080fd5b506103c5610710366004614f17565b612137565b34801561072157600080fd5b5061030c606481565b34801561073657600080fd5b5061030c610745366004614754565b60cf6020526000908152604090205481565b610410610765366004614c01565b6123de565b34801561077657600080fd5b50610410610785366004614f6e565b6125b9565b610410610798366004614a16565b612721565b3480156107a957600080fd5b506104106107b8366004614754565b612985565b6104106107cb366004614f90565b612ad2565b3480156107dc57600080fd5b506104106107eb366004614754565b612e20565b3480156107fc57600080fd5b5061037f61080b366004614899565b61305b565b34801561081c57600080fd5b5061037f61082b3660046146e8565b6130e3565b61041061083e366004614c01565b6130ff565b34801561084f57600080fd5b5061030c60cc5481565b34801561086557600080fd5b506106e86040518060400160405280600581526020017f302e302e3100000000000000000000000000000000000000000000000000000081525081565b6000848484846040516020016108bb9493929190615018565b60408051601f19818403018152919052805160209091012095945050505050565b6001600160a01b038116600090815260d0602090815260408083205460cf90925282205461090a919061507b565b92915050565b60cb5483516040516323c7e9f360e01b8152600092610994926001600160a01b03909116916323c7e9f39161094791600401614f04565b602060405180830381865afa158015610964573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109889190615092565b856040015185856108a2565b90505b9392505050565b600081815260d160205260408120600101546109bb57600061090a565b600192915050565b600080806109d460208801886150ab565b9050905060008167ffffffffffffffff8111156109f3576109f36145aa565b604051908082528060200260200182016040528015610a1c578160200160208202803683370190505b50905060005b82811015610af55760ca546001600160a01b031663f143fc61610a4860208c018c6150ab565b84818110610a5857610a586150f5565b9050602002810190610a6a919061510b565b6040518363ffffffff1660e01b8152600401610a8792919061517b565b602060405180830381865afa158015610aa4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ac89190615092565b828281518110610ada57610ada6150f5565b6020908102919091010152610aee8161518f565b9050610a22565b50610b13610b0c610b058a6151aa565b8989610910565b8287612137565b93509350505094509492505050565b306001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161415610bb55760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201526b19195b1959d85d1958d85b1b60a21b60648201526084015b60405180910390fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316610c107f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc546001600160a01b031690565b6001600160a01b031614610c7b5760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201526b6163746976652070726f787960a01b6064820152608401610bac565b610c8481613362565b60408051600080825260208201909252610ca091839190613428565b50565b610cab6135c8565b60c9546001600160a01b031663541d5548336040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602401602060405180830381865afa158015610d01573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d2591906151c6565b610d665760405162461bcd60e51b815260206004820152601260248201527121b0b63632b9103737ba102932b630bcb2b960711b6044820152606401610bac565b6000825111610daa5760405162461bcd60e51b815260206004820152601060248201526f139bc81d1859dcc81cdd5c1c1b1a595960821b6044820152606401610bac565b600083815260d160205260409020600401546001600160a01b03828116911614610e075760405162461bcd60e51b815260206004820152600e60248201526d139bdd08185d5d1a1bdc9a5e995960921b6044820152606401610bac565b600083815260d160209081526040918290208054835181840281018401909452808452610e6d93869390929190830182828015610e6357602002820191906000526020600020905b815481526020019060010190808311610e4f575b5050505050613622565b805190925015610e8157610e8183836137bd565b610e8b6001603355565b505050565b610e986135c8565b60c9546001600160a01b031663541d5548336040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602401602060405180830381865afa158015610eee573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f1291906151c6565b610f535760405162461bcd60e51b815260206004820152601260248201527121b0b63632b9103737ba102932b630bcb2b960711b6044820152606401610bac565b6000825111610f975760405162461bcd60e51b815260206004820152601060248201526f139bc81d1859dcc81cdd5c1c1b1a595960821b6044820152606401610bac565b600083815260d160205260409020600401546001600160a01b03828116911614610ff45760405162461bcd60e51b815260206004820152600e60248201526d139bdd08185d5d1a1bdc9a5e995960921b6044820152606401610bac565b600083815260d16020908152604091829020805483518184028101840190945280845261105a9386939092919083018282801561105057602002820191906000526020600020905b81548152602001906001019080831161103c575b505050505061387a565b805190925015610e815761106d82613a0d565b610e818383613b2d565b306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614156111055760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201526b19195b1959d85d1958d85b1b60a21b6064820152608401610bac565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166111607f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc546001600160a01b031690565b6001600160a01b0316146111cb5760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201526b6163746976652070726f787960a01b6064820152608401610bac565b6111d482613362565b6111e082826001613428565b5050565b60008061123561122e8989898080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152508b92508a91506108a29050565b8a85612137565b9150915097509795505050505050565b6000306001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146112e55760405162461bcd60e51b815260206004820152603860248201527f555550535570677261646561626c653a206d757374206e6f742062652063616c60448201527f6c6564207468726f7567682064656c656761746563616c6c00000000000000006064820152608401610bac565b507f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc90565b60006113146135c8565b60c9546001600160a01b031663541d5548336040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602401602060405180830381865afa15801561136a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061138e91906151c6565b6113cf5760405162461bcd60e51b815260206004820152601260248201527121b0b63632b9103737ba102932b630bcb2b960711b6044820152606401610bac565b60ca546001600160a01b031663a675f1e3858533866040518563ffffffff1660e01b815260040161140394939291906151e1565b6020604051808303816000875af1158015611422573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114469190615092565b90506109976001603355565b60c9546001600160a01b031663541d5548336040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602401602060405180830381865afa1580156114a8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114cc91906151c6565b61150d5760405162461bcd60e51b815260206004820152601260248201527121b0b63632b9103737ba102932b630bcb2b960711b6044820152606401610bac565b600061151c60208501856150ab565b9050905060008167ffffffffffffffff81111561153b5761153b6145aa565b604051908082528060200260200182016040528015611564578160200160208202803683370190505b50905060005b8281101561163d5760ca546001600160a01b031663f143fc6161159060208901896150ab565b848181106115a0576115a06150f5565b90506020028101906115b2919061510b565b6040518363ffffffff1660e01b81526004016115cf92919061517b565b602060405180830381865afa1580156115ec573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116109190615092565b828281518110611622576116226150f5565b60209081029190910101526116368161518f565b905061156a565b5061165b61165461164d876151aa565b8587610910565b8286610ca3565b5050505050565b60c9546001600160a01b031663541d5548336040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602401602060405180830381865afa1580156116b8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116dc91906151c6565b61171d5760405162461bcd60e51b815260206004820152601260248201527121b0b63632b9103737ba102932b630bcb2b960711b6044820152606401610bac565b85518061175f5760405162461bcd60e51b815260206004820152601060248201526f139bc81d1859dcc81cdd5c1c1b1a595960821b6044820152606401610bac565b60006117a58787878080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152508892508991506108a29050565b90506117b08161099e565b156117c5576117c0818986610e90565b6117d2565b6117d28888888888612ad2565b5050505050505050565b600081815260d16020908152604080832060018101546003820154600483015483548551818802810188019096528086526060979688968896879690958695919460028701946001600160a01b0392831694929093169287919083018282801561186557602002820191906000526020600020905b815481526020019060010190808311611851575b5050505050945082805461187890615216565b80601f01602080910402602001604051908101604052809291908181526020018280546118a490615216565b80156118f15780601f106118c6576101008083540402835291602001916118f1565b820191906000526020600020905b8154815290600101906020018083116118d457829003601f168201915b50505050509250955095509550955095505091939590929450565b600054610100900460ff161580801561192c5750600054600160ff909116105b806119465750303b158015611946575060005460ff166001145b6119b85760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a65640000000000000000000000000000000000006064820152608401610bac565b6000805460ff1916600117905580156119db576000805461ff0019166101001790555b6119e3613be5565b60c980546001600160a01b03808a1673ffffffffffffffffffffffffffffffffffffffff199283161790925560ca805489841690831617905560cb805492881692909116919091179055611a3684611e6f565b611a4083836125b9565b8015611a87576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498906020015b60405180910390a15b50505050505050565b60d16020526000908152604090206001810154600282018054919291611ab590615216565b80601f0160208091040260200160405190810160405280929190818152602001828054611ae190615216565b8015611b2e5780601f10611b0357610100808354040283529160200191611b2e565b820191906000526020600020905b815481529060010190602001808311611b1157829003601f168201915b50505050600383015460049093015491926001600160a01b039081169216905084565b60c9546001600160a01b031663541d5548336040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602401602060405180830381865afa158015611ba7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611bcb91906151c6565b611c0c5760405162461bcd60e51b815260206004820152601260248201527121b0b63632b9103737ba102932b630bcb2b960711b6044820152606401610bac565b611c56611c1b858584866108a2565b878780806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250879250612721915050565b505050505050565b60c9546001600160a01b031663541d5548336040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602401602060405180830381865afa158015611cb4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611cd891906151c6565b611d195760405162461bcd60e51b815260206004820152601260248201527121b0b63632b9103737ba102932b630bcb2b960711b6044820152606401610bac565b611c56611d28858584866108a2565b878780806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250879250610ca3915050565b60cb5483516040516323c7e9f360e01b815260609260009284928492839230926368fd4dee92611df8926001600160a01b03909116916323c7e9f391611dab91600401614f04565b602060405180830381865afa158015611dc8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611dec9190615092565b8b604001518b8b6108a2565b6040518263ffffffff1660e01b8152600401611e1691815260200190565b600060405180830381865afa158015611e33573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611e5b919081019061529b565b939c929b5090995097509095509350505050565b60c9546001600160a01b03166324d7806c336040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602401602060405180830381865afa158015611ec5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ee991906151c6565b611f355760405162461bcd60e51b815260206004820152601860248201527f43616c6c6572206e6f742041646d696e6973747261746f7200000000000000006044820152606401610bac565b60cc8190556040518181527fc7c22e024ab071901183022e8bc5d443dd329ae4134ff83caa3944e1eab152d8906020015b60405180910390a150565b60c9546000906001600160a01b031663541d5548336040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602401602060405180830381865afa158015611fca573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611fee91906151c6565b61202f5760405162461bcd60e51b815260206004820152601260248201527121b0b63632b9103737ba102932b630bcb2b960711b6044820152606401610bac565b60ca546001600160a01b031663fed6c2e9858533866040518563ffffffff1660e01b815260040161206394939291906151e1565b6020604051808303816000875af1158015612082573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109949190615092565b60606000818180306368fd4dee6120bf8b8b8b8b6108a2565b6040518263ffffffff1660e01b81526004016120dd91815260200190565b600060405180830381865afa1580156120fa573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052612122919081019061529b565b94509450945094509450945094509450945094565b6000806121438561099e565b61215c576121518451613c5a565b8451915091506123d6565b600083600281111561217057612170615382565b14156121dd57600085815260d1602090815260409182902080548351818402810184019094528084526121da93889390929190830182828015611050576020028201919060005260206000209081548152602001906001019080831161103c57505050505061387a565b93505b60018360028111156121f1576121f1615382565b141561233857600085815260d1602090815260408083208054825181850281018501909352808352919290919083018282801561224d57602002820191906000526020600020905b815481526020019060010190808311612239575b505050600089815260d160209081526040808320805482518185028101850190935280835296975092956122ba9550909350908301828280156122af57602002820191906000526020600020905b81548152602001906001019080831161229b575b50505050508761387a565b80519091501561232957600087815260d160209081526040918290208054835181840281018401909452808452612326939283018282801561231b57602002820191906000526020600020905b815481526020019060010190808311612307575b50505050508261387a565b91505b612333868361387a565b955050505b600283600281111561234c5761234c615382565b14156123c557600085815260d1602090815260409182902080548351818402810184019094528084526123b693889390929190830182828015610e635760200282019190600052602060002090815481526020019060010190808311610e4f575050505050613622565b935060008451915091506123d6565b6123cf8451613c5a565b8451915091505b935093915050565b60c9546001600160a01b031663541d5548336040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602401602060405180830381865afa158015612434573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061245891906151c6565b6124995760405162461bcd60e51b815260206004820152601260248201527121b0b63632b9103737ba102932b630bcb2b960711b6044820152606401610bac565b60006124a860208501856150ab565b915050806124eb5760405162461bcd60e51b815260206004820152601060248201526f139bc81d1859dcc81cdd5c1c1b1a595960821b6044820152606401610bac565b60008167ffffffffffffffff811115612506576125066145aa565b60405190808252806020026020018201604052801561252f578160200160208202803683370190505b50905060005b828110156125a25761257561254d60208801886150ab565b8381811061255d5761255d6150f5565b905060200281019061256f919061510b565b87611f71565b828281518110612587576125876150f5565b602090810291909101015261259b8161518f565b9050612535565b5061165b6125b261164d876151aa565b8286612721565b60c9546001600160a01b03166324d7806c336040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602401602060405180830381865afa15801561260f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061263391906151c6565b61267f5760405162461bcd60e51b815260206004820152601860248201527f43616c6c6572206e6f742041646d696e6973747261746f7200000000000000006044820152606401610bac565b606461268b8284615398565b11156126d95760405162461bcd60e51b815260206004820181905260248201527f70657263656e7461676573206d757374206e6f74206265206f766572203130306044820152606401610bac565b60cd82905560ce81905560408051838152602081018390527fea32590d8a489d3bc12129ff9ed59ccf95efa42b017e0f23a14b57881a562a5e91015b60405180910390a15050565b6127296135c8565b60c9546001600160a01b031663541d5548336040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602401602060405180830381865afa15801561277f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127a391906151c6565b6127e45760405162461bcd60e51b815260206004820152601260248201527121b0b63632b9103737ba102932b630bcb2b960711b6044820152606401610bac565b60008251116128285760405162461bcd60e51b815260206004820152601060248201526f139bc81d1859dcc81cdd5c1c1b1a595960821b6044820152606401610bac565b600083815260d160205260409020600401546001600160a01b038281169116146128855760405162461bcd60e51b815260206004820152600e60248201526d139bdd08185d5d1a1bdc9a5e995960921b6044820152606401610bac565b600083815260d16020908152604080832080548251818502810185019093528083526128e5938301828280156128da57602002820191906000526020600020905b8154815260200190600101908083116128c6575b50505050508461387a565b8051909150156128f9576128f984826137bd565b600084815260d16020908152604091829020805483518184028101840190945280845261295d93879390929190830182828015611050576020028201919060005260206000209081548152602001906001019080831161103c57505050505061387a565b80519093501561297a5761297083613a0d565b61297a8484613b2d565b50610e8b6001603355565b61298d6135c8565b6000612998826108dc565b90506000811180156129aa5750478111155b15612ac7576001600160a01b038216600090815260d060205260409020546129d3908290615398565b6001600160a01b038316600081815260d0602052604080822093909355915183908381818185875af1925050503d8060008114612a2c576040519150601f19603f3d011682016040523d82523d6000602084013e612a31565b606091505b5050905080612a825760405162461bcd60e51b815260206004820152601060248201527f5472616e73666572206661696c65642e000000000000000000000000000000006044820152606401610bac565b826001600160a01b03167feaff4b37086828766ad3268786972c0cd24259d4c87a80f9d3963a3c3d999b0d83604051612abd91815260200190565b60405180910390a2505b50610ca06001603355565b612ada6135c8565b60c9546001600160a01b031663541d5548336040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602401602060405180830381865afa158015612b30573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b5491906151c6565b612b955760405162461bcd60e51b815260206004820152601260248201527121b0b63632b9103737ba102932b630bcb2b960711b6044820152606401610bac565b845180612bd75760405162461bcd60e51b815260206004820152601060248201526f139bc81d1859dcc81cdd5c1c1b1a595960821b6044820152606401610bac565b60005b81811015612cce5760ca5487516001600160a01b039091169063b7bd44ed90899084908110612c0b57612c0b6150f5565b60200260200101516040518263ffffffff1660e01b8152600401612c3191815260200190565b602060405180830381865afa158015612c4e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c7291906151c6565b612cbe5760405162461bcd60e51b815260206004820152600d60248201527f496e76616c6964207461674964000000000000000000000000000000000000006044820152606401610bac565b612cc78161518f565b9050612bda565b5060038310801590612ce05750601f83105b612d2c5760405162461bcd60e51b815260206004820152601460248201527f5265636f7264207479706520746f6f206c6f6e670000000000000000000000006044820152606401610bac565b60cb546040517fcd7c68e2000000000000000000000000000000000000000000000000000000008152600481018790526001600160a01b039091169063cd7c68e290602401602060405180830381865afa158015612d8e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612db291906151c6565b612dfe5760405162461bcd60e51b815260206004820152601060248201527f496e76616c6964207461726765744964000000000000000000000000000000006044820152606401610bac565b612e0786613a0d565b612e15868686863387613c80565b5061165b6001603355565b60c9546001600160a01b03166324d7806c336040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602401602060405180830381865afa158015612e76573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e9a91906151c6565b612ee65760405162461bcd60e51b815260206004820152601860248201527f43616c6c6572206e6f742041646d696e6973747261746f7200000000000000006044820152606401610bac565b6001600160a01b038116612f3c5760405162461bcd60e51b815260206004820152601660248201527f416464726573732063616e6e6f74206265207a65726f000000000000000000006044820152606401610bac565b6001600160a01b0381166324d7806c336040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602401602060405180830381865afa158015612f90573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612fb491906151c6565b6130005760405162461bcd60e51b815260206004820181905260248201527f43616c6c6572206e6f742061646d696e20696e206e657720636f6e74726163746044820152606401610bac565b60c9805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0383169081179091556040519081527f2f55f724ae3134584dfdd86a4ee1e090635ff9913722b5fe06e064cc7e3ed8b490602001611f66565b60cb5483516040516323c7e9f360e01b81526000926109949261037a926001600160a01b03909216916323c7e9f39161309691600401614f04565b602060405180830381865afa1580156130b3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906130d79190615092565b866040015186866108a2565b60006130f461037a868686866108a2565b90505b949350505050565b60c9546001600160a01b031663541d5548336040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602401602060405180830381865afa158015613155573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061317991906151c6565b6131ba5760405162461bcd60e51b815260206004820152601260248201527121b0b63632b9103737ba102932b630bcb2b960711b6044820152606401610bac565b60006131c960208501856150ab565b9150508061320c5760405162461bcd60e51b815260206004820152601060248201526f139bc81d1859dcc81cdd5c1c1b1a595960821b6044820152606401610bac565b60008167ffffffffffffffff811115613227576132276145aa565b604051908082528060200260200182016040528015613250578160200160208202803683370190505b50905060005b8281101561329b5761326e61254d60208801886150ab565b828281518110613280576132806150f5565b60209081029190910101526132948161518f565b9050613256565b5060006132aa61164d876151aa565b90506132b58161099e565b156132ca576132c5818387610e90565b611c56565b60cb546000906001600160a01b031663cf99c8156132e8898061510b565b6040518363ffffffff1660e01b815260040161330592919061517b565b6020604051808303816000875af1158015613324573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906133489190615092565b9050611a87838261335c60408b018b61510b565b8a612ad2565b60c9546001600160a01b03166324d7806c336040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602401602060405180830381865afa1580156133b8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906133dc91906151c6565b610ca05760405162461bcd60e51b815260206004820152601860248201527f43616c6c6572206e6f742041646d696e6973747261746f7200000000000000006044820152606401610bac565b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff161561345b57610e8b83613def565b826001600160a01b03166352d1902d6040518163ffffffff1660e01b8152600401602060405180830381865afa9250505080156134b5575060408051601f3d908101601f191682019092526134b291810190615092565b60015b6135275760405162461bcd60e51b815260206004820152602e60248201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960448201527f6f6e206973206e6f7420555550530000000000000000000000000000000000006064820152608401610bac565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc81146135bc5760405162461bcd60e51b815260206004820152602960248201527f45524331393637557067726164653a20756e737570706f727465642070726f7860448201527f6961626c655555494400000000000000000000000000000000000000000000006064820152608401610bac565b50610e8b838383613eba565b6002603354141561361b5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610bac565b6002603355565b815160609060008167ffffffffffffffff811115613642576136426145aa565b60405190808252806020026020018201604052801561366b578160200160208202803683370190505b5090506000805b838110156136e65761369d86888381518110613690576136906150f5565b6020026020010151613ee5565b156136d45760018382815181106136b6576136b66150f5565b91151560209283029190910190910152816136d08161518f565b9250505b806136de8161518f565b915050613672565b5060008167ffffffffffffffff811115613702576137026145aa565b60405190808252806020026020018201604052801561372b578160200160208202803683370190505b5090506000805b858110156137b05784818151811061374c5761374c6150f5565b60200260200101511561379e5788818151811061376b5761376b6150f5565b6020026020010151838381518110613785576137856150f5565b60209081029190910101528161379a8161518f565b9250505b806137a88161518f565b915050613732565b5090979650505050505050565b600082815260d16020908152604091829020805483518184028101840190945280845261381d939283018282801561231b57602002820191906000526020600020908154815260200190600101908083116123075750505050508261387a565b600083815260d160209081526040909120825161384093919291909101906144d7565b507f926bdaffb66b17607427b94e3524f536690b435ab89ee7178c6fef859c17f5be8260026040516127159291906153b0565b6001603355565b815160609060008167ffffffffffffffff81111561389a5761389a6145aa565b6040519080825280602002602001820160405280156138c3578160200160208202803683370190505b5090506000805b838110156139435760008782815181106138e6576138e66150f5565b602002602001015190506138fa8782613ee5565b613930576001848381518110613912576139126150f5565b911515602092830291909101909101528261392c8161518f565b9350505b508061393b8161518f565b9150506138ca565b5060008167ffffffffffffffff81111561395f5761395f6145aa565b604051908082528060200260200182016040528015613988578160200160208202803683370190505b5090506000805b858110156137b0578481815181106139a9576139a96150f5565b6020026020010151156139fb578881815181106139c8576139c86150f5565b60200260200101518383815181106139e2576139e26150f5565b6020908102919091010152816139f78161518f565b9250505b80613a058161518f565b91505061398f565b613a178151613c5a565b3414613a655760405162461bcd60e51b815260206004820152601260248201527f77726f6e672066656520737570706c69656400000000000000000000000000006044820152606401610bac565b60c954604080517f3c0c456600000000000000000000000000000000000000000000000000000000815290516000926001600160a01b031691633c0c45669160048083019260209291908290030181865afa158015613ac8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613aec91906153e2565b905060005b8251811015610e8b57613b1d838281518110613b0f57613b0f6150f5565b602002602001015183613efb565b613b268161518f565b9050613af1565b600082815260d160209081526040918290208054835181840281018401909452808452613b8f9392830182828015613b8457602002820191906000526020600020905b815481526020019060010190808311613b70575b50505050508261417c565b600083815260d1602090815260409091208251613bb293919291909101906144d7565b507f926bdaffb66b17607427b94e3524f536690b435ab89ee7178c6fef859c17f5be8260006040516127159291906153b0565b600054610100900460ff16613c505760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608401610bac565b613c58614292565b565b6000808215801590613c6e5750600060cc54115b1561090a5760cc5461099790846153ff565b6000613cc68686868080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152508892508791506108a29050565b90506040518060a0016040528088815260200187815260200186868080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201829052509385525050506001600160a01b0380871660208085019190915290861660409384015284825260d18152919020825180519192613d53928492909101906144d7565b50602082810151600183015560408301518051613d769260028501920190614522565b50606082015160038201805473ffffffffffffffffffffffffffffffffffffffff199081166001600160a01b03938416179091556080909301516004909201805490931691161790556040518181527f68ebebf651507af1acff160fd4e8f900a0b89fe3224f86b8306a3b857cd7542e90602001611a7e565b6001600160a01b0381163b613e6c5760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201527f6f74206120636f6e7472616374000000000000000000000000000000000000006064820152608401610bac565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b613ec3836142fd565b600082511180613ed05750805b15610e8b57613edf838361433d565b50505050565b600080613ef28484614362565b95945050505050565b60ca546040517f6352211e000000000000000000000000000000000000000000000000000000008152600481018490526000916001600160a01b031690636352211e90602401602060405180830381865afa158015613f5e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613f8291906153e2565b60ca546040517f4b3d267f000000000000000000000000000000000000000000000000000000008152600481018690529192506000916001600160a01b0390911690634b3d267f90602401600060405180830381865afa158015613fea573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052614012919081019061541e565b90506000606460cd543461402691906153ff565b61403091906154d3565b90506000606460ce543461404491906153ff565b61404e91906154d3565b9050600061405c8284615398565b614066903461507b565b6001600160a01b038716600090815260cf602052604090205490915061408d908490615398565b6001600160a01b03808816600090815260cf6020526040808220939093558651909116815220546140bf908390615398565b84516001600160a01b03908116600090815260cf60205260409020919091558581169087161415614136576020808501516001600160a01b0316600090815260cf9091526040902054614113908290615398565b6020808601516001600160a01b0316600090815260cf9091526040902055611a87565b6001600160a01b038516600090815260cf602052604090205461415a908290615398565b6001600160a01b038616600090815260cf602052604090205550505050505050565b815181516060919060006141908284615398565b67ffffffffffffffff8111156141a8576141a86145aa565b6040519080825280602002602001820160405280156141d1578160200160208202803683370190505b50905060005b83811015614228578681815181106141f1576141f16150f5565b602002602001015182828151811061420b5761420b6150f5565b6020908102919091010152806142208161518f565b9150506141d7565b5060005b8281101561428857858181518110614246576142466150f5565b602002602001015182828661425b9190615398565b8151811061426b5761426b6150f5565b6020908102919091010152806142808161518f565b91505061422c565b5095945050505050565b600054610100900460ff166138735760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608401610bac565b61430681613def565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b60606109978383604051806060016040528060278152602001615512602791396143c4565b81516000908190815b818110156143b35784868281518110614386576143866150f5565b602002602001015114156143a1579250600191506143bd9050565b806143ab8161518f565b91505061436b565b5060008092509250505b9250929050565b6060600080856001600160a01b0316856040516143e191906154f5565b600060405180830381855af49150503d806000811461441c576040519150601f19603f3d011682016040523d82523d6000602084013e614421565b606091505b50915091506144328683838761443c565b9695505050505050565b606083156144a85782516144a1576001600160a01b0385163b6144a15760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610bac565b50816130f7565b6130f783838151156144bd5781518083602001fd5b8060405162461bcd60e51b8152600401610bac9190614f04565b828054828255906000526020600020908101928215614512579160200282015b828111156145125782518255916020019190600101906144f7565b5061451e929150614595565b5090565b82805461452e90615216565b90600052602060002090601f0160209004810192826145505760008555614512565b82601f1061456957805160ff1916838001178555614512565b8280016001018555821561451257918201828111156145125782518255916020019190600101906144f7565b5b8082111561451e5760008155600101614596565b634e487b7160e01b600052604160045260246000fd5b6040516060810167ffffffffffffffff811182821017156145e3576145e36145aa565b60405290565b60405160a0810167ffffffffffffffff811182821017156145e3576145e36145aa565b604051601f8201601f1916810167ffffffffffffffff81118282101715614635576146356145aa565b604052919050565b600067ffffffffffffffff821115614657576146576145aa565b50601f01601f191660200190565b60006146786146738461463d565b61460c565b905082815283838301111561468c57600080fd5b828260208301376000602084830101529392505050565b600082601f8301126146b457600080fd5b61099783833560208501614665565b6001600160a01b0381168114610ca057600080fd5b80356146e3816146c3565b919050565b600080600080608085870312156146fe57600080fd5b84359350602085013567ffffffffffffffff81111561471c57600080fd5b614728878288016146a3565b9350506040850135614739816146c3565b91506060850135614749816146c3565b939692955090935050565b60006020828403121561476657600080fd5b8135610997816146c3565b600067ffffffffffffffff82111561478b5761478b6145aa565b5060051b60200190565b6000606082840312156147a757600080fd5b6147af6145c0565b9050813567ffffffffffffffff808211156147c957600080fd5b6147d5858386016146a3565b83526020915081840135818111156147ec57600080fd5b8401601f810186136147fd57600080fd5b803561480b61467382614771565b81815260059190911b8201840190848101908883111561482a57600080fd5b8584015b83811015614862578035868111156148465760008081fd5b6148548b89838901016146a3565b84525091860191860161482e565b50808688015250505050604084013591508082111561488057600080fd5b5061488d848285016146a3565b60408301525092915050565b6000806000606084860312156148ae57600080fd5b833567ffffffffffffffff8111156148c557600080fd5b6148d186828701614795565b93505060208401356148e2816146c3565b915060408401356148f2816146c3565b809150509250925092565b60006020828403121561490f57600080fd5b5035919050565b60006060828403121561492857600080fd5b50919050565b8035600381106146e357600080fd5b6000806000806080858703121561495357600080fd5b843567ffffffffffffffff81111561496a57600080fd5b61497687828801614916565b9450506020850135614987816146c3565b92506040850135614997816146c3565b91506149a56060860161492e565b905092959194509250565b600082601f8301126149c157600080fd5b813560206149d161467383614771565b82815260059290921b840181019181810190868411156149f057600080fd5b8286015b84811015614a0b57803583529183019183016149f4565b509695505050505050565b600080600060608486031215614a2b57600080fd5b83359250602084013567ffffffffffffffff811115614a4957600080fd5b614a55868287016149b0565b92505060408401356148f2816146c3565b60008060408385031215614a7957600080fd5b8235614a84816146c3565b9150602083013567ffffffffffffffff811115614aa057600080fd5b8301601f81018513614ab157600080fd5b614ac085823560208401614665565b9150509250929050565b60008083601f840112614adc57600080fd5b50813567ffffffffffffffff811115614af457600080fd5b6020830191508360208285010111156143bd57600080fd5b600080600080600080600060c0888a031215614b2757600080fd5b873567ffffffffffffffff80821115614b3f57600080fd5b614b4b8b838c016149b0565b985060208a0135975060408a0135915080821115614b6857600080fd5b50614b758a828b01614aca565b9096509450506060880135614b89816146c3565b92506080880135614b99816146c3565b9150614ba760a0890161492e565b905092959891949750929550565b600080600060408486031215614bca57600080fd5b833567ffffffffffffffff811115614be157600080fd5b614bed86828701614aca565b90945092505060208401356148f2816146c3565b600080600060608486031215614c1657600080fd5b833567ffffffffffffffff811115614c2d57600080fd5b6148d186828701614916565b60008060008060008060a08789031215614c5257600080fd5b863567ffffffffffffffff80821115614c6a57600080fd5b614c768a838b016149b0565b9750602089013596506040890135915080821115614c9357600080fd5b50614ca089828a01614aca565b9095509350506060870135614cb4816146c3565b91506080870135614cc4816146c3565b809150509295509295509295565b60005b83811015614ced578181015183820152602001614cd5565b83811115613edf5750506000910152565b60008151808452614d16816020860160208601614cd2565b601f01601f19169290920160200192915050565b60a0808252865190820181905260009060209060c0840190828a01845b82811015614d6357815184529284019290840190600101614d47565b50505087828501528381036040850152614d7d8188614cfe565b925050506001600160a01b0380851660608401528084166080840152509695505050505050565b60008060008060008060c08789031215614dbd57600080fd5b8635614dc8816146c3565b95506020870135614dd8816146c3565b94506040870135614de8816146c3565b959894975094956060810135955060808101359460a0909101359350915050565b848152608060208201526000614e226080830186614cfe565b6001600160a01b039485166040840152929093166060909101529392505050565b60008060008060008060a08789031215614e5c57600080fd5b863567ffffffffffffffff80821115614e7457600080fd5b818901915089601f830112614e8857600080fd5b813581811115614e9757600080fd5b8a60208260051b8501011115614eac57600080fd5b60209283019850965090880135945060408801359080821115614ece57600080fd5b50614edb89828a016146a3565b935050614eea606088016146d8565b9150614ef8608088016146d8565b90509295509295509295565b6020815260006109976020830184614cfe565b600080600060608486031215614f2c57600080fd5b83359250602084013567ffffffffffffffff811115614f4a57600080fd5b614f56868287016149b0565b925050614f656040850161492e565b90509250925092565b60008060408385031215614f8157600080fd5b50508035926020909101359150565b600080600080600060808688031215614fa857600080fd5b853567ffffffffffffffff80821115614fc057600080fd5b614fcc89838a016149b0565b9650602088013595506040880135915080821115614fe957600080fd5b50614ff688828901614aca565b909450925050606086013561500a816146c3565b809150509295509295909350565b84815260008451615030816020850160208901614cd2565b6bffffffffffffffffffffffff19606095861b81169190930160208101919091529290931b1660348201526048019392505050565b634e487b7160e01b600052601160045260246000fd5b60008282101561508d5761508d615065565b500390565b6000602082840312156150a457600080fd5b5051919050565b6000808335601e198436030181126150c257600080fd5b83018035915067ffffffffffffffff8211156150dd57600080fd5b6020019150600581901b36038213156143bd57600080fd5b634e487b7160e01b600052603260045260246000fd5b6000808335601e1984360301811261512257600080fd5b83018035915067ffffffffffffffff82111561513d57600080fd5b6020019150368190038213156143bd57600080fd5b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b602081526000610994602083018486615152565b60006000198214156151a3576151a3615065565b5060010190565b600061090a3683614795565b805180151581146146e357600080fd5b6000602082840312156151d857600080fd5b610997826151b6565b6060815260006151f5606083018688615152565b6001600160a01b039485166020840152929093166040909101529392505050565b600181811c9082168061522a57607f821691505b6020821081141561492857634e487b7160e01b600052602260045260246000fd5b600082601f83011261525c57600080fd5b815161526a6146738261463d565b81815284602083860101111561527f57600080fd5b6130f7826020830160208701614cd2565b80516146e3816146c3565b600080600080600060a086880312156152b357600080fd5b855167ffffffffffffffff808211156152cb57600080fd5b818801915088601f8301126152df57600080fd5b815160206152ef61467383614771565b82815260059290921b8401810191818101908c84111561530e57600080fd5b948201945b8386101561532c57855182529482019490820190615313565b918b015160408c0151929a50985090935050508082111561534c57600080fd5b506153598882890161524b565b93505061536860608701615290565b915061537660808701615290565b90509295509295909350565b634e487b7160e01b600052602160045260246000fd5b600082198211156153ab576153ab615065565b500190565b82815260408101600383106153d557634e487b7160e01b600052602160045260246000fd5b8260208301529392505050565b6000602082840312156153f457600080fd5b8151610997816146c3565b600081600019048311821515161561541957615419615065565b500290565b60006020828403121561543057600080fd5b815167ffffffffffffffff8082111561544857600080fd5b9083019060a0828603121561545c57600080fd5b6154646145e9565b825161546f816146c3565b8152602083015161547f816146c3565b602082015260408301518281111561549657600080fd5b6154a28782860161524b565b6040830152506154b4606084016151b6565b60608201526154c5608084016151b6565b608082015295945050505050565b6000826154f057634e487b7160e01b600052601260045260246000fd5b500490565b60008251615507818460208701614cd2565b919091019291505056fe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a2646970667358221220b938bb01f95b5548860ce2066d7206f1fb1e31b0ca597ef40767848b0d467b5864736f6c634300080c0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "appendTags(uint256,uint256[],address)": {
        "params": {
          "_tagIds": "Array of CTAG token Ids.",
          "_tagger": "Address of that calls Relayer to tag a targetURI.",
          "_taggingRecordId": "tagging record being updated."
        }
      },
      "applyTagsWithCompositeKey(uint256[],uint256,string,address,address)": {
        "params": {
          "_recordType": "Arbitrary identifier for type of tagging record.",
          "_relayer": "Address of Relayer contract that facilitated tagging record.",
          "_tagIds": "Array of CTAG token Ids.",
          "_tagger": "Address of that calls Relayer to create tagging record.",
          "_targetId": "targetId of the URI being tagged. See ETSTarget.sol"
        }
      },
      "applyTagsWithRawInput((string,string[],string),address,address)": {
        "params": {
          "_rawInput": "Raw client input data formed as TaggingRecordRawInput struct.",
          "_relayer": "Address of Relayer contract that facilitated tagging record",
          "_tagger": "Address that calls Relayer to tag a targetURI."
        }
      },
      "computeTaggingFee(uint256,uint256[],uint8)": {
        "params": {
          "_action": "Integer representing action to be performed according to enum TaggingAction.",
          "_tagIds": "Array of CTAG token Ids.",
          "_taggingRecordId": "Id of tagging record."
        },
        "returns": {
          "fee": "Calculated tagging fee in ETH/Matic",
          "tagCount": "Number of new tags being added to tagging record."
        }
      },
      "computeTaggingFeeFromCompositeKey(uint256[],uint256,string,address,address,uint8)": {
        "params": {
          "_action": "Integer representing action to be performed according to enum TaggingAction.",
          "_relayer": "Address of tagging record Relayer contract.",
          "_tagIds": "Array of CTAG token Ids.",
          "_tagger": "Address interacting with Relayer to tag content (\"Tagger\")."
        },
        "returns": {
          "fee": "Calculated tagging fee in ETH/Matic",
          "tagCount": "Number of new tags being added to tagging record."
        }
      },
      "computeTaggingFeeFromRawInput((string,string[],string),address,address,uint8)": {
        "params": {
          "_action": "Integer representing action to be performed according to enum TaggingAction.",
          "_rawInput": "Raw client input data formed as TaggingRecordRawInput struct.",
          "_relayer": "Address of tagging record Relayer contract.",
          "_tagger": "Address interacting with Relayer to tag content (\"Tagger\")."
        },
        "returns": {
          "fee": "Calculated tagging fee in ETH/Matic",
          "tagCount": "Number of new tags being added to tagging record."
        }
      },
      "computeTaggingRecordIdFromCompositeKey(uint256,string,address,address)": {
        "params": {
          "_recordType": "Arbitrary identifier for type of tagging record.",
          "_relayer": "Address of tagging record Relayer contract.",
          "_tagger": "Address interacting with Relayer to tag content (\"Tagger\").",
          "_targetId": "Id of target being tagged (see ETSTarget.sol)."
        },
        "returns": {
          "taggingRecordId": "Unique identifier for a tagging record."
        }
      },
      "computeTaggingRecordIdFromRawInput((string,string[],string),address,address)": {
        "params": {
          "_rawInput": "Raw client input data formed as TaggingRecordRawInput struct.",
          "_relayer": "Address of tagging record Relayer contract.",
          "_tagger": "Address interacting with Relayer to tag content (\"Tagger\")."
        },
        "returns": {
          "taggingRecordId": "Unique identifier for a tagging record."
        }
      },
      "constructor": {
        "custom:oz-upgrades-unsafe-allow": "constructor"
      },
      "createTag(string,address)": {
        "params": {
          "_creator": "Address credited with creating CTAG.",
          "_tag": "Tag string."
        },
        "returns": {
          "_tokenId": "Id of CTAG token."
        }
      },
      "createTaggingRecord(uint256[],uint256,string,address)": {
        "params": {
          "_recordType": "Arbitrary identifier for type of tagging record.",
          "_tagIds": "Array of CTAG token Ids.",
          "_tagger": "Address calling Relayer contract to create tagging record.",
          "_targetId": "targetId of the URI being tagged. See ETSTarget.sol"
        }
      },
      "drawDown(address)": {
        "params": {
          "_account": "Address of account being drawn down and which will receive the funds."
        }
      },
      "getOrCreateTagId(string,address)": {
        "params": {
          "_creator": "Address credited with creating CTAG.",
          "_tag": "Tag string."
        },
        "returns": {
          "tokenId": "Id of CTAG token."
        }
      },
      "getTaggingRecordFromCompositeKey(uint256,string,address,address)": {
        "params": {
          "_recordType": "Arbitrary identifier for type of tagging record.",
          "_relayer": "Address of Relayer contract that wrote tagging record.",
          "_tagger": "Address of wallet that initiated tagging record via relayer.",
          "_targetId": "Id of target being tagged."
        },
        "returns": {
          "recordType": "Type of tagging record.",
          "relayer": "Address of tagging record Relayer contract.",
          "tagIds": "CTAG token ids.",
          "tagger": "Address interacting with Relayer to tag content (\"Tagger\").",
          "targetId": "TargetId that was tagged."
        }
      },
      "getTaggingRecordFromId(uint256)": {
        "params": {
          "_id": "taggingRecordId."
        },
        "returns": {
          "recordType": "Type of tagging record.",
          "relayer": "Address of tagging record Relayer contract.",
          "tagIds": "CTAG token ids.",
          "tagger": "Address interacting with Relayer to tag content (\"Tagger\").",
          "targetId": "TargetId that was tagged."
        }
      },
      "getTaggingRecordFromRawInput((string,string[],string),address,address)": {
        "params": {
          "_rawInput": "Raw client input data formed as TaggingRecordRawInput struct.",
          "_relayer": "Address of tagging record Relayer contract.",
          "_tagger": "Address interacting with Relayer to tag content (\"Tagger\")."
        },
        "returns": {
          "recordType": "Type of tagging record.",
          "relayer": "Address of tagging record Relayer contract.",
          "tagIds": "CTAG token ids.",
          "tagger": "Address interacting with Relayer to tag content (\"Tagger\").",
          "targetId": "TargetId that was tagged."
        }
      },
      "proxiableUUID()": {
        "details": "Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate the implementation's compatibility when performing an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier."
      },
      "removeTags(uint256,uint256[],address)": {
        "params": {
          "_tagIds": "Array of CTAG token Ids.",
          "_tagger": "Address of that calls Relayer to tag a targetURI.",
          "_taggingRecordId": "tagging record being updated."
        }
      },
      "removeTagsWithCompositeKey(uint256[],uint256,string,address,address)": {
        "params": {
          "_recordType": "Arbitrary identifier for type of tagging record.",
          "_relayer": "Address of Relayer contract that facilitated tagging record.",
          "_tagIds": "Array of CTAG token Ids.",
          "_tagger": "Address of that calls Relayer to create tagging record.",
          "_targetId": "targetId of the URI being tagged. See ETSTarget.sol"
        }
      },
      "removeTagsWithRawInput((string,string[],string),address,address)": {
        "params": {
          "_rawInput": "Raw client input data formed as TaggingRecordRawInput struct.",
          "_relayer": "Address of Relayer contract that facilitated tagging record.",
          "_tagger": "Address that calls Relayer to tag a targetURI."
        }
      },
      "replaceTags(uint256,uint256[],address)": {
        "params": {
          "_tagIds": "Array of CTAG token Ids.",
          "_tagger": "Address of that calls Relayer to tag a targetURI.",
          "_taggingRecordId": "tagging record being updated."
        }
      },
      "replaceTagsWithCompositeKey(uint256[],uint256,string,address,address)": {
        "params": {
          "_recordType": "Arbitrary identifier for type of tagging record.",
          "_relayer": "Address of Relayer contract that facilitated tagging record.",
          "_tagIds": "Array of CTAG token Ids.",
          "_tagger": "Address of that calls Relayer to create tagging record.",
          "_targetId": "targetId of the URI being tagged. See ETSTarget.sol"
        }
      },
      "replaceTagsWithRawInput((string,string[],string),address,address)": {
        "params": {
          "_rawInput": "Raw client input data formed as TaggingRecordRawInput struct.",
          "_relayer": "Address of Relayer contract that facilitated tagging record.",
          "_tagger": "Address that calls Relayer to tag a targetURI."
        }
      },
      "setAccessControls(address)": {
        "params": {
          "_accessControls": "Address of ETSAccessControls contract."
        }
      },
      "setPercentages(uint256,uint256)": {
        "params": {
          "_platformPercentage": "percentage for platform.",
          "_relayerPercentage": "percentage for relayer."
        }
      },
      "setTaggingFee(uint256)": {
        "params": {
          "_fee": "Value of the fee in WEI."
        }
      },
      "taggingRecordExists(uint256)": {
        "params": {
          "_taggingRecordId": "taggingRecordId."
        },
        "returns": {
          "_0": "boolean; true for exists, false for not."
        }
      },
      "taggingRecordExistsByCompositeKey(uint256,string,address,address)": {
        "params": {
          "_recordType": "Arbitrary identifier for type of tagging record.",
          "_relayer": "Address of Relayer contract that wrote tagging record.",
          "_tagger": "Address of wallet that initiated tagging record via relayer.",
          "_targetId": "Id of target being tagged."
        },
        "returns": {
          "_0": "boolean; true for exists, false for not."
        }
      },
      "taggingRecordExistsByRawInput((string,string[],string),address,address)": {
        "params": {
          "_rawInput": "Raw client input data formed as TaggingRecordRawInput struct.",
          "_relayer": "Address of tagging record Relayer contract.",
          "_tagger": "Address interacting with Relayer to tag content (\"Tagger\")."
        },
        "returns": {
          "_0": "boolean; true for exists, false for not."
        }
      },
      "totalDue(address)": {
        "params": {
          "_account": "Address of the account being queried."
        },
        "returns": {
          "_due": "Amount of WEI in MATIC due to account."
        }
      },
      "upgradeTo(address)": {
        "custom:oz-upgrades-unsafe-allow-reachable": "delegatecall",
        "details": "Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
      },
      "upgradeToAndCall(address,bytes)": {
        "custom:oz-upgrades-unsafe-allow-reachable": "delegatecall",
        "details": "Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
      }
    },
    "stateVariables": {
      "accrued": {
        "details": "Map for holding amount accrued to participant address wallets."
      },
      "etsAccessControls": {
        "details": "ETS access controls contract."
      },
      "etsTarget": {
        "details": "ETS Targets contract."
      },
      "etsToken": {
        "details": "CTAG erc-721 token contract."
      },
      "paid": {
        "details": "Map for holding lifetime amount drawn down from accrued by participants."
      },
      "platformPercentage": {
        "details": "Percentage of tagging fee allocated to ETS."
      },
      "relayerPercentage": {
        "details": "Percentage of tagging fee allocated to Relayer."
      },
      "taggingFee": {
        "details": "Fee in MATIC Collected by ETS for tagging."
      },
      "taggingRecords": {
        "details": "Map of tagging id to tagging record."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "NAME()": {
        "notice": "Public constants"
      },
      "appendTags(uint256,uint256[],address)": {
        "notice": "Append one or more tags to a tagging record."
      },
      "applyTagsWithCompositeKey(uint256[],uint256,string,address,address)": {
        "notice": "Apply one or more tags to a targetId using using tagging record composite key. Records new ETS Tagging Record to the blockchain or appends tags if Tagging Record already exists. CTAGs and targetId are created if they don't exist. Caller must be Relayer contract."
      },
      "applyTagsWithRawInput((string,string[],string),address,address)": {
        "notice": "Apply one or more tags to a targetURI using tagging record raw client input data. Like it's sister function applyTagsWithCompositeKey, records new ETS Tagging Record or appends tags to an existing record if found to already exist. This function differs in that it creates new ETS target records and CTAG tokens for novel targetURIs and hastag strings respectively. This function can only be called by Relayer contracts. If this is a new tagging record, ETS will use msg.sender, if it's an existing tagging record, ETS will use _relayer parameter."
      },
      "computeTaggingFee(uint256,uint256[],uint8)": {
        "notice": "Compute tagging fee for CTAGs, tagging record id and desired action. If the global, service wide tagging fee is set (see ETS.taggingFee() & ETS.setTaggingFee()) ETS charges a per tag for all new tags applied to a tagging record. This applies to both new tagging records and modified tagging records. Computing the tagging fee involves checking to see if a tagging record exists and if so, given the desired action (append or replace) determining the number of new tags being added and multiplying by the ETS per tag fee."
      },
      "computeTaggingFeeFromCompositeKey(uint256[],uint256,string,address,address,uint8)": {
        "notice": "Compute tagging fee for CTAGs, tagging record composite key and desired action."
      },
      "computeTaggingFeeFromRawInput((string,string[],string),address,address,uint8)": {
        "notice": "Compute tagging fee for raw input and desired action."
      },
      "computeTaggingRecordIdFromCompositeKey(uint256,string,address,address)": {
        "notice": "Compute & return a taggingRecordId. Every TaggingRecord in ETS is mapped to by it's taggingRecordId. This Id is a composite key composed of targetId, recordType, relayer contract address and tagger address hashed and cast as a uint256."
      },
      "computeTaggingRecordIdFromRawInput((string,string[],string),address,address)": {
        "notice": "Compute a taggingRecordId from raw input."
      },
      "createTag(string,address)": {
        "notice": "Create CTAG token from tag string. Reverts if tag exists or is invalid. Only ETS Relayer contracts may call this function."
      },
      "createTaggingRecord(uint256[],uint256,string,address)": {
        "notice": "Create a new tagging record. Requirements:   - Caller must be relayer contract.   - CTAG(s) and TargetId must exist."
      },
      "drawDown(address)": {
        "notice": "Function for withdrawing funds from an accrual account. Can be called by the account owner or on behalf of the account. Does nothing when there is nothing due to the account."
      },
      "getOrCreateTagId(string,address)": {
        "notice": "Get or create CTAG token from tag string. Combo function that accepts a tag string and returns corresponding CTAG token Id if it exists, or if it doesn't exist, creates a new CTAG and then returns corresponding Id. Only ETS Relayer contracts may call this function."
      },
      "getTaggingRecordFromCompositeKey(uint256,string,address,address)": {
        "notice": "Retrieve a tagging record from composite key parts."
      },
      "getTaggingRecordFromId(uint256)": {
        "notice": "Retrieve a tagging record from Id."
      },
      "getTaggingRecordFromRawInput((string,string[],string),address,address)": {
        "notice": "Retrieve a tagging record from it's raw input."
      },
      "removeTags(uint256,uint256[],address)": {
        "notice": "Remove one or more tags from a tagging record."
      },
      "removeTagsWithCompositeKey(uint256[],uint256,string,address,address)": {
        "notice": "Remove one or more tags from a tagging record using composite key for record lookup."
      },
      "removeTagsWithRawInput((string,string[],string),address,address)": {
        "notice": "Remove one or more tags from a tagging record using raw data for record lookup."
      },
      "replaceTags(uint256,uint256[],address)": {
        "notice": "Replaces tags in tagging record. This function overwrites the tags in a tagging record with the supplied tags, only charging for the new tags in the replacement set."
      },
      "replaceTagsWithCompositeKey(uint256[],uint256,string,address,address)": {
        "notice": "Replace entire tag set in tagging record using composite key for record lookup. This function overwrites the tags in a tagging record with the supplied tags, only charging for the new tags in the replacement set."
      },
      "replaceTagsWithRawInput((string,string[],string),address,address)": {
        "notice": "Replace entire tag set in tagging record using raw data for record lookup. If supplied tag strings don't have CTAGs, new ones are minted."
      },
      "setAccessControls(address)": {
        "notice": "Sets ETSAccessControls on the ETSTarget contract so functions can be restricted to ETS platform only. Note Caller of this function must be deployer or pre-set as admin of new contract."
      },
      "setPercentages(uint256,uint256)": {
        "notice": "Admin functionality for updating the percentages."
      },
      "setTaggingFee(uint256)": {
        "notice": "Sets the fee required to tag an NFT asset."
      },
      "taggingRecordExists(uint256)": {
        "notice": "Check that a tagging record exsits by it's Id."
      },
      "taggingRecordExistsByCompositeKey(uint256,string,address,address)": {
        "notice": "Check that a tagging record exists by it's componsite key parts."
      },
      "taggingRecordExistsByRawInput((string,string[],string),address,address)": {
        "notice": "Check that a tagging record exists for given raw input."
      },
      "totalDue(address)": {
        "notice": "Function to check how much MATIC has been accrued by an address factoring in amount paid out."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 915,
        "contract": "contracts/ETS.sol:ETS",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 918,
        "contract": "contracts/ETS.sol:ETS",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 3526,
        "contract": "contracts/ETS.sol:ETS",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 1357,
        "contract": "contracts/ETS.sol:ETS",
        "label": "_status",
        "offset": 0,
        "slot": "51",
        "type": "t_uint256"
      },
      {
        "astId": 1426,
        "contract": "contracts/ETS.sol:ETS",
        "label": "__gap",
        "offset": 0,
        "slot": "52",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 897,
        "contract": "contracts/ETS.sol:ETS",
        "label": "__gap",
        "offset": 0,
        "slot": "101",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 1213,
        "contract": "contracts/ETS.sol:ETS",
        "label": "__gap",
        "offset": 0,
        "slot": "151",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 8783,
        "contract": "contracts/ETS.sol:ETS",
        "label": "etsAccessControls",
        "offset": 0,
        "slot": "201",
        "type": "t_contract(IETSAccessControls)14902"
      },
      {
        "astId": 8787,
        "contract": "contracts/ETS.sol:ETS",
        "label": "etsToken",
        "offset": 0,
        "slot": "202",
        "type": "t_contract(IETSToken)15465"
      },
      {
        "astId": 8791,
        "contract": "contracts/ETS.sol:ETS",
        "label": "etsTarget",
        "offset": 0,
        "slot": "203",
        "type": "t_contract(IETSTarget)15228"
      },
      {
        "astId": 8795,
        "contract": "contracts/ETS.sol:ETS",
        "label": "taggingFee",
        "offset": 0,
        "slot": "204",
        "type": "t_uint256"
      },
      {
        "astId": 8798,
        "contract": "contracts/ETS.sol:ETS",
        "label": "platformPercentage",
        "offset": 0,
        "slot": "205",
        "type": "t_uint256"
      },
      {
        "astId": 8801,
        "contract": "contracts/ETS.sol:ETS",
        "label": "relayerPercentage",
        "offset": 0,
        "slot": "206",
        "type": "t_uint256"
      },
      {
        "astId": 8806,
        "contract": "contracts/ETS.sol:ETS",
        "label": "accrued",
        "offset": 0,
        "slot": "207",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 8811,
        "contract": "contracts/ETS.sol:ETS",
        "label": "paid",
        "offset": 0,
        "slot": "208",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 8817,
        "contract": "contracts/ETS.sol:ETS",
        "label": "taggingRecords",
        "offset": 0,
        "slot": "209",
        "type": "t_mapping(t_uint256,t_struct(TaggingRecord)14330_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IETSAccessControls)14902": {
        "encoding": "inplace",
        "label": "contract IETSAccessControls",
        "numberOfBytes": "20"
      },
      "t_contract(IETSTarget)15228": {
        "encoding": "inplace",
        "label": "contract IETSTarget",
        "numberOfBytes": "20"
      },
      "t_contract(IETSToken)15465": {
        "encoding": "inplace",
        "label": "contract IETSToken",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_struct(TaggingRecord)14330_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct IETS.TaggingRecord)",
        "numberOfBytes": "32",
        "value": "t_struct(TaggingRecord)14330_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(TaggingRecord)14330_storage": {
        "encoding": "inplace",
        "label": "struct IETS.TaggingRecord",
        "members": [
          {
            "astId": 14321,
            "contract": "contracts/ETS.sol:ETS",
            "label": "tagIds",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_uint256)dyn_storage"
          },
          {
            "astId": 14323,
            "contract": "contracts/ETS.sol:ETS",
            "label": "targetId",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 14325,
            "contract": "contracts/ETS.sol:ETS",
            "label": "recordType",
            "offset": 0,
            "slot": "2",
            "type": "t_string_storage"
          },
          {
            "astId": 14327,
            "contract": "contracts/ETS.sol:ETS",
            "label": "relayer",
            "offset": 0,
            "slot": "3",
            "type": "t_address"
          },
          {
            "astId": 14329,
            "contract": "contracts/ETS.sol:ETS",
            "label": "tagger",
            "offset": 0,
            "slot": "4",
            "type": "t_address"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}