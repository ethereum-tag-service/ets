{
  "address": "0x907fF76D79e9744c203D4580C07B7b61304CA8a7",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "etsAccessControls",
          "type": "address"
        }
      ],
      "name": "AccessControlsSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "previousAdmin",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newAdmin",
          "type": "address"
        }
      ],
      "name": "AdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "beacon",
          "type": "address"
        }
      ],
      "name": "BeaconUpgraded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "etsEnrichTarget",
          "type": "address"
        }
      ],
      "name": "EnrichTargetSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "targetId",
          "type": "uint256"
        }
      ],
      "name": "TargetCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "targetId",
          "type": "uint256"
        }
      ],
      "name": "TargetUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "implementation",
          "type": "address"
        }
      ],
      "name": "Upgraded",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "NAME",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_targetURI",
          "type": "string"
        }
      ],
      "name": "computeTargetId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_targetURI",
          "type": "string"
        }
      ],
      "name": "createTarget",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "targetId",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "etsAccessControls",
      "outputs": [
        {
          "internalType": "contract IETSAccessControls",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "etsEnrichTarget",
      "outputs": [
        {
          "internalType": "contract IETSEnrichTarget",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_targetURI",
          "type": "string"
        }
      ],
      "name": "getOrCreateTargetId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_targetId",
          "type": "uint256"
        }
      ],
      "name": "getTargetById",
      "outputs": [
        {
          "components": [
            {
              "internalType": "string",
              "name": "targetURI",
              "type": "string"
            },
            {
              "internalType": "address",
              "name": "createdBy",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "enriched",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "httpStatus",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "ipfsHash",
              "type": "string"
            }
          ],
          "internalType": "struct IETSTarget.Target",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_targetURI",
          "type": "string"
        }
      ],
      "name": "getTargetByURI",
      "outputs": [
        {
          "components": [
            {
              "internalType": "string",
              "name": "targetURI",
              "type": "string"
            },
            {
              "internalType": "address",
              "name": "createdBy",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "enriched",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "httpStatus",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "ipfsHash",
              "type": "string"
            }
          ],
          "internalType": "struct IETSTarget.Target",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_etsAccessControls",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "proxiableUUID",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IETSAccessControls",
          "name": "_accessControls",
          "type": "address"
        }
      ],
      "name": "setAccessControls",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_etsEnrichTarget",
          "type": "address"
        }
      ],
      "name": "setEnrichTarget",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_targetId",
          "type": "uint256"
        }
      ],
      "name": "targetExistsById",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_targetURI",
          "type": "string"
        }
      ],
      "name": "targetExistsByURI",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "targets",
      "outputs": [
        {
          "internalType": "string",
          "name": "targetURI",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "createdBy",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "enriched",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "httpStatus",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "ipfsHash",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_targetId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_targetURI",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "_enriched",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_httpStatus",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_ipfsHash",
          "type": "string"
        }
      ],
      "name": "updateTarget",
      "outputs": [
        {
          "internalType": "bool",
          "name": "success",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        }
      ],
      "name": "upgradeTo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "upgradeToAndCall",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    }
  ],
  "numDeployments": 4,
  "solcInputHash": "710b44bae61f938bdd6d1ab689c07430",
  "metadata": "{\"compiler\":{\"version\":\"0.8.12+commit.f00d7308\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"etsAccessControls\",\"type\":\"address\"}],\"name\":\"AccessControlsSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\"}],\"name\":\"BeaconUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"etsEnrichTarget\",\"type\":\"address\"}],\"name\":\"EnrichTargetSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"targetId\",\"type\":\"uint256\"}],\"name\":\"TargetCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"targetId\",\"type\":\"uint256\"}],\"name\":\"TargetUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"NAME\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_targetURI\",\"type\":\"string\"}],\"name\":\"computeTargetId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_targetURI\",\"type\":\"string\"}],\"name\":\"createTarget\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"targetId\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"etsAccessControls\",\"outputs\":[{\"internalType\":\"contract IETSAccessControls\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"etsEnrichTarget\",\"outputs\":[{\"internalType\":\"contract IETSEnrichTarget\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_targetURI\",\"type\":\"string\"}],\"name\":\"getOrCreateTargetId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_targetId\",\"type\":\"uint256\"}],\"name\":\"getTargetById\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"targetURI\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"createdBy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"enriched\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"httpStatus\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"ipfsHash\",\"type\":\"string\"}],\"internalType\":\"struct IETSTarget.Target\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_targetURI\",\"type\":\"string\"}],\"name\":\"getTargetByURI\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"targetURI\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"createdBy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"enriched\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"httpStatus\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"ipfsHash\",\"type\":\"string\"}],\"internalType\":\"struct IETSTarget.Target\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_etsAccessControls\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxiableUUID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IETSAccessControls\",\"name\":\"_accessControls\",\"type\":\"address\"}],\"name\":\"setAccessControls\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_etsEnrichTarget\",\"type\":\"address\"}],\"name\":\"setEnrichTarget\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_targetId\",\"type\":\"uint256\"}],\"name\":\"targetExistsById\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_targetURI\",\"type\":\"string\"}],\"name\":\"targetExistsByURI\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"targets\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"targetURI\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"createdBy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"enriched\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"httpStatus\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"ipfsHash\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_targetId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_targetURI\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_enriched\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_httpStatus\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_ipfsHash\",\"type\":\"string\"}],\"name\":\"updateTarget\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"upgradeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"computeTargetId(string)\":{\"params\":{\"_targetURI\":\"Unique resource identifier Target record points to.\"},\"returns\":{\"_0\":\"Id of the potential Target record.\"}},\"constructor\":{\"custom:oz-upgrades-unsafe-allow\":\"constructor\"},\"createTarget(string)\":{\"params\":{\"_targetURI\":\"URI passed in as string\"},\"returns\":{\"targetId\":\"Id of ETS Target record\"}},\"getOrCreateTargetId(string)\":{\"params\":{\"_targetURI\":\"URI passed in as string\"},\"returns\":{\"_0\":\"Id of ETS Target record\"}},\"getTargetById(uint256)\":{\"params\":{\"_targetId\":\"targetId uint computed from URI via computeTargetId().\"},\"returns\":{\"_0\":\"Target record.\"}},\"getTargetByURI(string)\":{\"params\":{\"_targetURI\":\"Unique resource identifier Target record points to.\"},\"returns\":{\"_0\":\"Target record.\"}},\"proxiableUUID()\":{\"details\":\"Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate the implementation's compatibility when performing an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\"},\"setAccessControls(address)\":{\"params\":{\"_accessControls\":\"Address of ETSAccessControls contract.\"}},\"setEnrichTarget(address)\":{\"params\":{\"_etsEnrichTarget\":\"Address of ETSEnrichTarget contract.\"}},\"targetExistsById(uint256)\":{\"params\":{\"_targetId\":\"targetId uint computed from URI via computeTargetId().\"},\"returns\":{\"_0\":\"true if Target record exists; false if not.\"}},\"targetExistsByURI(string)\":{\"params\":{\"_targetURI\":\"Unique resource identifier Target record points to.\"},\"returns\":{\"_0\":\"true if Target record exists; false if not.\"}},\"updateTarget(uint256,string,uint256,uint256,string)\":{\"params\":{\"_enriched\":\"block timestamp when Target was last enriched\",\"_httpStatus\":\"https status of last response from ETSEnrichTarget API eg. \\\"404\\\", \\\"200\\\". defaults to 0\",\"_ipfsHash\":\"ipfsHash of additional metadata for Target collected by ETSEnrichTarget API\",\"_targetId\":\"Id of Target being updated.\",\"_targetURI\":\"Unique resource identifier Target points to.\"},\"returns\":{\"success\":\"true when Target is successfully updated.\"}},\"upgradeTo(address)\":{\"custom:oz-upgrades-unsafe-allow-reachable\":\"delegatecall\",\"details\":\"Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"},\"upgradeToAndCall(address,bytes)\":{\"custom:oz-upgrades-unsafe-allow-reachable\":\"delegatecall\",\"details\":\"Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"}},\"stateVariables\":{\"targets\":{\"details\":\"Map of targetId to Target struct.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"computeTargetId(string)\":{\"notice\":\"Function to deterministically compute & return a targetId. Every Target in ETS is mapped to by it's targetId. This Id is computed from the target URI sting hashed and cast as a uint256. Note: Function does not verify if Target record exists.\"},\"createTarget(string)\":{\"notice\":\"Create a Target record and return it's targetId.\"},\"getOrCreateTargetId(string)\":{\"notice\":\"Get ETS targetId from URI. Combo function that given a URI string will return it's ETS targetId if it exists, or create a new Target record and return corresponding targetId.\"},\"getTargetById(uint256)\":{\"notice\":\"Retrieve a Target record for a computed targetId. Note: returns a struct with empty members when no Target exists.\"},\"getTargetByURI(string)\":{\"notice\":\"Retrieve a Target record for a given URI string. Note: returns a struct with empty members when no Target exists.\"},\"setAccessControls(address)\":{\"notice\":\"Sets ETSAccessControls on the ETSTarget contract so functions can be restricted to ETS platform only. Note Caller of this function must be deployer or pre-set as admin of new contract.\"},\"setEnrichTarget(address)\":{\"notice\":\"Sets ETSEnrichTarget contract address so that Target metadata enrichment functions can be called from ETSTarget.\"},\"targetExistsById(uint256)\":{\"notice\":\"Check that a Target record exists for a given computed targetId.\"},\"targetExistsByURI(string)\":{\"notice\":\"Check that a Target record exists for a given URI string.\"},\"updateTarget(uint256,string,uint256,uint256,string)\":{\"notice\":\"Update a Target record.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/ETSTarget.sol\":\"ETSTarget\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControlUpgradeable {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0xb8f5302f12138c5561362e88a78d061573e6298b7a1a5afe84a1e2c8d4d5aeaa\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/interfaces/IERC1967Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (interfaces/IERC1967.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC-1967: Proxy Storage Slots. This interface contains the events defined in the ERC.\\n *\\n * _Available since v4.8.3._\\n */\\ninterface IERC1967Upgradeable {\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Emitted when the beacon is changed.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n}\\n\",\"keccak256\":\"0x47d6e06872b12e72c79d1b5eb55842f860b5fb1207b2317c2358d2766b950a7b\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822ProxiableUpgradeable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x77c89f893e403efc6929ba842b7ccf6534d4ffe03afe31670b4a528c0ad78c0f\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/ERC1967/ERC1967Upgrade.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeaconUpgradeable.sol\\\";\\nimport \\\"../../interfaces/IERC1967Upgradeable.sol\\\";\\nimport \\\"../../interfaces/draft-IERC1822Upgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../../utils/StorageSlotUpgradeable.sol\\\";\\nimport \\\"../utils/Initializable.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract ERC1967UpgradeUpgradeable is Initializable, IERC1967Upgradeable {\\n    function __ERC1967Upgrade_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC1967Upgrade_init_unchained() internal onlyInitializing {\\n    }\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(AddressUpgradeable.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(address newImplementation, bytes memory data, bool forceCall) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            AddressUpgradeable.functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallUUPS(address newImplementation, bytes memory data, bool forceCall) internal {\\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\\n        if (StorageSlotUpgradeable.getBooleanSlot(_ROLLBACK_SLOT).value) {\\n            _setImplementation(newImplementation);\\n        } else {\\n            try IERC1822ProxiableUpgradeable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n                require(slot == _IMPLEMENTATION_SLOT, \\\"ERC1967Upgrade: unsupported proxiableUUID\\\");\\n            } catch {\\n                revert(\\\"ERC1967Upgrade: new implementation is not UUPS\\\");\\n            }\\n            _upgradeToAndCall(newImplementation, data, forceCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(AddressUpgradeable.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            AddressUpgradeable.isContract(IBeaconUpgradeable(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(address newBeacon, bytes memory data, bool forceCall) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            AddressUpgradeable.functionDelegateCall(IBeaconUpgradeable(newBeacon).implementation(), data);\\n        }\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x584ebdf9c1118a7c773f98788e3f3ede01982bdf8932aa06f5acc7d54876e161\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeaconUpgradeable {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0x24b86ac8c005b8c654fbf6ac34a5a4f61580d7273541e83e013e89d66fbf0908\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x89be10e757d242e9b18d5a32c9fbe2019f6d63052bbe46397a430a1d60d7f794\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/UUPSUpgradeable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../interfaces/draft-IERC1822Upgradeable.sol\\\";\\nimport \\\"../ERC1967/ERC1967UpgradeUpgradeable.sol\\\";\\nimport \\\"./Initializable.sol\\\";\\n\\n/**\\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\\n *\\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\\n * `UUPSUpgradeable` with a custom implementation of upgrades.\\n *\\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract UUPSUpgradeable is Initializable, IERC1822ProxiableUpgradeable, ERC1967UpgradeUpgradeable {\\n    function __UUPSUpgradeable_init() internal onlyInitializing {\\n    }\\n\\n    function __UUPSUpgradeable_init_unchained() internal onlyInitializing {\\n    }\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable state-variable-assignment\\n    address private immutable __self = address(this);\\n\\n    /**\\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\\n     * a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\\n     * function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\\n     * fail.\\n     */\\n    modifier onlyProxy() {\\n        require(address(this) != __self, \\\"Function must be called through delegatecall\\\");\\n        require(_getImplementation() == __self, \\\"Function must be called through active proxy\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Check that the execution is not being performed through a delegate call. This allows a function to be\\n     * callable on the implementing contract but not through proxies.\\n     */\\n    modifier notDelegated() {\\n        require(address(this) == __self, \\\"UUPSUpgradeable: must not be called through delegatecall\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the\\n     * implementation. It is used to validate the implementation's compatibility when performing an upgrade.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\\n     */\\n    function proxiableUUID() external view virtual override notDelegated returns (bytes32) {\\n        return _IMPLEMENTATION_SLOT;\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     *\\n     * @custom:oz-upgrades-unsafe-allow-reachable delegatecall\\n     */\\n    function upgradeTo(address newImplementation) public virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, new bytes(0), false);\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\\n     * encoded in `data`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     *\\n     * @custom:oz-upgrades-unsafe-allow-reachable delegatecall\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes memory data) public payable virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, data, true);\\n    }\\n\\n    /**\\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\\n     * {upgradeTo} and {upgradeToAndCall}.\\n     *\\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\\n     *\\n     * ```solidity\\n     * function _authorizeUpgrade(address) internal override onlyOwner {}\\n     * ```\\n     */\\n    function _authorizeUpgrade(address newImplementation) internal virtual;\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xb607cb94c27e89750f5ae2ccebcb94e654e926f6125f4fd4c6262c89875118ad\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9c80f545915582e63fe206c6ce27cbe85a86fc10b9cd2a0e8c9488fb7c2ee422\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._\\n * _Available since v4.9 for `string`, `bytes`._\\n */\\nlibrary StorageSlotUpgradeable {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x07ac95acad040f1fb1f6120dd0aa5f702db69446e95f82613721879d30de0908\",\"license\":\"MIT\"},\"contracts/ETSTarget.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n/**\\n * @title IETSTarget\\n * @author Ethereum Tag Service <team@ets.xyz>\\n *\\n *  \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\n *  \\u2588\\u2588\\u2554\\u2550\\u2550\\u2550\\u2550\\u255d\\u255a\\u2550\\u2550\\u2588\\u2588\\u2554\\u2550\\u2550\\u255d\\u2588\\u2588\\u2554\\u2550\\u2550\\u2550\\u2550\\u255d\\n *  \\u2588\\u2588\\u2588\\u2588\\u2588\\u2557     \\u2588\\u2588\\u2551   \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\n *  \\u2588\\u2588\\u2554\\u2550\\u2550\\u255d     \\u2588\\u2588\\u2551   \\u255a\\u2550\\u2550\\u2550\\u2550\\u2588\\u2588\\u2551\\n *  \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557   \\u2588\\u2588\\u2551   \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2551\\n *  \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d   \\u255a\\u2550\\u255d   \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\n *\\n * @notice This is core ETSTarget.sol contract for creating Target records in ETS. It includes both public\\n * and administration functions.\\n *\\n * In ETS, a \\\"Target\\\" is our data structure, stored onchain, that references/points to a URI. Target records\\n * are identified in ETS by their Id (targetId) which is a unsigned integer computed from the URI string.\\n * Target Ids are combined with CTAG Ids by ETS core (ETS.sol) to form \\\"Tagging Records\\\".\\n *\\n * For context, from Wikipedia, URI is short for Uniform Resource Identifier and is a unique sequence of\\n * characters that identifies a logical or physical resource used by web technologies. URIs may be used to\\n * identify anything, including real-world objects, such as people and places, concepts, or information\\n * resources such as web pages and books.\\n *\\n * For our purposes, as much as possible, we are restricting our interpretation of URIs to the more technical\\n * parameters defined by the IETF in [RFC3986](https://www.rfc-editor.org/rfc/rfc3986). For newer protocols, such\\n * as blockchains, we will lean on newer emerging URI standards such as the [Blink](https://w3c-ccg.github.io/blockchain-links)\\n * and [BIP-122](https://github.com/bitcoin/bips/blob/master/bip-0122.mediawiki)\\n *\\n * One the thing to keep in mind with URIs & ETS Targets is that differently shaped URIs can sometimes point to the same\\n * resource. The effect of that is that different Target IDs in ETS can similarly point to the same resource.\\n */\\n\\npragma solidity ^0.8.10;\\n\\nimport { IETSTarget } from \\\"./interfaces/IETSTarget.sol\\\";\\nimport { IETSEnrichTarget } from \\\"./interfaces/IETSEnrichTarget.sol\\\";\\nimport { IETSAccessControls } from \\\"./interfaces/IETSAccessControls.sol\\\";\\nimport { StringHelpers } from \\\"./utils/StringHelpers.sol\\\";\\nimport { Initializable } from \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport { UUPSUpgradeable } from \\\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\\\";\\n\\ncontract ETSTarget is IETSTarget, UUPSUpgradeable, StringHelpers {\\n    IETSAccessControls public etsAccessControls;\\n\\n    IETSEnrichTarget public etsEnrichTarget;\\n\\n    // Public constants\\n\\n    string public constant NAME = \\\"ETSTarget\\\";\\n\\n    /// @dev Map of targetId to Target struct.\\n    mapping(uint256 => Target) public targets;\\n\\n    // Modifiers\\n\\n    modifier onlyAdmin() {\\n        require(etsAccessControls.isAdmin(msg.sender), \\\"Access denied\\\");\\n        _;\\n    }\\n\\n    // ============ UUPS INTERFACE ============\\n\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\n    constructor() {\\n        _disableInitializers();\\n    }\\n\\n    function initialize(address _etsAccessControls) public initializer {\\n        etsAccessControls = IETSAccessControls(_etsAccessControls);\\n    }\\n\\n    // solhint-disable-next-line\\n    function _authorizeUpgrade(address) internal override onlyAdmin {}\\n\\n    // ============ OWNER INTERFACE ============\\n\\n    /**\\n     * @notice Sets ETSAccessControls on the ETSTarget contract so functions can be\\n     * restricted to ETS platform only. Note Caller of this function must be deployer\\n     * or pre-set as admin of new contract.\\n     *\\n     * @param _accessControls Address of ETSAccessControls contract.\\n     */\\n    function setAccessControls(IETSAccessControls _accessControls) public onlyAdmin {\\n        require(address(_accessControls) != address(0), \\\"Address cannot be zero\\\");\\n        require(_accessControls.isAdmin(msg.sender), \\\"Caller not admin in new contract\\\");\\n        etsAccessControls = _accessControls;\\n        emit AccessControlsSet(address(etsAccessControls));\\n    }\\n\\n    /// @inheritdoc IETSTarget\\n    function setEnrichTarget(address _etsEnrichTarget) public onlyAdmin {\\n        require(address(_etsEnrichTarget) != address(0), \\\"Bad address\\\");\\n        etsEnrichTarget = IETSEnrichTarget(_etsEnrichTarget);\\n        emit EnrichTargetSet(_etsEnrichTarget);\\n    }\\n\\n    // ============ PUBLIC INTERFACE ============\\n\\n    /// @inheritdoc IETSTarget\\n    function getOrCreateTargetId(string memory _targetURI) public returns (uint256) {\\n        uint256 _targetId = computeTargetId(_targetURI);\\n        if (bytes(targets[_targetId].targetURI).length > 0) {\\n            return _targetId;\\n        }\\n\\n        return createTarget(_targetURI);\\n    }\\n\\n    /// @inheritdoc IETSTarget\\n    function createTarget(string memory _targetURI) public returns (uint256 targetId) {\\n        require(!targetExistsByURI(_targetURI), \\\"target id exists\\\");\\n        require(bytes(_targetURI).length > 0, \\\"empty target\\\");\\n\\n        uint256 _targetId = computeTargetId(_targetURI);\\n        targets[_targetId] = Target({\\n            targetURI: _targetURI,\\n            createdBy: msg.sender,\\n            enriched: 0,\\n            httpStatus: 0,\\n            ipfsHash: \\\"\\\"\\n        });\\n        emit TargetCreated(_targetId);\\n        return _targetId;\\n    }\\n\\n    /// @inheritdoc IETSTarget\\n    function updateTarget(\\n        uint256 _targetId,\\n        string calldata _targetURI,\\n        uint256 _enriched,\\n        uint256 _httpStatus,\\n        string calldata _ipfsHash\\n    ) external returns (bool success) {\\n        require(msg.sender == address(etsEnrichTarget), \\\"Access denied\\\");\\n        targets[_targetId].targetURI = _targetURI;\\n        targets[_targetId].enriched = _enriched;\\n        targets[_targetId].httpStatus = _httpStatus;\\n        targets[_targetId].ipfsHash = _ipfsHash;\\n\\n        emit TargetUpdated(_targetId);\\n        return true;\\n    }\\n\\n    // ============ PUBLIC VIEW FUNCTIONS ============\\n\\n    /// @inheritdoc IETSTarget\\n    function computeTargetId(string memory _targetURI) public pure returns (uint256) {\\n        // ? Should we lowercase\\n        bytes32 targetId = keccak256(bytes(_targetURI));\\n        return uint256(targetId);\\n    }\\n\\n    /// @inheritdoc IETSTarget\\n    function targetExistsByURI(string memory _targetURI) public view returns (bool) {\\n        uint256 targetId = computeTargetId(_targetURI);\\n        return targetExistsById(targetId);\\n    }\\n\\n    /// @inheritdoc IETSTarget\\n    function targetExistsById(uint256 _targetId) public view returns (bool) {\\n        return bytes(targets[_targetId].targetURI).length > 0 ? true : false;\\n    }\\n\\n    /// @inheritdoc IETSTarget\\n    function getTargetByURI(string memory _targetURI) public view returns (Target memory) {\\n        uint256 targetId = computeTargetId(_targetURI);\\n        return getTargetById(targetId);\\n    }\\n\\n    /// @inheritdoc IETSTarget\\n    function getTargetById(uint256 _targetId) public view returns (Target memory) {\\n        return targets[_targetId];\\n    }\\n}\\n\",\"keccak256\":\"0x6fd71a2a188a8d893ffdc3a543289893dbe554fc7d045622d299ea16b0995479\",\"license\":\"MIT\"},\"contracts/interfaces/IETSAccessControls.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n/**\\n * @title IETSAccessControls\\n * @author Ethereum Tag Service <team@ets.xyz>\\n *\\n *  \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\n *  \\u2588\\u2588\\u2554\\u2550\\u2550\\u2550\\u2550\\u255d\\u255a\\u2550\\u2550\\u2588\\u2588\\u2554\\u2550\\u2550\\u255d\\u2588\\u2588\\u2554\\u2550\\u2550\\u2550\\u2550\\u255d\\n *  \\u2588\\u2588\\u2588\\u2588\\u2588\\u2557     \\u2588\\u2588\\u2551   \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\n *  \\u2588\\u2588\\u2554\\u2550\\u2550\\u255d     \\u2588\\u2588\\u2551   \\u255a\\u2550\\u2550\\u2550\\u2550\\u2588\\u2588\\u2551\\n *  \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557   \\u2588\\u2588\\u2551   \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2551`\\n *  \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d   \\u255a\\u2550\\u255d   \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\n *\\n * @notice This is the interface for the ETSAccessControls contract which allows ETS Core Dev\\n * Team to administer roles and control access to various parts of the ETS Platform.\\n * ETSAccessControls contract contains a mix of public and administrator only functions.\\n */\\n\\npragma solidity ^0.8.10;\\n\\nimport { IAccessControlUpgradeable } from \\\"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol\\\";\\n\\ninterface IETSAccessControls is IAccessControlUpgradeable {\\n    /**\\n     * @dev emitted when the ETS Platform address is set.\\n     *\\n     * @param newAddress wallet address platform is being set to.\\n     * @param prevAddress previous platform address.\\n     */\\n    event PlatformSet(address newAddress, address prevAddress);\\n\\n    /**\\n     * @dev emitted when a Relayer contract is added & enabled in ETS.\\n     *\\n     * Relayer contracts are not required implement all ETS Core API functions. Therefore, to ease\\n     * testing of ETS Core API fuinctions, ETS permits addition of ETS owned wallet addresses as Relayers.\\n     *\\n     * @param relayer Relayer contract address.\\n     */\\n    event RelayerAdded(address relayer);\\n\\n    /**\\n     * @dev emitted when a Relayer contract is paused or unpaused.\\n     *\\n     * @param relayer Address that had pause toggled.\\n     */\\n    event RelayerLockToggled(address relayer);\\n\\n    /**\\n     * @notice Sets the Platform wallet address. Can only be called by address with DEFAULT_ADMIN_ROLE.\\n     *\\n     * @param _platform The new Platform address to set.\\n     */\\n    function setPlatform(address payable _platform) external;\\n\\n    /**\\n     * @notice Adds a Relayer contract to ETS. Can only be called by address\\n     * with DEFAULT_ADMIN_ROLE.\\n     *\\n     * @param _relayer Address of the Relayer contract. Must conform to IETSRelayer.\\n     * @param _name Human readable name of the Relayer.\\n     * @param _owner Address of relayer owner.\\n     */\\n    function registerRelayer(address _relayer, string calldata _name, address _owner) external;\\n\\n    /**\\n     * @notice Pause relayer given the relayer owner address. Callable by Platform only.\\n     *\\n     * @param _relayerOwner Address of the Relayer owner.\\n     */\\n    function pauseRelayerByOwnerAddress(address _relayerOwner) external;\\n\\n    /**\\n     * @notice Change the relayer owner as stored in ETSAccessControls. Callable from Relayer only.\\n     * Called via changeOwner() on a relayer.\\n     *\\n     * @param _currentOwner Address of the current relayer owner.\\n     * @param _newOwner Address of the new relayer owner.\\n     */\\n    function changeRelayerOwner(address _currentOwner, address _newOwner) external;\\n\\n    /**\\n     * @notice Pauses/Unpauses a Relayer contract. Can only be called by address\\n     * with DEFAULT_ADMIN_ROLE.\\n     *\\n     * @param _relayer Address of the Relayer contract.\\n     */\\n    function toggleRelayerLock(address _relayer) external;\\n\\n    /**\\n     * @notice Sets the role admin for a given role. An address with role admin can grant or\\n     * revoke that role for other addresses. Can only be called by address with DEFAULT_ADMIN_ROLE.\\n     *\\n     * @param _role bytes32 representation of role being administered.\\n     * @param _adminRole bytes32 representation of administering role.\\n     */\\n    function setRoleAdmin(bytes32 _role, bytes32 _adminRole) external;\\n\\n    /**\\n     * @notice Checks whether given address has SMART_CONTRACT role.\\n     *\\n     * @param _addr Address being checked.\\n     * @return boolean True if address has SMART_CONTRACT role.\\n     */\\n    function isSmartContract(address _addr) external view returns (bool);\\n\\n    /**\\n     * @notice Checks whether given address has DEFAULT_ADMIN_ROLE role.\\n     *\\n     * @param _addr Address being checked.\\n     * @return boolean True if address has DEFAULT_ADMIN_ROLE role.\\n     */\\n    function isAdmin(address _addr) external view returns (bool);\\n\\n    /**\\n     * @notice Checks whether given address has AUCTION_ORACLE_ROLE role.\\n     *\\n     * @param _addr Address being checked.\\n     * @return boolean True if address has AUCTION_ORACLE_ROLE role.\\n     */\\n    function isAuctionOracle(address _addr) external view returns (bool);\\n\\n    /**\\n     * @notice Checks whether given address can act as relayer factory.\\n     *\\n     * @param _addr Address being checked.\\n     * @return boolean True if address can act as relayer factory.\\n     */\\n    function isRelayerFactory(address _addr) external view returns (bool);\\n\\n    /**\\n     * @notice Checks whether given address is a relayer.\\n     *\\n     * @param _addr Address being checked.\\n     * @return boolean True if address can be a relayer.\\n     */\\n    function isRelayer(address _addr) external view returns (bool);\\n\\n    /**\\n     * @notice Checks whether given address is a registered Relayer and not paused.\\n     *\\n     * @param _addr Address being checked.\\n     * @return boolean True if address is a Relayer and not paused.\\n     */\\n    function isRelayerAndNotPaused(address _addr) external view returns (bool);\\n\\n    /**\\n     * @notice Checks relayer is paused by ETS Platform.\\n     *\\n     * @param _addr Address being checked.\\n     * @return boolean True if relayer address is paused by platform.\\n     */\\n    function isRelayerLocked(address _addr) external view returns (bool);\\n\\n    /**\\n     * @notice Checks whether given address owns a relayer.\\n     *\\n     * @param _addr Address being checked.\\n     * @return boolean True if address owns a relayer.\\n     */\\n    function isRelayerByOwner(address _addr) external view returns (bool);\\n\\n    /**\\n     * @notice Checks whether given address has RELAYER_ADMIN role.\\n     *\\n     * @param _addr Address being checked.\\n     * @return boolean True if address has RELAYER_ADMIN role.\\n     */\\n    function isRelayerAdmin(address _addr) external view returns (bool);\\n\\n    /**\\n     * @notice Checks whether given Relayer Name is a registered Relayer.\\n     *\\n     * @param _name Name being checked.\\n     * @return boolean True if _name is a Relayer.\\n     */\\n    function isRelayerByName(string calldata _name) external view returns (bool);\\n\\n    /**\\n     * @notice Checks whether given address is a registered Relayer.\\n     *\\n     * @param _addr Address being checked.\\n     * @return boolean True if address is a registered Relayer.\\n     */\\n    function isRelayerByAddress(address _addr) external view returns (bool);\\n\\n    /**\\n     * @notice Get relayer address from it's name.\\n     *\\n     * @param _name Name of relayer.\\n     * @return Address of relayer.\\n     */\\n    function getRelayerAddressFromName(string calldata _name) external view returns (address);\\n\\n    /**\\n     * @notice Get relayer name from it's address.\\n     *\\n     * @param _address Adsdress of relayer.\\n     * @return Name of relayer.\\n     */\\n    function getRelayerNameFromAddress(address _address) external view returns (string calldata);\\n\\n    /**\\n     * @notice Get relayer address from its owner address.\\n     *\\n     * @param _address address of relayer owner.\\n     * @return Address of relayer.\\n     */\\n    function getRelayerAddressFromOwner(address _address) external view returns (address);\\n\\n    /**\\n     * @notice Returns wallet address for ETS Platform.\\n     *\\n     * @return ETS Platform address.\\n     */\\n    function getPlatformAddress() external view returns (address payable);\\n}\\n\",\"keccak256\":\"0x0948eb19ab50fdd3cb1ac728be863567c9cefd4da0e4ecc2b3b052020c86ed74\",\"license\":\"MIT\"},\"contracts/interfaces/IETSEnrichTarget.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n/**\\n * @title IETSEnrichTarget\\n * @author Ethereum Tag Service <team@ets.xyz>\\n *\\n *  \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\n *  \\u2588\\u2588\\u2554\\u2550\\u2550\\u2550\\u2550\\u255d\\u255a\\u2550\\u2550\\u2588\\u2588\\u2554\\u2550\\u2550\\u255d\\u2588\\u2588\\u2554\\u2550\\u2550\\u2550\\u2550\\u255d\\n *  \\u2588\\u2588\\u2588\\u2588\\u2588\\u2557     \\u2588\\u2588\\u2551   \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\n *  \\u2588\\u2588\\u2554\\u2550\\u2550\\u255d     \\u2588\\u2588\\u2551   \\u255a\\u2550\\u2550\\u2550\\u2550\\u2588\\u2588\\u2551\\n *  \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557   \\u2588\\u2588\\u2551   \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2551`\\n *  \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d   \\u255a\\u2550\\u255d   \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\n *\\n * @notice This is the interface for the ETSEnrichTarget.sol contract that handles the enrichment of\\n * Target metadata using off-chain APIs.\\n *\\n * In order to keep the on-chain recording of new Target records lightweight and inexpensive,\\n * the createTarget() function (ETSTarget.sol) requires only a URI string (targetURI). To augment this,\\n * we are developing a hybrid onchain/off-chain Enrich Target flow for the purpose of collecting\\n * additional metadata about a Target and saving it back on-chain.\\n *\\n * The flow begins with the requestEnrichTarget() function (see below) which takes a targetId as an\\n * argument. If the Target exists, the function emits the targetId via the RequestEnrichTarget event.\\n *\\n * An OpenZeppelin Defender Sentinel is listening for this event, and when detected, passes the\\n * targetId to an ETS off-chain service we call the Enrich Target API, which extracts the Target URI,\\n * collects metadata about the URI and saves it in json format to IPFS. The IPFS entpoint is posted\\n * back on-chain via fulfillEnrichTarget() thus updating the Target data struct.\\n *\\n * Future implementation should utilize ChainLink in place of OpenZeppelin for better decentralization.\\n */\\n\\npragma solidity ^0.8.10;\\n\\ninterface IETSEnrichTarget {\\n    /**\\n     * @dev emitted when Target enrichment is requested via requestEnrichTarget().\\n     *\\n     * @param targetId Target record to enrich.\\n     */\\n    event RequestEnrichTarget(uint256 targetId);\\n\\n    /**\\n     * @notice Request enrichment for a Target using the hybrid ETS Enrich Target API.\\n     *\\n     * @param _targetId Id of Target being enriched.\\n     */\\n    function requestEnrichTarget(uint256 _targetId) external;\\n\\n    /**\\n     * @notice Updates Target record with additional metadata stored behind IPFS hash.\\n     *\\n     * @param _targetId Id of Target being enriched & updated.\\n     * @param _ipfsHash IPFS hash with metadata related to the Target.\\n     * @param _httpStatus HTTP response code from off-chain ETS Enrich Target API.\\n     */\\n    function fulfillEnrichTarget(uint256 _targetId, string calldata _ipfsHash, uint256 _httpStatus) external;\\n}\\n\",\"keccak256\":\"0xbf62f7a0ea876f81ce87cb10dc0b4ef11dfee980c1851fb08a892c51ed950e88\",\"license\":\"MIT\"},\"contracts/interfaces/IETSTarget.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n/**\\n * @title IETSTarget\\n * @author Ethereum Tag Service <team@ets.xyz>\\n *\\n *  \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\n *  \\u2588\\u2588\\u2554\\u2550\\u2550\\u2550\\u2550\\u255d\\u255a\\u2550\\u2550\\u2588\\u2588\\u2554\\u2550\\u2550\\u255d\\u2588\\u2588\\u2554\\u2550\\u2550\\u2550\\u2550\\u255d\\n *  \\u2588\\u2588\\u2588\\u2588\\u2588\\u2557     \\u2588\\u2588\\u2551   \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\n *  \\u2588\\u2588\\u2554\\u2550\\u2550\\u255d     \\u2588\\u2588\\u2551   \\u255a\\u2550\\u2550\\u2550\\u2550\\u2588\\u2588\\u2551\\n *  \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557   \\u2588\\u2588\\u2551   \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2551`\\n *  \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d   \\u255a\\u2550\\u255d   \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\n *\\n * @notice This is the standard interface for the core ETSTarget.sol contract. It includes both public\\n * and administration functions.\\n *\\n * In ETS, a \\\"Target\\\" is our data structure, stored onchain, that references/points to a URI. Target records\\n * are identified in ETS by their Id (targetId) which is a unsigned integer computed from the URI string.\\n * Target Ids are combined with CTAG Ids by ETS core (ETS.sol) to form \\\"Tagging Records\\\".\\n *\\n * For context, from Wikipedia, URI is short for Uniform Resource Identifier and is a unique sequence of\\n * characters that identifies a logical or physical resource used by web technologies. URIs may be used to\\n * identify anything, including real-world objects, such as people and places, concepts, or information\\n * resources such as web pages and books.\\n *\\n * For our purposes, as much as possible, we are restricting our interpretation of URIs to the more technical\\n * parameters defined by the IETF in [RFC3986](https://www.rfc-editor.org/rfc/rfc3986). For newer protocols, such\\n * as blockchains, For newer protocols, such as blockchains we will lean on newer emerging URI standards such\\n * as the [Blink](https://w3c-ccg.github.io/blockchain-links) and [BIP-122](https://github.com/bitcoin/bips/blob/master/bip-0122.mediawiki)\\n *\\n * One the thing to keep in mind with URIs & ETS Targets is that differently shaped URIs can sometimes point to the same\\n * resource. The effect of that is that different Target IDs in ETS can similarly point to the same resource.\\n */\\n\\npragma solidity ^0.8.10;\\n\\ninterface IETSTarget {\\n    /**\\n     * @notice Data structure for an ETS Target.\\n     *\\n     * @param targetURI Unique resource identifier Target points to\\n     * @param createdBy Address of IETSTargetTagger implementation that created Target\\n     * @param enriched block timestamp when Target was last enriched. Defaults to 0\\n     * @param httpStatus https status of last response from ETSEnrichTarget API eg. \\\"404\\\", \\\"200\\\". defaults to 0\\n     * @param ipfsHash ipfsHash of additional metadata for Target collected by ETSEnrichTarget API\\n     */\\n    struct Target {\\n        string targetURI;\\n        address createdBy;\\n        uint256 enriched;\\n        uint256 httpStatus;\\n        string ipfsHash;\\n    }\\n\\n    /**\\n     * @dev emitted when the ETSAccessControls is set.\\n     *\\n     * @param etsAccessControls contract address ETSAccessControls is set to.\\n     */\\n    event AccessControlsSet(address etsAccessControls);\\n\\n    /**\\n     * @dev emitted when the ETSEnrichTarget API address is set.\\n     *\\n     * @param etsEnrichTarget contract address ETSEnrichTarget is set to.\\n     */\\n    event EnrichTargetSet(address etsEnrichTarget);\\n\\n    /**\\n     * @dev emitted when a new Target is created.\\n     *\\n     * @param targetId Unique Id of new Target.\\n     */\\n    event TargetCreated(uint256 targetId);\\n\\n    /**\\n     * @dev emitted when an existing Target is updated.\\n     *\\n     * @param targetId Id of Target being updated.\\n     */\\n    event TargetUpdated(uint256 targetId);\\n\\n    /**\\n     * @notice Sets ETSEnrichTarget contract address so that Target metadata enrichment\\n     * functions can be called from ETSTarget.\\n     *\\n     * @param _etsEnrichTarget Address of ETSEnrichTarget contract.\\n     */\\n    function setEnrichTarget(address _etsEnrichTarget) external;\\n\\n    /**\\n     * @notice Get ETS targetId from URI.\\n     *\\n     * Combo function that given a URI string will return it's ETS targetId if it exists,\\n     * or create a new Target record and return corresponding targetId.\\n     *\\n     * @param _targetURI URI passed in as string\\n     * @return Id of ETS Target record\\n     */\\n    function getOrCreateTargetId(string memory _targetURI) external returns (uint256);\\n\\n    /**\\n     * @notice Create a Target record and return it's targetId.\\n     *\\n     * @param _targetURI URI passed in as string\\n     * @return targetId Id of ETS Target record\\n     */\\n    function createTarget(string memory _targetURI) external returns (uint256 targetId);\\n\\n    /**\\n     * @notice Update a Target record.\\n     *\\n     * @param _targetId Id of Target being updated.\\n     * @param _targetURI Unique resource identifier Target points to.\\n     * @param _enriched block timestamp when Target was last enriched\\n     * @param _httpStatus https status of last response from ETSEnrichTarget API eg. \\\"404\\\", \\\"200\\\". defaults to 0\\n     * @param _ipfsHash ipfsHash of additional metadata for Target collected by ETSEnrichTarget API\\n\\n     * @return success true when Target is successfully updated.\\n     */\\n    function updateTarget(\\n        uint256 _targetId,\\n        string calldata _targetURI,\\n        uint256 _enriched,\\n        uint256 _httpStatus,\\n        string calldata _ipfsHash\\n    ) external returns (bool success);\\n\\n    /**\\n     * @notice Function to deterministically compute & return a targetId.\\n     *\\n     * Every Target in ETS is mapped to by it's targetId. This Id is computed from\\n     * the target URI sting hashed and cast as a uint256.\\n     *\\n     * Note: Function does not verify if Target record exists.\\n     *\\n     * @param _targetURI Unique resource identifier Target record points to.\\n     * @return targetId Id of the potential Target record.\\n     */\\n    function computeTargetId(string memory _targetURI) external view returns (uint256 targetId);\\n\\n    /**\\n     * @notice Check that a Target record exists for a given URI string.\\n     *\\n     * @param _targetURI Unique resource identifier Target record points to.\\n     * @return true if Target record exists; false if not.\\n     */\\n    function targetExistsByURI(string memory _targetURI) external view returns (bool);\\n\\n    /**\\n     * @notice Check that a Target record exists for a given computed targetId.\\n     *\\n     * @param _targetId targetId uint computed from URI via computeTargetId().\\n     * @return true if Target record exists; false if not.\\n     */\\n    function targetExistsById(uint256 _targetId) external view returns (bool);\\n\\n    /**\\n     * @notice Retrieve a Target record for a given URI string.\\n     *\\n     * Note: returns a struct with empty members when no Target exists.\\n     *\\n     * @param _targetURI Unique resource identifier Target record points to.\\n     * @return Target record.\\n     */\\n    function getTargetByURI(string memory _targetURI) external view returns (Target memory);\\n\\n    /**\\n     * @notice Retrieve a Target record for a computed targetId.\\n     *\\n     * Note: returns a struct with empty members when no Target exists.\\n     *\\n     * @param _targetId targetId uint computed from URI via computeTargetId().\\n     * @return Target record.\\n     */\\n    function getTargetById(uint256 _targetId) external view returns (Target memory);\\n}\\n\",\"keccak256\":\"0xb6c3a34352303df2ced14765c40d27bf712597c37be7b2a4c0736843bac731b5\",\"license\":\"MIT\"},\"contracts/utils/StringHelpers.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.10;\\n\\n/// @title StringHelpers Contract\\n/// @author Ethereum Tag Service <security@ets.xyz>\\n/// @notice Helper functions for common string operations.\\nabstract contract StringHelpers {\\n    /// @notice Convert a string to its lowercase equivalent.\\n    /// @param _base String to convert.\\n    /// @return string Lowercase version of string supplied.\\n    function __lower(string memory _base) internal pure returns (string memory) {\\n        bytes memory bStr = bytes(_base);\\n        bytes memory bLower = new bytes(bStr.length);\\n        for (uint256 i = 0; i < bStr.length; i++) {\\n            // Uppercase character.\\n            if ((bStr[i] >= 0x41) && (bStr[i] <= 0x5A)) {\\n                // So we add 32 to make it lowercase.\\n                bLower[i] = bytes1(uint8(bStr[i]) + 32);\\n            } else {\\n                bLower[i] = bStr[i];\\n            }\\n        }\\n        return string(bLower);\\n    }\\n}\\n\",\"keccak256\":\"0x073730321bb0aaae5a2b5bcf1739f8460e12f68b0989abbbe96e922ea44ce1be\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a06040523060805234801561001457600080fd5b5061001d610022565b6100e1565b600054610100900460ff161561008e5760405162461bcd60e51b815260206004820152602760248201527f496e697469616c697a61626c653a20636f6e747261637420697320696e697469604482015266616c697a696e6760c81b606482015260840160405180910390fd5b60005460ff908116146100df576000805460ff191660ff9081179091556040519081527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b565b608051611c8c610118600039600081816108a80152818161092d01528181610a2401528181610aa90152610b930152611c8c6000f3fe6080604052600436106101295760003560e01c8063794e75fc116100a5578063c4d66de811610074578063cd7c68e211610059578063cd7c68e214610391578063cf99c815146103b1578063f0496c86146103d157600080fd5b8063c4d66de814610351578063cd15832f1461037157600080fd5b8063794e75fc1461029b5780637ab3f1cd146102bb5780638299f9f9146102db578063a3f4df7e146102fb57600080fd5b806323c7e9f3116100fc5780633659cfe6116100e15780633659cfe6146102515780634f1ef2861461027357806352d1902d1461028657600080fd5b806323c7e9f3146101fd57806331bb0c691461023157600080fd5b80630a39ce021461012e5780630c48789c146101685780631b2d87c3146101985780631b8278e2146101c5575b600080fd5b34801561013a57600080fd5b5061014e610149366004611823565b6103f1565b60405161015f959493929190611894565b60405180910390f35b34801561017457600080fd5b5061018861018336600461196c565b61053e565b604051901515815260200161015f565b3480156101a457600080fd5b506101b86101b3366004611823565b610558565b60405161015f91906119b5565b3480156101d157600080fd5b506066546101e5906001600160a01b031681565b6040516001600160a01b03909116815260200161015f565b34801561020957600080fd5b5061022361021836600461196c565b805160209091012090565b60405190815260200161015f565b34801561023d57600080fd5b5061022361024c36600461196c565b610701565b34801561025d57600080fd5b5061027161026c366004611a33565b61089d565b005b610271610281366004611a50565b610a19565b34801561029257600080fd5b50610223610b86565b3480156102a757600080fd5b506101b86102b636600461196c565b610c4b565b3480156102c757600080fd5b506101886102d6366004611afd565b610c96565b3480156102e757600080fd5b506065546101e5906001600160a01b031681565b34801561030757600080fd5b506103446040518060400160405280600981526020017f455453546172676574000000000000000000000000000000000000000000000081525081565b60405161015f9190611b8a565b34801561035d57600080fd5b5061027161036c366004611a33565b610d69565b34801561037d57600080fd5b5061027161038c366004611a33565b610e9c565b34801561039d57600080fd5b506101886103ac366004611823565b6110a3565b3480156103bd57600080fd5b506102236103cc36600461196c565b6110d6565b3480156103dd57600080fd5b506102716103ec366004611a33565b611114565b60676020526000908152604090208054819061040c90611b9d565b80601f016020809104026020016040519081016040528092919081815260200182805461043890611b9d565b80156104855780601f1061045a57610100808354040283529160200191610485565b820191906000526020600020905b81548152906001019060200180831161046857829003601f168201915b50505060018401546002850154600386015460048701805496976001600160a01b0390941696929550909350906104bb90611b9d565b80601f01602080910402602001604051908101604052809291908181526020018280546104e790611b9d565b80156105345780601f1061050957610100808354040283529160200191610534565b820191906000526020600020905b81548152906001019060200180831161051757829003601f168201915b5050505050905085565b80516020820120600090610551816110a3565b9392505050565b6105936040518060a001604052806060815260200160006001600160a01b031681526020016000815260200160008152602001606081525090565b60008281526067602052604090819020815160a081019092528054829082906105bb90611b9d565b80601f01602080910402602001604051908101604052809291908181526020018280546105e790611b9d565b80156106345780601f1061060957610100808354040283529160200191610634565b820191906000526020600020905b81548152906001019060200180831161061757829003601f168201915b505050918352505060018201546001600160a01b03166020820152600282015460408201526003820154606082015260048201805460809092019161067890611b9d565b80601f01602080910402602001604051908101604052809291908181526020018280546106a490611b9d565b80156106f15780601f106106c6576101008083540402835291602001916106f1565b820191906000526020600020905b8154815290600101906020018083116106d457829003601f168201915b5050505050815250509050919050565b600061070c8261053e565b1561075e5760405162461bcd60e51b815260206004820152601060248201527f746172676574206964206578697374730000000000000000000000000000000060448201526064015b60405180910390fd5b60008251116107af5760405162461bcd60e51b815260206004820152600c60248201527f656d7074792074617267657400000000000000000000000000000000000000006044820152606401610755565b81516020808401919091206040805160a081018252858152338185015260008183018190526060820181905282518086018452818152608083015283815260678552919091208151805193949293919261080e92849290910190611716565b506020828101516001830180546001600160a01b0319166001600160a01b039092169190911790556040830151600283015560608301516003830155608083015180516108619260048501920190611716565b50506040518281527f503a6e6145f2d2a2a9b0845c2193aef653400c52f93b1c897bd55d36a396be7c915060200160405180910390a192915050565b306001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016141561092b5760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201526b19195b1959d85d1958d85b1b60a21b6064820152608401610755565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166109867f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc546001600160a01b031690565b6001600160a01b0316146109f15760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201526b6163746976652070726f787960a01b6064820152608401610755565b6109fa81611260565b60408051600080825260208201909252610a1691839190611308565b50565b306001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161415610aa75760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201526b19195b1959d85d1958d85b1b60a21b6064820152608401610755565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316610b027f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc546001600160a01b031690565b6001600160a01b031614610b6d5760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201526b6163746976652070726f787960a01b6064820152608401610755565b610b7682611260565b610b8282826001611308565b5050565b6000306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610c265760405162461bcd60e51b815260206004820152603860248201527f555550535570677261646561626c653a206d757374206e6f742062652063616c60448201527f6c6564207468726f7567682064656c656761746563616c6c00000000000000006064820152608401610755565b507f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc90565b610c866040518060a001604052806060815260200160006001600160a01b031681526020016000815260200160008152602001606081525090565b8151602083012061055181610558565b6066546000906001600160a01b03163314610ce35760405162461bcd60e51b815260206004820152600d60248201526c1058d8d95cdcc819195b9a5959609a1b6044820152606401610755565b6000888152606760205260409020610cfc90888861179a565b5060008881526067602052604090206002810186905560038101859055610d2790600401848461179a565b506040518881527f9d29e5045b411bb06d81d8ff11c828d9f1d7eb076eec9ca45eda49fc99f762b29060200160405180910390a1506001979650505050505050565b600054610100900460ff1615808015610d895750600054600160ff909116105b80610da35750303b158015610da3575060005460ff166001145b610e155760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a65640000000000000000000000000000000000006064820152608401610755565b6000805460ff191660011790558015610e38576000805461ff0019166101001790555b606580546001600160a01b0319166001600160a01b0384161790558015610b82576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15050565b606554604051630935e01b60e21b81523360048201526001600160a01b03909116906324d7806c90602401602060405180830381865afa158015610ee4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f089190611bd8565b610f445760405162461bcd60e51b815260206004820152600d60248201526c1058d8d95cdcc819195b9a5959609a1b6044820152606401610755565b6001600160a01b038116610f9a5760405162461bcd60e51b815260206004820152601660248201527f416464726573732063616e6e6f74206265207a65726f000000000000000000006044820152606401610755565b604051630935e01b60e21b81523360048201526001600160a01b038216906324d7806c90602401602060405180830381865afa158015610fde573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110029190611bd8565b61104e5760405162461bcd60e51b815260206004820181905260248201527f43616c6c6572206e6f742061646d696e20696e206e657720636f6e74726163746044820152606401610755565b606580546001600160a01b0319166001600160a01b0383169081179091556040519081527f2f55f724ae3134584dfdd86a4ee1e090635ff9913722b5fe06e064cc7e3ed8b4906020015b60405180910390a150565b600081815260676020526040812080548291906110bf90611b9d565b9050116110cd5760006110d0565b60015b92915050565b8051602080830191909120600081815260679092526040822080548391906110fd90611b9d565b9050111561110b5792915050565b61055183610701565b606554604051630935e01b60e21b81523360048201526001600160a01b03909116906324d7806c90602401602060405180830381865afa15801561115c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111809190611bd8565b6111bc5760405162461bcd60e51b815260206004820152600d60248201526c1058d8d95cdcc819195b9a5959609a1b6044820152606401610755565b6001600160a01b0381166112125760405162461bcd60e51b815260206004820152600b60248201527f42616420616464726573730000000000000000000000000000000000000000006044820152606401610755565b606680546001600160a01b0319166001600160a01b0383169081179091556040519081527fe96313c1f3045cd25cc6a60c1f5b3511040581e2aa833e3e035e1cc5fb83667090602001611098565b606554604051630935e01b60e21b81523360048201526001600160a01b03909116906324d7806c90602401602060405180830381865afa1580156112a8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112cc9190611bd8565b610a165760405162461bcd60e51b815260206004820152600d60248201526c1058d8d95cdcc819195b9a5959609a1b6044820152606401610755565b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff16156113405761133b836114ad565b505050565b826001600160a01b03166352d1902d6040518163ffffffff1660e01b8152600401602060405180830381865afa92505050801561139a575060408051601f3d908101601f1916820190925261139791810190611bfa565b60015b61140c5760405162461bcd60e51b815260206004820152602e60248201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960448201527f6f6e206973206e6f7420555550530000000000000000000000000000000000006064820152608401610755565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc81146114a15760405162461bcd60e51b815260206004820152602960248201527f45524331393637557067726164653a20756e737570706f727465642070726f7860448201527f6961626c655555494400000000000000000000000000000000000000000000006064820152608401610755565b5061133b83838361156b565b6001600160a01b0381163b61152a5760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201527f6f74206120636f6e7472616374000000000000000000000000000000000000006064820152608401610755565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc80546001600160a01b0319166001600160a01b0392909216919091179055565b61157483611596565b6000825111806115815750805b1561133b5761159083836115d6565b50505050565b61159f816114ad565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b60606105518383604051806060016040528060278152602001611c30602791396060600080856001600160a01b0316856040516116139190611c13565b600060405180830381855af49150503d806000811461164e576040519150601f19603f3d011682016040523d82523d6000602084013e611653565b606091505b50915091506116648683838761166e565b9695505050505050565b606083156116da5782516116d3576001600160a01b0385163b6116d35760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610755565b50816116e4565b6116e483836116ec565b949350505050565b8151156116fc5781518083602001fd5b8060405162461bcd60e51b81526004016107559190611b8a565b82805461172290611b9d565b90600052602060002090601f016020900481019282611744576000855561178a565b82601f1061175d57805160ff191683800117855561178a565b8280016001018555821561178a579182015b8281111561178a57825182559160200191906001019061176f565b5061179692915061180e565b5090565b8280546117a690611b9d565b90600052602060002090601f0160209004810192826117c8576000855561178a565b82601f106117e15782800160ff1982351617855561178a565b8280016001018555821561178a579182015b8281111561178a5782358255916020019190600101906117f3565b5b80821115611796576000815560010161180f565b60006020828403121561183557600080fd5b5035919050565b60005b8381101561185757818101518382015260200161183f565b838111156115905750506000910152565b6000815180845261188081602086016020860161183c565b601f01601f19169290920160200192915050565b60a0815260006118a760a0830188611868565b6001600160a01b038716602084015285604084015284606084015282810360808401526118d48185611868565b98975050505050505050565b634e487b7160e01b600052604160045260246000fd5b600067ffffffffffffffff80841115611911576119116118e0565b604051601f8501601f19908116603f01168101908282118183101715611939576119396118e0565b8160405280935085815286868601111561195257600080fd5b858560208301376000602087830101525050509392505050565b60006020828403121561197e57600080fd5b813567ffffffffffffffff81111561199557600080fd5b8201601f810184136119a657600080fd5b6116e4848235602084016118f6565b602081526000825160a060208401526119d160c0840182611868565b90506001600160a01b03602085015116604084015260408401516060840152606084015160808401526080840151601f198483030160a0850152611a158282611868565b95945050505050565b6001600160a01b0381168114610a1657600080fd5b600060208284031215611a4557600080fd5b813561055181611a1e565b60008060408385031215611a6357600080fd5b8235611a6e81611a1e565b9150602083013567ffffffffffffffff811115611a8a57600080fd5b8301601f81018513611a9b57600080fd5b611aaa858235602084016118f6565b9150509250929050565b60008083601f840112611ac657600080fd5b50813567ffffffffffffffff811115611ade57600080fd5b602083019150836020828501011115611af657600080fd5b9250929050565b600080600080600080600060a0888a031215611b1857600080fd5b87359650602088013567ffffffffffffffff80821115611b3757600080fd5b611b438b838c01611ab4565b909850965060408a0135955060608a0135945060808a0135915080821115611b6a57600080fd5b50611b778a828b01611ab4565b989b979a50959850939692959293505050565b6020815260006105516020830184611868565b600181811c90821680611bb157607f821691505b60208210811415611bd257634e487b7160e01b600052602260045260246000fd5b50919050565b600060208284031215611bea57600080fd5b8151801515811461055157600080fd5b600060208284031215611c0c57600080fd5b5051919050565b60008251611c2581846020870161183c565b919091019291505056fe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a2646970667358221220a9dd74ceaa6b1f496f20b09ea471bb013334028b9d2dcb1c6ebe8a20a41b3dfa64736f6c634300080c0033",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "computeTargetId(string)": {
        "params": {
          "_targetURI": "Unique resource identifier Target record points to."
        },
        "returns": {
          "_0": "Id of the potential Target record."
        }
      },
      "constructor": {
        "custom:oz-upgrades-unsafe-allow": "constructor"
      },
      "createTarget(string)": {
        "params": {
          "_targetURI": "URI passed in as string"
        },
        "returns": {
          "targetId": "Id of ETS Target record"
        }
      },
      "getOrCreateTargetId(string)": {
        "params": {
          "_targetURI": "URI passed in as string"
        },
        "returns": {
          "_0": "Id of ETS Target record"
        }
      },
      "getTargetById(uint256)": {
        "params": {
          "_targetId": "targetId uint computed from URI via computeTargetId()."
        },
        "returns": {
          "_0": "Target record."
        }
      },
      "getTargetByURI(string)": {
        "params": {
          "_targetURI": "Unique resource identifier Target record points to."
        },
        "returns": {
          "_0": "Target record."
        }
      },
      "proxiableUUID()": {
        "details": "Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate the implementation's compatibility when performing an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier."
      },
      "setAccessControls(address)": {
        "params": {
          "_accessControls": "Address of ETSAccessControls contract."
        }
      },
      "setEnrichTarget(address)": {
        "params": {
          "_etsEnrichTarget": "Address of ETSEnrichTarget contract."
        }
      },
      "targetExistsById(uint256)": {
        "params": {
          "_targetId": "targetId uint computed from URI via computeTargetId()."
        },
        "returns": {
          "_0": "true if Target record exists; false if not."
        }
      },
      "targetExistsByURI(string)": {
        "params": {
          "_targetURI": "Unique resource identifier Target record points to."
        },
        "returns": {
          "_0": "true if Target record exists; false if not."
        }
      },
      "updateTarget(uint256,string,uint256,uint256,string)": {
        "params": {
          "_enriched": "block timestamp when Target was last enriched",
          "_httpStatus": "https status of last response from ETSEnrichTarget API eg. \"404\", \"200\". defaults to 0",
          "_ipfsHash": "ipfsHash of additional metadata for Target collected by ETSEnrichTarget API",
          "_targetId": "Id of Target being updated.",
          "_targetURI": "Unique resource identifier Target points to."
        },
        "returns": {
          "success": "true when Target is successfully updated."
        }
      },
      "upgradeTo(address)": {
        "custom:oz-upgrades-unsafe-allow-reachable": "delegatecall",
        "details": "Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
      },
      "upgradeToAndCall(address,bytes)": {
        "custom:oz-upgrades-unsafe-allow-reachable": "delegatecall",
        "details": "Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
      }
    },
    "stateVariables": {
      "targets": {
        "details": "Map of targetId to Target struct."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "computeTargetId(string)": {
        "notice": "Function to deterministically compute & return a targetId. Every Target in ETS is mapped to by it's targetId. This Id is computed from the target URI sting hashed and cast as a uint256. Note: Function does not verify if Target record exists."
      },
      "createTarget(string)": {
        "notice": "Create a Target record and return it's targetId."
      },
      "getOrCreateTargetId(string)": {
        "notice": "Get ETS targetId from URI. Combo function that given a URI string will return it's ETS targetId if it exists, or create a new Target record and return corresponding targetId."
      },
      "getTargetById(uint256)": {
        "notice": "Retrieve a Target record for a computed targetId. Note: returns a struct with empty members when no Target exists."
      },
      "getTargetByURI(string)": {
        "notice": "Retrieve a Target record for a given URI string. Note: returns a struct with empty members when no Target exists."
      },
      "setAccessControls(address)": {
        "notice": "Sets ETSAccessControls on the ETSTarget contract so functions can be restricted to ETS platform only. Note Caller of this function must be deployer or pre-set as admin of new contract."
      },
      "setEnrichTarget(address)": {
        "notice": "Sets ETSEnrichTarget contract address so that Target metadata enrichment functions can be called from ETSTarget."
      },
      "targetExistsById(uint256)": {
        "notice": "Check that a Target record exists for a given computed targetId."
      },
      "targetExistsByURI(string)": {
        "notice": "Check that a Target record exists for a given URI string."
      },
      "updateTarget(uint256,string,uint256,uint256,string)": {
        "notice": "Update a Target record."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 912,
        "contract": "contracts/ETSTarget.sol:ETSTarget",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 915,
        "contract": "contracts/ETSTarget.sol:ETSTarget",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 894,
        "contract": "contracts/ETSTarget.sol:ETSTarget",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 1209,
        "contract": "contracts/ETSTarget.sol:ETSTarget",
        "label": "__gap",
        "offset": 0,
        "slot": "51",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 12771,
        "contract": "contracts/ETSTarget.sol:ETSTarget",
        "label": "etsAccessControls",
        "offset": 0,
        "slot": "101",
        "type": "t_contract(IETSAccessControls)14815"
      },
      {
        "astId": 12774,
        "contract": "contracts/ETSTarget.sol:ETSTarget",
        "label": "etsEnrichTarget",
        "offset": 0,
        "slot": "102",
        "type": "t_contract(IETSEnrichTarget)15027"
      },
      {
        "astId": 12783,
        "contract": "contracts/ETSTarget.sol:ETSTarget",
        "label": "targets",
        "offset": 0,
        "slot": "103",
        "type": "t_mapping(t_uint256,t_struct(Target)15040_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IETSAccessControls)14815": {
        "encoding": "inplace",
        "label": "contract IETSAccessControls",
        "numberOfBytes": "20"
      },
      "t_contract(IETSEnrichTarget)15027": {
        "encoding": "inplace",
        "label": "contract IETSEnrichTarget",
        "numberOfBytes": "20"
      },
      "t_mapping(t_uint256,t_struct(Target)15040_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct IETSTarget.Target)",
        "numberOfBytes": "32",
        "value": "t_struct(Target)15040_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Target)15040_storage": {
        "encoding": "inplace",
        "label": "struct IETSTarget.Target",
        "members": [
          {
            "astId": 15031,
            "contract": "contracts/ETSTarget.sol:ETSTarget",
            "label": "targetURI",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 15033,
            "contract": "contracts/ETSTarget.sol:ETSTarget",
            "label": "createdBy",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 15035,
            "contract": "contracts/ETSTarget.sol:ETSTarget",
            "label": "enriched",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 15037,
            "contract": "contracts/ETSTarget.sol:ETSTarget",
            "label": "httpStatus",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 15039,
            "contract": "contracts/ETSTarget.sol:ETSTarget",
            "label": "ipfsHash",
            "offset": 0,
            "slot": "4",
            "type": "t_string_storage"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}