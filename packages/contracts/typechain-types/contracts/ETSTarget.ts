/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace IETSTarget {
  export type TargetStruct = {
    targetURI: string;
    createdBy: AddressLike;
    enriched: BigNumberish;
    httpStatus: BigNumberish;
    ipfsHash: string;
  };

  export type TargetStructOutput = [
    targetURI: string,
    createdBy: string,
    enriched: bigint,
    httpStatus: bigint,
    ipfsHash: string
  ] & {
    targetURI: string;
    createdBy: string;
    enriched: bigint;
    httpStatus: bigint;
    ipfsHash: string;
  };
}

export interface ETSTargetInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "NAME"
      | "computeTargetId"
      | "createTarget"
      | "etsAccessControls"
      | "etsEnrichTarget"
      | "getOrCreateTargetId"
      | "getTargetById"
      | "getTargetByURI"
      | "initialize"
      | "proxiableUUID"
      | "setAccessControls"
      | "setEnrichTarget"
      | "targetExistsById"
      | "targetExistsByURI"
      | "targets"
      | "updateTarget"
      | "upgradeTo"
      | "upgradeToAndCall"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "AccessControlsSet"
      | "AdminChanged"
      | "BeaconUpgraded"
      | "EnrichTargetSet"
      | "Initialized"
      | "TargetCreated"
      | "TargetUpdated"
      | "Upgraded"
  ): EventFragment;

  encodeFunctionData(functionFragment: "NAME", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "computeTargetId",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "createTarget",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "etsAccessControls",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "etsEnrichTarget",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getOrCreateTargetId",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getTargetById",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getTargetByURI",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "proxiableUUID",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setAccessControls",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setEnrichTarget",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "targetExistsById",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "targetExistsByURI",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "targets",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateTarget",
    values: [BigNumberish, string, BigNumberish, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "upgradeTo",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "upgradeToAndCall",
    values: [AddressLike, BytesLike]
  ): string;

  decodeFunctionResult(functionFragment: "NAME", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "computeTargetId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createTarget",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "etsAccessControls",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "etsEnrichTarget",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOrCreateTargetId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTargetById",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTargetByURI",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "proxiableUUID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAccessControls",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setEnrichTarget",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "targetExistsById",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "targetExistsByURI",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "targets", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateTarget",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "upgradeTo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "upgradeToAndCall",
    data: BytesLike
  ): Result;
}

export namespace AccessControlsSetEvent {
  export type InputTuple = [etsAccessControls: AddressLike];
  export type OutputTuple = [etsAccessControls: string];
  export interface OutputObject {
    etsAccessControls: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace AdminChangedEvent {
  export type InputTuple = [previousAdmin: AddressLike, newAdmin: AddressLike];
  export type OutputTuple = [previousAdmin: string, newAdmin: string];
  export interface OutputObject {
    previousAdmin: string;
    newAdmin: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace BeaconUpgradedEvent {
  export type InputTuple = [beacon: AddressLike];
  export type OutputTuple = [beacon: string];
  export interface OutputObject {
    beacon: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace EnrichTargetSetEvent {
  export type InputTuple = [etsEnrichTarget: AddressLike];
  export type OutputTuple = [etsEnrichTarget: string];
  export interface OutputObject {
    etsEnrichTarget: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace InitializedEvent {
  export type InputTuple = [version: BigNumberish];
  export type OutputTuple = [version: bigint];
  export interface OutputObject {
    version: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TargetCreatedEvent {
  export type InputTuple = [targetId: BigNumberish];
  export type OutputTuple = [targetId: bigint];
  export interface OutputObject {
    targetId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TargetUpdatedEvent {
  export type InputTuple = [targetId: BigNumberish];
  export type OutputTuple = [targetId: bigint];
  export interface OutputObject {
    targetId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UpgradedEvent {
  export type InputTuple = [implementation: AddressLike];
  export type OutputTuple = [implementation: string];
  export interface OutputObject {
    implementation: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface ETSTarget extends BaseContract {
  connect(runner?: ContractRunner | null): ETSTarget;
  waitForDeployment(): Promise<this>;

  interface: ETSTargetInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  NAME: TypedContractMethod<[], [string], "view">;

  computeTargetId: TypedContractMethod<[_targetURI: string], [bigint], "view">;

  createTarget: TypedContractMethod<
    [_targetURI: string],
    [bigint],
    "nonpayable"
  >;

  etsAccessControls: TypedContractMethod<[], [string], "view">;

  etsEnrichTarget: TypedContractMethod<[], [string], "view">;

  getOrCreateTargetId: TypedContractMethod<
    [_targetURI: string],
    [bigint],
    "nonpayable"
  >;

  getTargetById: TypedContractMethod<
    [_targetId: BigNumberish],
    [IETSTarget.TargetStructOutput],
    "view"
  >;

  getTargetByURI: TypedContractMethod<
    [_targetURI: string],
    [IETSTarget.TargetStructOutput],
    "view"
  >;

  initialize: TypedContractMethod<
    [_etsAccessControls: AddressLike],
    [void],
    "nonpayable"
  >;

  proxiableUUID: TypedContractMethod<[], [string], "view">;

  setAccessControls: TypedContractMethod<
    [_accessControls: AddressLike],
    [void],
    "nonpayable"
  >;

  setEnrichTarget: TypedContractMethod<
    [_etsEnrichTarget: AddressLike],
    [void],
    "nonpayable"
  >;

  targetExistsById: TypedContractMethod<
    [_targetId: BigNumberish],
    [boolean],
    "view"
  >;

  targetExistsByURI: TypedContractMethod<
    [_targetURI: string],
    [boolean],
    "view"
  >;

  targets: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, string, bigint, bigint, string] & {
        targetURI: string;
        createdBy: string;
        enriched: bigint;
        httpStatus: bigint;
        ipfsHash: string;
      }
    ],
    "view"
  >;

  updateTarget: TypedContractMethod<
    [
      _targetId: BigNumberish,
      _targetURI: string,
      _enriched: BigNumberish,
      _httpStatus: BigNumberish,
      _ipfsHash: string
    ],
    [boolean],
    "nonpayable"
  >;

  upgradeTo: TypedContractMethod<
    [newImplementation: AddressLike],
    [void],
    "nonpayable"
  >;

  upgradeToAndCall: TypedContractMethod<
    [newImplementation: AddressLike, data: BytesLike],
    [void],
    "payable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "NAME"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "computeTargetId"
  ): TypedContractMethod<[_targetURI: string], [bigint], "view">;
  getFunction(
    nameOrSignature: "createTarget"
  ): TypedContractMethod<[_targetURI: string], [bigint], "nonpayable">;
  getFunction(
    nameOrSignature: "etsAccessControls"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "etsEnrichTarget"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getOrCreateTargetId"
  ): TypedContractMethod<[_targetURI: string], [bigint], "nonpayable">;
  getFunction(
    nameOrSignature: "getTargetById"
  ): TypedContractMethod<
    [_targetId: BigNumberish],
    [IETSTarget.TargetStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getTargetByURI"
  ): TypedContractMethod<
    [_targetURI: string],
    [IETSTarget.TargetStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "initialize"
  ): TypedContractMethod<
    [_etsAccessControls: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "proxiableUUID"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "setAccessControls"
  ): TypedContractMethod<[_accessControls: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setEnrichTarget"
  ): TypedContractMethod<[_etsEnrichTarget: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "targetExistsById"
  ): TypedContractMethod<[_targetId: BigNumberish], [boolean], "view">;
  getFunction(
    nameOrSignature: "targetExistsByURI"
  ): TypedContractMethod<[_targetURI: string], [boolean], "view">;
  getFunction(
    nameOrSignature: "targets"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, string, bigint, bigint, string] & {
        targetURI: string;
        createdBy: string;
        enriched: bigint;
        httpStatus: bigint;
        ipfsHash: string;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "updateTarget"
  ): TypedContractMethod<
    [
      _targetId: BigNumberish,
      _targetURI: string,
      _enriched: BigNumberish,
      _httpStatus: BigNumberish,
      _ipfsHash: string
    ],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "upgradeTo"
  ): TypedContractMethod<
    [newImplementation: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "upgradeToAndCall"
  ): TypedContractMethod<
    [newImplementation: AddressLike, data: BytesLike],
    [void],
    "payable"
  >;

  getEvent(
    key: "AccessControlsSet"
  ): TypedContractEvent<
    AccessControlsSetEvent.InputTuple,
    AccessControlsSetEvent.OutputTuple,
    AccessControlsSetEvent.OutputObject
  >;
  getEvent(
    key: "AdminChanged"
  ): TypedContractEvent<
    AdminChangedEvent.InputTuple,
    AdminChangedEvent.OutputTuple,
    AdminChangedEvent.OutputObject
  >;
  getEvent(
    key: "BeaconUpgraded"
  ): TypedContractEvent<
    BeaconUpgradedEvent.InputTuple,
    BeaconUpgradedEvent.OutputTuple,
    BeaconUpgradedEvent.OutputObject
  >;
  getEvent(
    key: "EnrichTargetSet"
  ): TypedContractEvent<
    EnrichTargetSetEvent.InputTuple,
    EnrichTargetSetEvent.OutputTuple,
    EnrichTargetSetEvent.OutputObject
  >;
  getEvent(
    key: "Initialized"
  ): TypedContractEvent<
    InitializedEvent.InputTuple,
    InitializedEvent.OutputTuple,
    InitializedEvent.OutputObject
  >;
  getEvent(
    key: "TargetCreated"
  ): TypedContractEvent<
    TargetCreatedEvent.InputTuple,
    TargetCreatedEvent.OutputTuple,
    TargetCreatedEvent.OutputObject
  >;
  getEvent(
    key: "TargetUpdated"
  ): TypedContractEvent<
    TargetUpdatedEvent.InputTuple,
    TargetUpdatedEvent.OutputTuple,
    TargetUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "Upgraded"
  ): TypedContractEvent<
    UpgradedEvent.InputTuple,
    UpgradedEvent.OutputTuple,
    UpgradedEvent.OutputObject
  >;

  filters: {
    "AccessControlsSet(address)": TypedContractEvent<
      AccessControlsSetEvent.InputTuple,
      AccessControlsSetEvent.OutputTuple,
      AccessControlsSetEvent.OutputObject
    >;
    AccessControlsSet: TypedContractEvent<
      AccessControlsSetEvent.InputTuple,
      AccessControlsSetEvent.OutputTuple,
      AccessControlsSetEvent.OutputObject
    >;

    "AdminChanged(address,address)": TypedContractEvent<
      AdminChangedEvent.InputTuple,
      AdminChangedEvent.OutputTuple,
      AdminChangedEvent.OutputObject
    >;
    AdminChanged: TypedContractEvent<
      AdminChangedEvent.InputTuple,
      AdminChangedEvent.OutputTuple,
      AdminChangedEvent.OutputObject
    >;

    "BeaconUpgraded(address)": TypedContractEvent<
      BeaconUpgradedEvent.InputTuple,
      BeaconUpgradedEvent.OutputTuple,
      BeaconUpgradedEvent.OutputObject
    >;
    BeaconUpgraded: TypedContractEvent<
      BeaconUpgradedEvent.InputTuple,
      BeaconUpgradedEvent.OutputTuple,
      BeaconUpgradedEvent.OutputObject
    >;

    "EnrichTargetSet(address)": TypedContractEvent<
      EnrichTargetSetEvent.InputTuple,
      EnrichTargetSetEvent.OutputTuple,
      EnrichTargetSetEvent.OutputObject
    >;
    EnrichTargetSet: TypedContractEvent<
      EnrichTargetSetEvent.InputTuple,
      EnrichTargetSetEvent.OutputTuple,
      EnrichTargetSetEvent.OutputObject
    >;

    "Initialized(uint8)": TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;
    Initialized: TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;

    "TargetCreated(uint256)": TypedContractEvent<
      TargetCreatedEvent.InputTuple,
      TargetCreatedEvent.OutputTuple,
      TargetCreatedEvent.OutputObject
    >;
    TargetCreated: TypedContractEvent<
      TargetCreatedEvent.InputTuple,
      TargetCreatedEvent.OutputTuple,
      TargetCreatedEvent.OutputObject
    >;

    "TargetUpdated(uint256)": TypedContractEvent<
      TargetUpdatedEvent.InputTuple,
      TargetUpdatedEvent.OutputTuple,
      TargetUpdatedEvent.OutputObject
    >;
    TargetUpdated: TypedContractEvent<
      TargetUpdatedEvent.InputTuple,
      TargetUpdatedEvent.OutputTuple,
      TargetUpdatedEvent.OutputObject
    >;

    "Upgraded(address)": TypedContractEvent<
      UpgradedEvent.InputTuple,
      UpgradedEvent.OutputTuple,
      UpgradedEvent.OutputObject
    >;
    Upgraded: TypedContractEvent<
      UpgradedEvent.InputTuple,
      UpgradedEvent.OutputTuple,
      UpgradedEvent.OutputObject
    >;
  };
}
