/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../common";

export declare namespace IETS {
  export type TaggingRecordRawInputStruct = {
    targetURI: PromiseOrValue<string>;
    tagStrings: PromiseOrValue<string>[];
    recordType: PromiseOrValue<string>;
  };

  export type TaggingRecordRawInputStructOutput = [string, string[], string] & {
    targetURI: string;
    tagStrings: string[];
    recordType: string;
  };
}

export interface ETSUpgradeInterface extends utils.Interface {
  functions: {
    "MODULO()": FunctionFragment;
    "NAME()": FunctionFragment;
    "accrued(address)": FunctionFragment;
    "appendTags(uint256,uint256[])": FunctionFragment;
    "applyTagsWithCompositeKey(uint256[],uint256,string,address)": FunctionFragment;
    "applyTagsWithRawInput((string,string[],string),address)": FunctionFragment;
    "computeTaggingFee(uint256,uint256[],uint8)": FunctionFragment;
    "computeTaggingFeeFromCompositeKey(uint256[],uint256,string,address,address,uint8)": FunctionFragment;
    "computeTaggingFeeFromRawInput((string,string[],string),address,address,uint8)": FunctionFragment;
    "computeTaggingRecordIdFromCompositeKey(uint256,string,address,address)": FunctionFragment;
    "computeTaggingRecordIdFromRawInput((string,string[],string),address,address)": FunctionFragment;
    "createTag(string,address)": FunctionFragment;
    "createTaggingRecord(uint256[],uint256,string,address)": FunctionFragment;
    "drawDown(address)": FunctionFragment;
    "etsAccessControls()": FunctionFragment;
    "etsTarget()": FunctionFragment;
    "etsToken()": FunctionFragment;
    "getOrCreateTagId(string,address)": FunctionFragment;
    "getTaggingRecordFromCompositeKey(uint256,string,address,address)": FunctionFragment;
    "getTaggingRecordFromId(uint256)": FunctionFragment;
    "getTaggingRecordFromRawInput((string,string[],string),address,address)": FunctionFragment;
    "initialize(address,address,address,uint256,uint256,uint256)": FunctionFragment;
    "paid(address)": FunctionFragment;
    "platformPercentage()": FunctionFragment;
    "proxiableUUID()": FunctionFragment;
    "relayerPercentage()": FunctionFragment;
    "removeTags(uint256,uint256[])": FunctionFragment;
    "removeTagsWithCompositeKey(uint256[],uint256,string,address)": FunctionFragment;
    "removeTagsWithRawInput((string,string[],string),address)": FunctionFragment;
    "replaceTags(uint256,uint256[])": FunctionFragment;
    "replaceTagsWithCompositeKey(uint256[],uint256,string,address)": FunctionFragment;
    "replaceTagsWithRawInput((string,string[],string),address)": FunctionFragment;
    "setAccessControls(address)": FunctionFragment;
    "setPercentages(uint256,uint256)": FunctionFragment;
    "setTaggingFee(uint256)": FunctionFragment;
    "taggingFee()": FunctionFragment;
    "taggingRecordExists(uint256)": FunctionFragment;
    "taggingRecordExistsByCompositeKey(uint256,string,address,address)": FunctionFragment;
    "taggingRecordExistsByRawInput((string,string[],string),address,address)": FunctionFragment;
    "taggingRecords(uint256)": FunctionFragment;
    "totalDue(address)": FunctionFragment;
    "upgradeTest()": FunctionFragment;
    "upgradeTo(address)": FunctionFragment;
    "upgradeToAndCall(address,bytes)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "MODULO"
      | "NAME"
      | "accrued"
      | "appendTags"
      | "applyTagsWithCompositeKey"
      | "applyTagsWithRawInput"
      | "computeTaggingFee"
      | "computeTaggingFeeFromCompositeKey"
      | "computeTaggingFeeFromRawInput"
      | "computeTaggingRecordIdFromCompositeKey"
      | "computeTaggingRecordIdFromRawInput"
      | "createTag"
      | "createTaggingRecord"
      | "drawDown"
      | "etsAccessControls"
      | "etsTarget"
      | "etsToken"
      | "getOrCreateTagId"
      | "getTaggingRecordFromCompositeKey"
      | "getTaggingRecordFromId"
      | "getTaggingRecordFromRawInput"
      | "initialize"
      | "paid"
      | "platformPercentage"
      | "proxiableUUID"
      | "relayerPercentage"
      | "removeTags"
      | "removeTagsWithCompositeKey"
      | "removeTagsWithRawInput"
      | "replaceTags"
      | "replaceTagsWithCompositeKey"
      | "replaceTagsWithRawInput"
      | "setAccessControls"
      | "setPercentages"
      | "setTaggingFee"
      | "taggingFee"
      | "taggingRecordExists"
      | "taggingRecordExistsByCompositeKey"
      | "taggingRecordExistsByRawInput"
      | "taggingRecords"
      | "totalDue"
      | "upgradeTest"
      | "upgradeTo"
      | "upgradeToAndCall"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "MODULO", values?: undefined): string;
  encodeFunctionData(functionFragment: "NAME", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "accrued",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "appendTags",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "applyTagsWithCompositeKey",
    values: [
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "applyTagsWithRawInput",
    values: [IETS.TaggingRecordRawInputStruct, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "computeTaggingFee",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "computeTaggingFeeFromCompositeKey",
    values: [
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "computeTaggingFeeFromRawInput",
    values: [
      IETS.TaggingRecordRawInputStruct,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "computeTaggingRecordIdFromCompositeKey",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "computeTaggingRecordIdFromRawInput",
    values: [
      IETS.TaggingRecordRawInputStruct,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "createTag",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "createTaggingRecord",
    values: [
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "drawDown",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "etsAccessControls",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "etsTarget", values?: undefined): string;
  encodeFunctionData(functionFragment: "etsToken", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getOrCreateTagId",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getTaggingRecordFromCompositeKey",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getTaggingRecordFromId",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getTaggingRecordFromRawInput",
    values: [
      IETS.TaggingRecordRawInputStruct,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "paid",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "platformPercentage",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "proxiableUUID",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "relayerPercentage",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "removeTags",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "removeTagsWithCompositeKey",
    values: [
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "removeTagsWithRawInput",
    values: [IETS.TaggingRecordRawInputStruct, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "replaceTags",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "replaceTagsWithCompositeKey",
    values: [
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "replaceTagsWithRawInput",
    values: [IETS.TaggingRecordRawInputStruct, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setAccessControls",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setPercentages",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setTaggingFee",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "taggingFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "taggingRecordExists",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "taggingRecordExistsByCompositeKey",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "taggingRecordExistsByRawInput",
    values: [
      IETS.TaggingRecordRawInputStruct,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "taggingRecords",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "totalDue",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "upgradeTest",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "upgradeTo",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "upgradeToAndCall",
    values: [PromiseOrValue<string>, PromiseOrValue<BytesLike>]
  ): string;

  decodeFunctionResult(functionFragment: "MODULO", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "NAME", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "accrued", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "appendTags", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "applyTagsWithCompositeKey",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "applyTagsWithRawInput",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "computeTaggingFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "computeTaggingFeeFromCompositeKey",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "computeTaggingFeeFromRawInput",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "computeTaggingRecordIdFromCompositeKey",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "computeTaggingRecordIdFromRawInput",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "createTag", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "createTaggingRecord",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "drawDown", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "etsAccessControls",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "etsTarget", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "etsToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getOrCreateTagId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTaggingRecordFromCompositeKey",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTaggingRecordFromId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTaggingRecordFromRawInput",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paid", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "platformPercentage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proxiableUUID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "relayerPercentage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "removeTags", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeTagsWithCompositeKey",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeTagsWithRawInput",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "replaceTags",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "replaceTagsWithCompositeKey",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "replaceTagsWithRawInput",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAccessControls",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPercentages",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTaggingFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "taggingFee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "taggingRecordExists",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "taggingRecordExistsByCompositeKey",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "taggingRecordExistsByRawInput",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "taggingRecords",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "totalDue", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "upgradeTest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "upgradeTo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "upgradeToAndCall",
    data: BytesLike
  ): Result;

  events: {
    "AccessControlsSet(address)": EventFragment;
    "AdminChanged(address,address)": EventFragment;
    "BeaconUpgraded(address)": EventFragment;
    "FundsWithdrawn(address,uint256)": EventFragment;
    "Initialized(uint8)": EventFragment;
    "PercentagesSet(uint256,uint256)": EventFragment;
    "TaggingFeeSet(uint256)": EventFragment;
    "TaggingRecordCreated(uint256)": EventFragment;
    "TaggingRecordUpdated(uint256,uint8)": EventFragment;
    "Upgraded(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AccessControlsSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BeaconUpgraded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FundsWithdrawn"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PercentagesSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TaggingFeeSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TaggingRecordCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TaggingRecordUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Upgraded"): EventFragment;
}

export interface AccessControlsSetEventObject {
  newAccessControls: string;
}
export type AccessControlsSetEvent = TypedEvent<
  [string],
  AccessControlsSetEventObject
>;

export type AccessControlsSetEventFilter =
  TypedEventFilter<AccessControlsSetEvent>;

export interface AdminChangedEventObject {
  previousAdmin: string;
  newAdmin: string;
}
export type AdminChangedEvent = TypedEvent<
  [string, string],
  AdminChangedEventObject
>;

export type AdminChangedEventFilter = TypedEventFilter<AdminChangedEvent>;

export interface BeaconUpgradedEventObject {
  beacon: string;
}
export type BeaconUpgradedEvent = TypedEvent<
  [string],
  BeaconUpgradedEventObject
>;

export type BeaconUpgradedEventFilter = TypedEventFilter<BeaconUpgradedEvent>;

export interface FundsWithdrawnEventObject {
  who: string;
  amount: BigNumber;
}
export type FundsWithdrawnEvent = TypedEvent<
  [string, BigNumber],
  FundsWithdrawnEventObject
>;

export type FundsWithdrawnEventFilter = TypedEventFilter<FundsWithdrawnEvent>;

export interface InitializedEventObject {
  version: number;
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface PercentagesSetEventObject {
  platformPercentage: BigNumber;
  relayerPercentage: BigNumber;
}
export type PercentagesSetEvent = TypedEvent<
  [BigNumber, BigNumber],
  PercentagesSetEventObject
>;

export type PercentagesSetEventFilter = TypedEventFilter<PercentagesSetEvent>;

export interface TaggingFeeSetEventObject {
  newTaggingFee: BigNumber;
}
export type TaggingFeeSetEvent = TypedEvent<
  [BigNumber],
  TaggingFeeSetEventObject
>;

export type TaggingFeeSetEventFilter = TypedEventFilter<TaggingFeeSetEvent>;

export interface TaggingRecordCreatedEventObject {
  taggingRecordId: BigNumber;
}
export type TaggingRecordCreatedEvent = TypedEvent<
  [BigNumber],
  TaggingRecordCreatedEventObject
>;

export type TaggingRecordCreatedEventFilter =
  TypedEventFilter<TaggingRecordCreatedEvent>;

export interface TaggingRecordUpdatedEventObject {
  taggingRecordId: BigNumber;
  action: number;
}
export type TaggingRecordUpdatedEvent = TypedEvent<
  [BigNumber, number],
  TaggingRecordUpdatedEventObject
>;

export type TaggingRecordUpdatedEventFilter =
  TypedEventFilter<TaggingRecordUpdatedEvent>;

export interface UpgradedEventObject {
  implementation: string;
}
export type UpgradedEvent = TypedEvent<[string], UpgradedEventObject>;

export type UpgradedEventFilter = TypedEventFilter<UpgradedEvent>;

export interface ETSUpgrade extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ETSUpgradeInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    MODULO(overrides?: CallOverrides): Promise<[BigNumber]>;

    NAME(overrides?: CallOverrides): Promise<[string]>;

    accrued(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    appendTags(
      _taggingRecordId: PromiseOrValue<BigNumberish>,
      _tagIds: PromiseOrValue<BigNumberish>[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    applyTagsWithCompositeKey(
      _tagIds: PromiseOrValue<BigNumberish>[],
      _targetId: PromiseOrValue<BigNumberish>,
      _recordType: PromiseOrValue<string>,
      _tagger: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    applyTagsWithRawInput(
      _rawInput: IETS.TaggingRecordRawInputStruct,
      _tagger: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    computeTaggingFee(
      _taggingRecordId: PromiseOrValue<BigNumberish>,
      _tagIds: PromiseOrValue<BigNumberish>[],
      _action: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { fee: BigNumber; tagCount: BigNumber }
    >;

    computeTaggingFeeFromCompositeKey(
      _tagIds: PromiseOrValue<BigNumberish>[],
      _targetId: PromiseOrValue<BigNumberish>,
      _recordType: PromiseOrValue<string>,
      _relayer: PromiseOrValue<string>,
      _tagger: PromiseOrValue<string>,
      _action: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { fee: BigNumber; tagCount: BigNumber }
    >;

    computeTaggingFeeFromRawInput(
      _rawInput: IETS.TaggingRecordRawInputStruct,
      _relayer: PromiseOrValue<string>,
      _tagger: PromiseOrValue<string>,
      _action: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { fee: BigNumber; tagCount: BigNumber }
    >;

    computeTaggingRecordIdFromCompositeKey(
      _targetId: PromiseOrValue<BigNumberish>,
      _recordType: PromiseOrValue<string>,
      _relayer: PromiseOrValue<string>,
      _tagger: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { taggingRecordId: BigNumber }>;

    computeTaggingRecordIdFromRawInput(
      _rawInput: IETS.TaggingRecordRawInputStruct,
      _relayer: PromiseOrValue<string>,
      _tagger: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { taggingRecordId: BigNumber }>;

    createTag(
      _tag: PromiseOrValue<string>,
      _creator: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    createTaggingRecord(
      _tagIds: PromiseOrValue<BigNumberish>[],
      _targetId: PromiseOrValue<BigNumberish>,
      _recordType: PromiseOrValue<string>,
      _tagger: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    drawDown(
      _account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    etsAccessControls(overrides?: CallOverrides): Promise<[string]>;

    etsTarget(overrides?: CallOverrides): Promise<[string]>;

    etsToken(overrides?: CallOverrides): Promise<[string]>;

    getOrCreateTagId(
      _tag: PromiseOrValue<string>,
      _creator: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getTaggingRecordFromCompositeKey(
      _targetId: PromiseOrValue<BigNumberish>,
      _recordType: PromiseOrValue<string>,
      _relayer: PromiseOrValue<string>,
      _tagger: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber[], BigNumber, string, string, string] & {
        tagIds: BigNumber[];
        targetId: BigNumber;
        recordType: string;
        relayer: string;
        tagger: string;
      }
    >;

    getTaggingRecordFromId(
      _id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber[], BigNumber, string, string, string] & {
        tagIds: BigNumber[];
        targetId: BigNumber;
        recordType: string;
        relayer: string;
        tagger: string;
      }
    >;

    getTaggingRecordFromRawInput(
      _rawInput: IETS.TaggingRecordRawInputStruct,
      _relayer: PromiseOrValue<string>,
      _tagger: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber[], BigNumber, string, string, string] & {
        tagIds: BigNumber[];
        targetId: BigNumber;
        recordType: string;
        relayer: string;
        tagger: string;
      }
    >;

    initialize(
      _etsAccessControls: PromiseOrValue<string>,
      _etsToken: PromiseOrValue<string>,
      _etsTarget: PromiseOrValue<string>,
      _taggingFee: PromiseOrValue<BigNumberish>,
      _platformPercentage: PromiseOrValue<BigNumberish>,
      _relayerPercentage: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    paid(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    platformPercentage(overrides?: CallOverrides): Promise<[BigNumber]>;

    proxiableUUID(overrides?: CallOverrides): Promise<[string]>;

    relayerPercentage(overrides?: CallOverrides): Promise<[BigNumber]>;

    removeTags(
      _taggingRecordId: PromiseOrValue<BigNumberish>,
      _tagIds: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    removeTagsWithCompositeKey(
      _tagIds: PromiseOrValue<BigNumberish>[],
      _targetId: PromiseOrValue<BigNumberish>,
      _recordType: PromiseOrValue<string>,
      _tagger: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    removeTagsWithRawInput(
      _rawInput: IETS.TaggingRecordRawInputStruct,
      _tagger: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    replaceTags(
      _taggingRecordId: PromiseOrValue<BigNumberish>,
      _tagIds: PromiseOrValue<BigNumberish>[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    replaceTagsWithCompositeKey(
      _tagIds: PromiseOrValue<BigNumberish>[],
      _targetId: PromiseOrValue<BigNumberish>,
      _recordType: PromiseOrValue<string>,
      _tagger: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    replaceTagsWithRawInput(
      _rawInput: IETS.TaggingRecordRawInputStruct,
      _tagger: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setAccessControls(
      _accessControls: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setPercentages(
      _platformPercentage: PromiseOrValue<BigNumberish>,
      _relayerPercentage: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setTaggingFee(
      _fee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    taggingFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    taggingRecordExists(
      _taggingRecordId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    taggingRecordExistsByCompositeKey(
      _targetId: PromiseOrValue<BigNumberish>,
      _recordType: PromiseOrValue<string>,
      _relayer: PromiseOrValue<string>,
      _tagger: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    taggingRecordExistsByRawInput(
      _rawInput: IETS.TaggingRecordRawInputStruct,
      _relayer: PromiseOrValue<string>,
      _tagger: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    taggingRecords(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string, string, string] & {
        targetId: BigNumber;
        recordType: string;
        relayer: string;
        tagger: string;
      }
    >;

    totalDue(
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { _due: BigNumber }>;

    upgradeTest(overrides?: CallOverrides): Promise<[boolean]>;

    upgradeTo(
      newImplementation: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    upgradeToAndCall(
      newImplementation: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  MODULO(overrides?: CallOverrides): Promise<BigNumber>;

  NAME(overrides?: CallOverrides): Promise<string>;

  accrued(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  appendTags(
    _taggingRecordId: PromiseOrValue<BigNumberish>,
    _tagIds: PromiseOrValue<BigNumberish>[],
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  applyTagsWithCompositeKey(
    _tagIds: PromiseOrValue<BigNumberish>[],
    _targetId: PromiseOrValue<BigNumberish>,
    _recordType: PromiseOrValue<string>,
    _tagger: PromiseOrValue<string>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  applyTagsWithRawInput(
    _rawInput: IETS.TaggingRecordRawInputStruct,
    _tagger: PromiseOrValue<string>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  computeTaggingFee(
    _taggingRecordId: PromiseOrValue<BigNumberish>,
    _tagIds: PromiseOrValue<BigNumberish>[],
    _action: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber] & { fee: BigNumber; tagCount: BigNumber }>;

  computeTaggingFeeFromCompositeKey(
    _tagIds: PromiseOrValue<BigNumberish>[],
    _targetId: PromiseOrValue<BigNumberish>,
    _recordType: PromiseOrValue<string>,
    _relayer: PromiseOrValue<string>,
    _tagger: PromiseOrValue<string>,
    _action: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber] & { fee: BigNumber; tagCount: BigNumber }>;

  computeTaggingFeeFromRawInput(
    _rawInput: IETS.TaggingRecordRawInputStruct,
    _relayer: PromiseOrValue<string>,
    _tagger: PromiseOrValue<string>,
    _action: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber] & { fee: BigNumber; tagCount: BigNumber }>;

  computeTaggingRecordIdFromCompositeKey(
    _targetId: PromiseOrValue<BigNumberish>,
    _recordType: PromiseOrValue<string>,
    _relayer: PromiseOrValue<string>,
    _tagger: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  computeTaggingRecordIdFromRawInput(
    _rawInput: IETS.TaggingRecordRawInputStruct,
    _relayer: PromiseOrValue<string>,
    _tagger: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  createTag(
    _tag: PromiseOrValue<string>,
    _creator: PromiseOrValue<string>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  createTaggingRecord(
    _tagIds: PromiseOrValue<BigNumberish>[],
    _targetId: PromiseOrValue<BigNumberish>,
    _recordType: PromiseOrValue<string>,
    _tagger: PromiseOrValue<string>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  drawDown(
    _account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  etsAccessControls(overrides?: CallOverrides): Promise<string>;

  etsTarget(overrides?: CallOverrides): Promise<string>;

  etsToken(overrides?: CallOverrides): Promise<string>;

  getOrCreateTagId(
    _tag: PromiseOrValue<string>,
    _creator: PromiseOrValue<string>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getTaggingRecordFromCompositeKey(
    _targetId: PromiseOrValue<BigNumberish>,
    _recordType: PromiseOrValue<string>,
    _relayer: PromiseOrValue<string>,
    _tagger: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber[], BigNumber, string, string, string] & {
      tagIds: BigNumber[];
      targetId: BigNumber;
      recordType: string;
      relayer: string;
      tagger: string;
    }
  >;

  getTaggingRecordFromId(
    _id: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber[], BigNumber, string, string, string] & {
      tagIds: BigNumber[];
      targetId: BigNumber;
      recordType: string;
      relayer: string;
      tagger: string;
    }
  >;

  getTaggingRecordFromRawInput(
    _rawInput: IETS.TaggingRecordRawInputStruct,
    _relayer: PromiseOrValue<string>,
    _tagger: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber[], BigNumber, string, string, string] & {
      tagIds: BigNumber[];
      targetId: BigNumber;
      recordType: string;
      relayer: string;
      tagger: string;
    }
  >;

  initialize(
    _etsAccessControls: PromiseOrValue<string>,
    _etsToken: PromiseOrValue<string>,
    _etsTarget: PromiseOrValue<string>,
    _taggingFee: PromiseOrValue<BigNumberish>,
    _platformPercentage: PromiseOrValue<BigNumberish>,
    _relayerPercentage: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  paid(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  platformPercentage(overrides?: CallOverrides): Promise<BigNumber>;

  proxiableUUID(overrides?: CallOverrides): Promise<string>;

  relayerPercentage(overrides?: CallOverrides): Promise<BigNumber>;

  removeTags(
    _taggingRecordId: PromiseOrValue<BigNumberish>,
    _tagIds: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  removeTagsWithCompositeKey(
    _tagIds: PromiseOrValue<BigNumberish>[],
    _targetId: PromiseOrValue<BigNumberish>,
    _recordType: PromiseOrValue<string>,
    _tagger: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  removeTagsWithRawInput(
    _rawInput: IETS.TaggingRecordRawInputStruct,
    _tagger: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  replaceTags(
    _taggingRecordId: PromiseOrValue<BigNumberish>,
    _tagIds: PromiseOrValue<BigNumberish>[],
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  replaceTagsWithCompositeKey(
    _tagIds: PromiseOrValue<BigNumberish>[],
    _targetId: PromiseOrValue<BigNumberish>,
    _recordType: PromiseOrValue<string>,
    _tagger: PromiseOrValue<string>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  replaceTagsWithRawInput(
    _rawInput: IETS.TaggingRecordRawInputStruct,
    _tagger: PromiseOrValue<string>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setAccessControls(
    _accessControls: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setPercentages(
    _platformPercentage: PromiseOrValue<BigNumberish>,
    _relayerPercentage: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setTaggingFee(
    _fee: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  taggingFee(overrides?: CallOverrides): Promise<BigNumber>;

  taggingRecordExists(
    _taggingRecordId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  taggingRecordExistsByCompositeKey(
    _targetId: PromiseOrValue<BigNumberish>,
    _recordType: PromiseOrValue<string>,
    _relayer: PromiseOrValue<string>,
    _tagger: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  taggingRecordExistsByRawInput(
    _rawInput: IETS.TaggingRecordRawInputStruct,
    _relayer: PromiseOrValue<string>,
    _tagger: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  taggingRecords(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, string, string, string] & {
      targetId: BigNumber;
      recordType: string;
      relayer: string;
      tagger: string;
    }
  >;

  totalDue(
    _account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  upgradeTest(overrides?: CallOverrides): Promise<boolean>;

  upgradeTo(
    newImplementation: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  upgradeToAndCall(
    newImplementation: PromiseOrValue<string>,
    data: PromiseOrValue<BytesLike>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    MODULO(overrides?: CallOverrides): Promise<BigNumber>;

    NAME(overrides?: CallOverrides): Promise<string>;

    accrued(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    appendTags(
      _taggingRecordId: PromiseOrValue<BigNumberish>,
      _tagIds: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>;

    applyTagsWithCompositeKey(
      _tagIds: PromiseOrValue<BigNumberish>[],
      _targetId: PromiseOrValue<BigNumberish>,
      _recordType: PromiseOrValue<string>,
      _tagger: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    applyTagsWithRawInput(
      _rawInput: IETS.TaggingRecordRawInputStruct,
      _tagger: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    computeTaggingFee(
      _taggingRecordId: PromiseOrValue<BigNumberish>,
      _tagIds: PromiseOrValue<BigNumberish>[],
      _action: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { fee: BigNumber; tagCount: BigNumber }
    >;

    computeTaggingFeeFromCompositeKey(
      _tagIds: PromiseOrValue<BigNumberish>[],
      _targetId: PromiseOrValue<BigNumberish>,
      _recordType: PromiseOrValue<string>,
      _relayer: PromiseOrValue<string>,
      _tagger: PromiseOrValue<string>,
      _action: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { fee: BigNumber; tagCount: BigNumber }
    >;

    computeTaggingFeeFromRawInput(
      _rawInput: IETS.TaggingRecordRawInputStruct,
      _relayer: PromiseOrValue<string>,
      _tagger: PromiseOrValue<string>,
      _action: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { fee: BigNumber; tagCount: BigNumber }
    >;

    computeTaggingRecordIdFromCompositeKey(
      _targetId: PromiseOrValue<BigNumberish>,
      _recordType: PromiseOrValue<string>,
      _relayer: PromiseOrValue<string>,
      _tagger: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    computeTaggingRecordIdFromRawInput(
      _rawInput: IETS.TaggingRecordRawInputStruct,
      _relayer: PromiseOrValue<string>,
      _tagger: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    createTag(
      _tag: PromiseOrValue<string>,
      _creator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    createTaggingRecord(
      _tagIds: PromiseOrValue<BigNumberish>[],
      _targetId: PromiseOrValue<BigNumberish>,
      _recordType: PromiseOrValue<string>,
      _tagger: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    drawDown(
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    etsAccessControls(overrides?: CallOverrides): Promise<string>;

    etsTarget(overrides?: CallOverrides): Promise<string>;

    etsToken(overrides?: CallOverrides): Promise<string>;

    getOrCreateTagId(
      _tag: PromiseOrValue<string>,
      _creator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTaggingRecordFromCompositeKey(
      _targetId: PromiseOrValue<BigNumberish>,
      _recordType: PromiseOrValue<string>,
      _relayer: PromiseOrValue<string>,
      _tagger: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber[], BigNumber, string, string, string] & {
        tagIds: BigNumber[];
        targetId: BigNumber;
        recordType: string;
        relayer: string;
        tagger: string;
      }
    >;

    getTaggingRecordFromId(
      _id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber[], BigNumber, string, string, string] & {
        tagIds: BigNumber[];
        targetId: BigNumber;
        recordType: string;
        relayer: string;
        tagger: string;
      }
    >;

    getTaggingRecordFromRawInput(
      _rawInput: IETS.TaggingRecordRawInputStruct,
      _relayer: PromiseOrValue<string>,
      _tagger: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber[], BigNumber, string, string, string] & {
        tagIds: BigNumber[];
        targetId: BigNumber;
        recordType: string;
        relayer: string;
        tagger: string;
      }
    >;

    initialize(
      _etsAccessControls: PromiseOrValue<string>,
      _etsToken: PromiseOrValue<string>,
      _etsTarget: PromiseOrValue<string>,
      _taggingFee: PromiseOrValue<BigNumberish>,
      _platformPercentage: PromiseOrValue<BigNumberish>,
      _relayerPercentage: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    paid(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    platformPercentage(overrides?: CallOverrides): Promise<BigNumber>;

    proxiableUUID(overrides?: CallOverrides): Promise<string>;

    relayerPercentage(overrides?: CallOverrides): Promise<BigNumber>;

    removeTags(
      _taggingRecordId: PromiseOrValue<BigNumberish>,
      _tagIds: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>;

    removeTagsWithCompositeKey(
      _tagIds: PromiseOrValue<BigNumberish>[],
      _targetId: PromiseOrValue<BigNumberish>,
      _recordType: PromiseOrValue<string>,
      _tagger: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    removeTagsWithRawInput(
      _rawInput: IETS.TaggingRecordRawInputStruct,
      _tagger: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    replaceTags(
      _taggingRecordId: PromiseOrValue<BigNumberish>,
      _tagIds: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>;

    replaceTagsWithCompositeKey(
      _tagIds: PromiseOrValue<BigNumberish>[],
      _targetId: PromiseOrValue<BigNumberish>,
      _recordType: PromiseOrValue<string>,
      _tagger: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    replaceTagsWithRawInput(
      _rawInput: IETS.TaggingRecordRawInputStruct,
      _tagger: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setAccessControls(
      _accessControls: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setPercentages(
      _platformPercentage: PromiseOrValue<BigNumberish>,
      _relayerPercentage: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setTaggingFee(
      _fee: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    taggingFee(overrides?: CallOverrides): Promise<BigNumber>;

    taggingRecordExists(
      _taggingRecordId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    taggingRecordExistsByCompositeKey(
      _targetId: PromiseOrValue<BigNumberish>,
      _recordType: PromiseOrValue<string>,
      _relayer: PromiseOrValue<string>,
      _tagger: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    taggingRecordExistsByRawInput(
      _rawInput: IETS.TaggingRecordRawInputStruct,
      _relayer: PromiseOrValue<string>,
      _tagger: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    taggingRecords(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string, string, string] & {
        targetId: BigNumber;
        recordType: string;
        relayer: string;
        tagger: string;
      }
    >;

    totalDue(
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    upgradeTest(overrides?: CallOverrides): Promise<boolean>;

    upgradeTo(
      newImplementation: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    upgradeToAndCall(
      newImplementation: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "AccessControlsSet(address)"(
      newAccessControls?: null
    ): AccessControlsSetEventFilter;
    AccessControlsSet(newAccessControls?: null): AccessControlsSetEventFilter;

    "AdminChanged(address,address)"(
      previousAdmin?: null,
      newAdmin?: null
    ): AdminChangedEventFilter;
    AdminChanged(
      previousAdmin?: null,
      newAdmin?: null
    ): AdminChangedEventFilter;

    "BeaconUpgraded(address)"(
      beacon?: PromiseOrValue<string> | null
    ): BeaconUpgradedEventFilter;
    BeaconUpgraded(
      beacon?: PromiseOrValue<string> | null
    ): BeaconUpgradedEventFilter;

    "FundsWithdrawn(address,uint256)"(
      who?: PromiseOrValue<string> | null,
      amount?: null
    ): FundsWithdrawnEventFilter;
    FundsWithdrawn(
      who?: PromiseOrValue<string> | null,
      amount?: null
    ): FundsWithdrawnEventFilter;

    "Initialized(uint8)"(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    "PercentagesSet(uint256,uint256)"(
      platformPercentage?: null,
      relayerPercentage?: null
    ): PercentagesSetEventFilter;
    PercentagesSet(
      platformPercentage?: null,
      relayerPercentage?: null
    ): PercentagesSetEventFilter;

    "TaggingFeeSet(uint256)"(newTaggingFee?: null): TaggingFeeSetEventFilter;
    TaggingFeeSet(newTaggingFee?: null): TaggingFeeSetEventFilter;

    "TaggingRecordCreated(uint256)"(
      taggingRecordId?: null
    ): TaggingRecordCreatedEventFilter;
    TaggingRecordCreated(
      taggingRecordId?: null
    ): TaggingRecordCreatedEventFilter;

    "TaggingRecordUpdated(uint256,uint8)"(
      taggingRecordId?: null,
      action?: null
    ): TaggingRecordUpdatedEventFilter;
    TaggingRecordUpdated(
      taggingRecordId?: null,
      action?: null
    ): TaggingRecordUpdatedEventFilter;

    "Upgraded(address)"(
      implementation?: PromiseOrValue<string> | null
    ): UpgradedEventFilter;
    Upgraded(
      implementation?: PromiseOrValue<string> | null
    ): UpgradedEventFilter;
  };

  estimateGas: {
    MODULO(overrides?: CallOverrides): Promise<BigNumber>;

    NAME(overrides?: CallOverrides): Promise<BigNumber>;

    accrued(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    appendTags(
      _taggingRecordId: PromiseOrValue<BigNumberish>,
      _tagIds: PromiseOrValue<BigNumberish>[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    applyTagsWithCompositeKey(
      _tagIds: PromiseOrValue<BigNumberish>[],
      _targetId: PromiseOrValue<BigNumberish>,
      _recordType: PromiseOrValue<string>,
      _tagger: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    applyTagsWithRawInput(
      _rawInput: IETS.TaggingRecordRawInputStruct,
      _tagger: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    computeTaggingFee(
      _taggingRecordId: PromiseOrValue<BigNumberish>,
      _tagIds: PromiseOrValue<BigNumberish>[],
      _action: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    computeTaggingFeeFromCompositeKey(
      _tagIds: PromiseOrValue<BigNumberish>[],
      _targetId: PromiseOrValue<BigNumberish>,
      _recordType: PromiseOrValue<string>,
      _relayer: PromiseOrValue<string>,
      _tagger: PromiseOrValue<string>,
      _action: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    computeTaggingFeeFromRawInput(
      _rawInput: IETS.TaggingRecordRawInputStruct,
      _relayer: PromiseOrValue<string>,
      _tagger: PromiseOrValue<string>,
      _action: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    computeTaggingRecordIdFromCompositeKey(
      _targetId: PromiseOrValue<BigNumberish>,
      _recordType: PromiseOrValue<string>,
      _relayer: PromiseOrValue<string>,
      _tagger: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    computeTaggingRecordIdFromRawInput(
      _rawInput: IETS.TaggingRecordRawInputStruct,
      _relayer: PromiseOrValue<string>,
      _tagger: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    createTag(
      _tag: PromiseOrValue<string>,
      _creator: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    createTaggingRecord(
      _tagIds: PromiseOrValue<BigNumberish>[],
      _targetId: PromiseOrValue<BigNumberish>,
      _recordType: PromiseOrValue<string>,
      _tagger: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    drawDown(
      _account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    etsAccessControls(overrides?: CallOverrides): Promise<BigNumber>;

    etsTarget(overrides?: CallOverrides): Promise<BigNumber>;

    etsToken(overrides?: CallOverrides): Promise<BigNumber>;

    getOrCreateTagId(
      _tag: PromiseOrValue<string>,
      _creator: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getTaggingRecordFromCompositeKey(
      _targetId: PromiseOrValue<BigNumberish>,
      _recordType: PromiseOrValue<string>,
      _relayer: PromiseOrValue<string>,
      _tagger: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTaggingRecordFromId(
      _id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTaggingRecordFromRawInput(
      _rawInput: IETS.TaggingRecordRawInputStruct,
      _relayer: PromiseOrValue<string>,
      _tagger: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      _etsAccessControls: PromiseOrValue<string>,
      _etsToken: PromiseOrValue<string>,
      _etsTarget: PromiseOrValue<string>,
      _taggingFee: PromiseOrValue<BigNumberish>,
      _platformPercentage: PromiseOrValue<BigNumberish>,
      _relayerPercentage: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    paid(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    platformPercentage(overrides?: CallOverrides): Promise<BigNumber>;

    proxiableUUID(overrides?: CallOverrides): Promise<BigNumber>;

    relayerPercentage(overrides?: CallOverrides): Promise<BigNumber>;

    removeTags(
      _taggingRecordId: PromiseOrValue<BigNumberish>,
      _tagIds: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    removeTagsWithCompositeKey(
      _tagIds: PromiseOrValue<BigNumberish>[],
      _targetId: PromiseOrValue<BigNumberish>,
      _recordType: PromiseOrValue<string>,
      _tagger: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    removeTagsWithRawInput(
      _rawInput: IETS.TaggingRecordRawInputStruct,
      _tagger: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    replaceTags(
      _taggingRecordId: PromiseOrValue<BigNumberish>,
      _tagIds: PromiseOrValue<BigNumberish>[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    replaceTagsWithCompositeKey(
      _tagIds: PromiseOrValue<BigNumberish>[],
      _targetId: PromiseOrValue<BigNumberish>,
      _recordType: PromiseOrValue<string>,
      _tagger: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    replaceTagsWithRawInput(
      _rawInput: IETS.TaggingRecordRawInputStruct,
      _tagger: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setAccessControls(
      _accessControls: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setPercentages(
      _platformPercentage: PromiseOrValue<BigNumberish>,
      _relayerPercentage: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setTaggingFee(
      _fee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    taggingFee(overrides?: CallOverrides): Promise<BigNumber>;

    taggingRecordExists(
      _taggingRecordId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    taggingRecordExistsByCompositeKey(
      _targetId: PromiseOrValue<BigNumberish>,
      _recordType: PromiseOrValue<string>,
      _relayer: PromiseOrValue<string>,
      _tagger: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    taggingRecordExistsByRawInput(
      _rawInput: IETS.TaggingRecordRawInputStruct,
      _relayer: PromiseOrValue<string>,
      _tagger: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    taggingRecords(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalDue(
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    upgradeTest(overrides?: CallOverrides): Promise<BigNumber>;

    upgradeTo(
      newImplementation: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    upgradeToAndCall(
      newImplementation: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    MODULO(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    NAME(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    accrued(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    appendTags(
      _taggingRecordId: PromiseOrValue<BigNumberish>,
      _tagIds: PromiseOrValue<BigNumberish>[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    applyTagsWithCompositeKey(
      _tagIds: PromiseOrValue<BigNumberish>[],
      _targetId: PromiseOrValue<BigNumberish>,
      _recordType: PromiseOrValue<string>,
      _tagger: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    applyTagsWithRawInput(
      _rawInput: IETS.TaggingRecordRawInputStruct,
      _tagger: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    computeTaggingFee(
      _taggingRecordId: PromiseOrValue<BigNumberish>,
      _tagIds: PromiseOrValue<BigNumberish>[],
      _action: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    computeTaggingFeeFromCompositeKey(
      _tagIds: PromiseOrValue<BigNumberish>[],
      _targetId: PromiseOrValue<BigNumberish>,
      _recordType: PromiseOrValue<string>,
      _relayer: PromiseOrValue<string>,
      _tagger: PromiseOrValue<string>,
      _action: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    computeTaggingFeeFromRawInput(
      _rawInput: IETS.TaggingRecordRawInputStruct,
      _relayer: PromiseOrValue<string>,
      _tagger: PromiseOrValue<string>,
      _action: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    computeTaggingRecordIdFromCompositeKey(
      _targetId: PromiseOrValue<BigNumberish>,
      _recordType: PromiseOrValue<string>,
      _relayer: PromiseOrValue<string>,
      _tagger: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    computeTaggingRecordIdFromRawInput(
      _rawInput: IETS.TaggingRecordRawInputStruct,
      _relayer: PromiseOrValue<string>,
      _tagger: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    createTag(
      _tag: PromiseOrValue<string>,
      _creator: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    createTaggingRecord(
      _tagIds: PromiseOrValue<BigNumberish>[],
      _targetId: PromiseOrValue<BigNumberish>,
      _recordType: PromiseOrValue<string>,
      _tagger: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    drawDown(
      _account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    etsAccessControls(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    etsTarget(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    etsToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getOrCreateTagId(
      _tag: PromiseOrValue<string>,
      _creator: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getTaggingRecordFromCompositeKey(
      _targetId: PromiseOrValue<BigNumberish>,
      _recordType: PromiseOrValue<string>,
      _relayer: PromiseOrValue<string>,
      _tagger: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTaggingRecordFromId(
      _id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTaggingRecordFromRawInput(
      _rawInput: IETS.TaggingRecordRawInputStruct,
      _relayer: PromiseOrValue<string>,
      _tagger: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      _etsAccessControls: PromiseOrValue<string>,
      _etsToken: PromiseOrValue<string>,
      _etsTarget: PromiseOrValue<string>,
      _taggingFee: PromiseOrValue<BigNumberish>,
      _platformPercentage: PromiseOrValue<BigNumberish>,
      _relayerPercentage: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    paid(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    platformPercentage(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    proxiableUUID(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    relayerPercentage(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    removeTags(
      _taggingRecordId: PromiseOrValue<BigNumberish>,
      _tagIds: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    removeTagsWithCompositeKey(
      _tagIds: PromiseOrValue<BigNumberish>[],
      _targetId: PromiseOrValue<BigNumberish>,
      _recordType: PromiseOrValue<string>,
      _tagger: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    removeTagsWithRawInput(
      _rawInput: IETS.TaggingRecordRawInputStruct,
      _tagger: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    replaceTags(
      _taggingRecordId: PromiseOrValue<BigNumberish>,
      _tagIds: PromiseOrValue<BigNumberish>[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    replaceTagsWithCompositeKey(
      _tagIds: PromiseOrValue<BigNumberish>[],
      _targetId: PromiseOrValue<BigNumberish>,
      _recordType: PromiseOrValue<string>,
      _tagger: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    replaceTagsWithRawInput(
      _rawInput: IETS.TaggingRecordRawInputStruct,
      _tagger: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setAccessControls(
      _accessControls: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setPercentages(
      _platformPercentage: PromiseOrValue<BigNumberish>,
      _relayerPercentage: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setTaggingFee(
      _fee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    taggingFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    taggingRecordExists(
      _taggingRecordId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    taggingRecordExistsByCompositeKey(
      _targetId: PromiseOrValue<BigNumberish>,
      _recordType: PromiseOrValue<string>,
      _relayer: PromiseOrValue<string>,
      _tagger: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    taggingRecordExistsByRawInput(
      _rawInput: IETS.TaggingRecordRawInputStruct,
      _relayer: PromiseOrValue<string>,
      _tagger: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    taggingRecords(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalDue(
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    upgradeTest(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    upgradeTo(
      newImplementation: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    upgradeToAndCall(
      newImplementation: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
