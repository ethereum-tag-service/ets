/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../../common";

export declare namespace IETSAuctionHouse {
  export type AuctionStruct = {
    auctionId: BigNumberish;
    tokenId: BigNumberish;
    amount: BigNumberish;
    startTime: BigNumberish;
    endTime: BigNumberish;
    reservePrice: BigNumberish;
    bidder: AddressLike;
    auctioneer: AddressLike;
    settled: boolean;
  };

  export type AuctionStructOutput = [
    auctionId: bigint,
    tokenId: bigint,
    amount: bigint,
    startTime: bigint,
    endTime: bigint,
    reservePrice: bigint,
    bidder: string,
    auctioneer: string,
    settled: boolean
  ] & {
    auctionId: bigint;
    tokenId: bigint;
    amount: bigint;
    startTime: bigint;
    endTime: bigint;
    reservePrice: bigint;
    bidder: string;
    auctioneer: string;
    settled: boolean;
  };
}

export interface ETSAuctionHouseUpgradeInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "MODULO"
      | "NAME"
      | "accrued"
      | "auctionEnded"
      | "auctionExists"
      | "auctionExistsForTokenId"
      | "auctionSettled"
      | "auctions"
      | "auctionsByTokenId"
      | "createBid"
      | "createNextAuction"
      | "creatorPercentage"
      | "drawDown"
      | "duration"
      | "etsAccessControls"
      | "etsToken"
      | "fulfillRequestCreateAuction"
      | "getActiveCount"
      | "getAuction"
      | "getAuctionCountForTokenId"
      | "getAuctionForTokenId"
      | "getBalance"
      | "getTotalCount"
      | "initialize"
      | "maxAuctions"
      | "minBidIncrementPercentage"
      | "paid"
      | "pause"
      | "paused"
      | "platformPercentage"
      | "proxiableUUID"
      | "relayerPercentage"
      | "reservePrice"
      | "setDuration"
      | "setMaxAuctions"
      | "setMinBidIncrementPercentage"
      | "setProceedPercentages"
      | "setReservePrice"
      | "setTimeBuffer"
      | "settleAuction"
      | "settleCurrentAndCreateNewAuction"
      | "timeBuffer"
      | "totalDue"
      | "unpause"
      | "upgradeTest"
      | "upgradeTo"
      | "upgradeToAndCall"
      | "wmatic"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "AdminChanged"
      | "AuctionBid"
      | "AuctionCreated"
      | "AuctionDurationSet"
      | "AuctionExtended"
      | "AuctionMinBidIncrementPercentageSet"
      | "AuctionProceedPercentagesSet"
      | "AuctionProceedsWithdrawn"
      | "AuctionReservePriceSet"
      | "AuctionSettled"
      | "AuctionTimeBufferSet"
      | "AuctionsMaxSet"
      | "BeaconUpgraded"
      | "Initialized"
      | "Paused"
      | "RequestCreateAuction"
      | "Unpaused"
      | "Upgraded"
  ): EventFragment;

  encodeFunctionData(functionFragment: "MODULO", values?: undefined): string;
  encodeFunctionData(functionFragment: "NAME", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "accrued",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "auctionEnded",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "auctionExists",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "auctionExistsForTokenId",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "auctionSettled",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "auctions",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "auctionsByTokenId",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createBid",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createNextAuction",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "creatorPercentage",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "drawDown",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "duration", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "etsAccessControls",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "etsToken", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "fulfillRequestCreateAuction",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getActiveCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAuction",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getAuctionCountForTokenId",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getAuctionForTokenId",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getBalance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [
      AddressLike,
      AddressLike,
      AddressLike,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "maxAuctions",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "minBidIncrementPercentage",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "paid", values: [AddressLike]): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "platformPercentage",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "proxiableUUID",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "relayerPercentage",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "reservePrice",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setDuration",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMaxAuctions",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMinBidIncrementPercentage",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setProceedPercentages",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setReservePrice",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setTimeBuffer",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "settleAuction",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "settleCurrentAndCreateNewAuction",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "timeBuffer",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalDue",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "upgradeTest",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "upgradeTo",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "upgradeToAndCall",
    values: [AddressLike, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "wmatic", values?: undefined): string;

  decodeFunctionResult(functionFragment: "MODULO", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "NAME", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "accrued", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "auctionEnded",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "auctionExists",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "auctionExistsForTokenId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "auctionSettled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "auctions", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "auctionsByTokenId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "createBid", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "createNextAuction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "creatorPercentage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "drawDown", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "duration", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "etsAccessControls",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "etsToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "fulfillRequestCreateAuction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getActiveCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getAuction", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getAuctionCountForTokenId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAuctionForTokenId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getBalance", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getTotalCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "maxAuctions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minBidIncrementPercentage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "paid", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "platformPercentage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proxiableUUID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "relayerPercentage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "reservePrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDuration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMaxAuctions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMinBidIncrementPercentage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setProceedPercentages",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setReservePrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTimeBuffer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "settleAuction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "settleCurrentAndCreateNewAuction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "timeBuffer", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "totalDue", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "upgradeTest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "upgradeTo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "upgradeToAndCall",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "wmatic", data: BytesLike): Result;
}

export namespace AdminChangedEvent {
  export type InputTuple = [previousAdmin: AddressLike, newAdmin: AddressLike];
  export type OutputTuple = [previousAdmin: string, newAdmin: string];
  export interface OutputObject {
    previousAdmin: string;
    newAdmin: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace AuctionBidEvent {
  export type InputTuple = [
    auctionId: BigNumberish,
    sender: AddressLike,
    value: BigNumberish,
    extended: boolean
  ];
  export type OutputTuple = [
    auctionId: bigint,
    sender: string,
    value: bigint,
    extended: boolean
  ];
  export interface OutputObject {
    auctionId: bigint;
    sender: string;
    value: bigint;
    extended: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace AuctionCreatedEvent {
  export type InputTuple = [
    auctionId: BigNumberish,
    tokenId: BigNumberish,
    tokenAuctionNumber: BigNumberish
  ];
  export type OutputTuple = [
    auctionId: bigint,
    tokenId: bigint,
    tokenAuctionNumber: bigint
  ];
  export interface OutputObject {
    auctionId: bigint;
    tokenId: bigint;
    tokenAuctionNumber: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace AuctionDurationSetEvent {
  export type InputTuple = [duration: BigNumberish];
  export type OutputTuple = [duration: bigint];
  export interface OutputObject {
    duration: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace AuctionExtendedEvent {
  export type InputTuple = [auctionId: BigNumberish, endTime: BigNumberish];
  export type OutputTuple = [auctionId: bigint, endTime: bigint];
  export interface OutputObject {
    auctionId: bigint;
    endTime: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace AuctionMinBidIncrementPercentageSetEvent {
  export type InputTuple = [minBidIncrementPercentagePrice: BigNumberish];
  export type OutputTuple = [minBidIncrementPercentagePrice: bigint];
  export interface OutputObject {
    minBidIncrementPercentagePrice: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace AuctionProceedPercentagesSetEvent {
  export type InputTuple = [
    platformPercentage: BigNumberish,
    relayerPercentage: BigNumberish,
    creatorPercentage: BigNumberish
  ];
  export type OutputTuple = [
    platformPercentage: bigint,
    relayerPercentage: bigint,
    creatorPercentage: bigint
  ];
  export interface OutputObject {
    platformPercentage: bigint;
    relayerPercentage: bigint;
    creatorPercentage: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace AuctionProceedsWithdrawnEvent {
  export type InputTuple = [who: AddressLike, amount: BigNumberish];
  export type OutputTuple = [who: string, amount: bigint];
  export interface OutputObject {
    who: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace AuctionReservePriceSetEvent {
  export type InputTuple = [reservePrice: BigNumberish];
  export type OutputTuple = [reservePrice: bigint];
  export interface OutputObject {
    reservePrice: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace AuctionSettledEvent {
  export type InputTuple = [auctionId: BigNumberish];
  export type OutputTuple = [auctionId: bigint];
  export interface OutputObject {
    auctionId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace AuctionTimeBufferSetEvent {
  export type InputTuple = [timeBuffer: BigNumberish];
  export type OutputTuple = [timeBuffer: bigint];
  export interface OutputObject {
    timeBuffer: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace AuctionsMaxSetEvent {
  export type InputTuple = [maxAuctions: BigNumberish];
  export type OutputTuple = [maxAuctions: bigint];
  export interface OutputObject {
    maxAuctions: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace BeaconUpgradedEvent {
  export type InputTuple = [beacon: AddressLike];
  export type OutputTuple = [beacon: string];
  export interface OutputObject {
    beacon: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace InitializedEvent {
  export type InputTuple = [version: BigNumberish];
  export type OutputTuple = [version: bigint];
  export interface OutputObject {
    version: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RequestCreateAuctionEvent {
  export type InputTuple = [];
  export type OutputTuple = [];
  export interface OutputObject {}
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UnpausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UpgradedEvent {
  export type InputTuple = [implementation: AddressLike];
  export type OutputTuple = [implementation: string];
  export interface OutputObject {
    implementation: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface ETSAuctionHouseUpgrade extends BaseContract {
  connect(runner?: ContractRunner | null): ETSAuctionHouseUpgrade;
  waitForDeployment(): Promise<this>;

  interface: ETSAuctionHouseUpgradeInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  MODULO: TypedContractMethod<[], [bigint], "view">;

  NAME: TypedContractMethod<[], [string], "view">;

  accrued: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  auctionEnded: TypedContractMethod<
    [_auctionId: BigNumberish],
    [boolean],
    "view"
  >;

  auctionExists: TypedContractMethod<
    [_auctionId: BigNumberish],
    [boolean],
    "view"
  >;

  auctionExistsForTokenId: TypedContractMethod<
    [_tokenId: BigNumberish],
    [boolean],
    "view"
  >;

  auctionSettled: TypedContractMethod<
    [_auctionId: BigNumberish],
    [boolean],
    "view"
  >;

  auctions: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        string,
        string,
        boolean
      ] & {
        auctionId: bigint;
        tokenId: bigint;
        amount: bigint;
        startTime: bigint;
        endTime: bigint;
        reservePrice: bigint;
        bidder: string;
        auctioneer: string;
        settled: boolean;
      }
    ],
    "view"
  >;

  auctionsByTokenId: TypedContractMethod<
    [arg0: BigNumberish, arg1: BigNumberish],
    [bigint],
    "view"
  >;

  createBid: TypedContractMethod<[_auctionId: BigNumberish], [void], "payable">;

  createNextAuction: TypedContractMethod<[], [void], "nonpayable">;

  creatorPercentage: TypedContractMethod<[], [bigint], "view">;

  drawDown: TypedContractMethod<[_account: AddressLike], [void], "nonpayable">;

  duration: TypedContractMethod<[], [bigint], "view">;

  etsAccessControls: TypedContractMethod<[], [string], "view">;

  etsToken: TypedContractMethod<[], [string], "view">;

  fulfillRequestCreateAuction: TypedContractMethod<
    [_tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;

  getActiveCount: TypedContractMethod<[], [bigint], "view">;

  getAuction: TypedContractMethod<
    [_auctionId: BigNumberish],
    [IETSAuctionHouse.AuctionStructOutput],
    "view"
  >;

  getAuctionCountForTokenId: TypedContractMethod<
    [_tokenId: BigNumberish],
    [bigint],
    "view"
  >;

  getAuctionForTokenId: TypedContractMethod<
    [_tokenId: BigNumberish],
    [IETSAuctionHouse.AuctionStructOutput],
    "view"
  >;

  getBalance: TypedContractMethod<[], [bigint], "view">;

  getTotalCount: TypedContractMethod<[], [bigint], "view">;

  initialize: TypedContractMethod<
    [
      _etsToken: AddressLike,
      _etsAccessControls: AddressLike,
      _wmatic: AddressLike,
      _maxAuctions: BigNumberish,
      _timeBuffer: BigNumberish,
      _reservePrice: BigNumberish,
      _minBidIncrementPercentage: BigNumberish,
      _duration: BigNumberish,
      _relayerPercentage: BigNumberish,
      _platformPercentage: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  maxAuctions: TypedContractMethod<[], [bigint], "view">;

  minBidIncrementPercentage: TypedContractMethod<[], [bigint], "view">;

  paid: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  pause: TypedContractMethod<[], [void], "nonpayable">;

  paused: TypedContractMethod<[], [boolean], "view">;

  platformPercentage: TypedContractMethod<[], [bigint], "view">;

  proxiableUUID: TypedContractMethod<[], [string], "view">;

  relayerPercentage: TypedContractMethod<[], [bigint], "view">;

  reservePrice: TypedContractMethod<[], [bigint], "view">;

  setDuration: TypedContractMethod<
    [_duration: BigNumberish],
    [void],
    "nonpayable"
  >;

  setMaxAuctions: TypedContractMethod<
    [_maxAuctions: BigNumberish],
    [void],
    "nonpayable"
  >;

  setMinBidIncrementPercentage: TypedContractMethod<
    [_minBidIncrementPercentage: BigNumberish],
    [void],
    "nonpayable"
  >;

  setProceedPercentages: TypedContractMethod<
    [_platformPercentage: BigNumberish, _relayerPercentage: BigNumberish],
    [void],
    "nonpayable"
  >;

  setReservePrice: TypedContractMethod<
    [_reservePrice: BigNumberish],
    [void],
    "nonpayable"
  >;

  setTimeBuffer: TypedContractMethod<
    [_timeBuffer: BigNumberish],
    [void],
    "nonpayable"
  >;

  settleAuction: TypedContractMethod<
    [_auctionId: BigNumberish],
    [void],
    "nonpayable"
  >;

  settleCurrentAndCreateNewAuction: TypedContractMethod<
    [_auctionId: BigNumberish],
    [void],
    "nonpayable"
  >;

  timeBuffer: TypedContractMethod<[], [bigint], "view">;

  totalDue: TypedContractMethod<[_account: AddressLike], [bigint], "view">;

  unpause: TypedContractMethod<[], [void], "nonpayable">;

  upgradeTest: TypedContractMethod<[], [boolean], "view">;

  upgradeTo: TypedContractMethod<
    [newImplementation: AddressLike],
    [void],
    "nonpayable"
  >;

  upgradeToAndCall: TypedContractMethod<
    [newImplementation: AddressLike, data: BytesLike],
    [void],
    "payable"
  >;

  wmatic: TypedContractMethod<[], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "MODULO"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "NAME"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "accrued"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "auctionEnded"
  ): TypedContractMethod<[_auctionId: BigNumberish], [boolean], "view">;
  getFunction(
    nameOrSignature: "auctionExists"
  ): TypedContractMethod<[_auctionId: BigNumberish], [boolean], "view">;
  getFunction(
    nameOrSignature: "auctionExistsForTokenId"
  ): TypedContractMethod<[_tokenId: BigNumberish], [boolean], "view">;
  getFunction(
    nameOrSignature: "auctionSettled"
  ): TypedContractMethod<[_auctionId: BigNumberish], [boolean], "view">;
  getFunction(
    nameOrSignature: "auctions"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        string,
        string,
        boolean
      ] & {
        auctionId: bigint;
        tokenId: bigint;
        amount: bigint;
        startTime: bigint;
        endTime: bigint;
        reservePrice: bigint;
        bidder: string;
        auctioneer: string;
        settled: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "auctionsByTokenId"
  ): TypedContractMethod<
    [arg0: BigNumberish, arg1: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "createBid"
  ): TypedContractMethod<[_auctionId: BigNumberish], [void], "payable">;
  getFunction(
    nameOrSignature: "createNextAuction"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "creatorPercentage"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "drawDown"
  ): TypedContractMethod<[_account: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "duration"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "etsAccessControls"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "etsToken"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "fulfillRequestCreateAuction"
  ): TypedContractMethod<[_tokenId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getActiveCount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getAuction"
  ): TypedContractMethod<
    [_auctionId: BigNumberish],
    [IETSAuctionHouse.AuctionStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getAuctionCountForTokenId"
  ): TypedContractMethod<[_tokenId: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "getAuctionForTokenId"
  ): TypedContractMethod<
    [_tokenId: BigNumberish],
    [IETSAuctionHouse.AuctionStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getBalance"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getTotalCount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "initialize"
  ): TypedContractMethod<
    [
      _etsToken: AddressLike,
      _etsAccessControls: AddressLike,
      _wmatic: AddressLike,
      _maxAuctions: BigNumberish,
      _timeBuffer: BigNumberish,
      _reservePrice: BigNumberish,
      _minBidIncrementPercentage: BigNumberish,
      _duration: BigNumberish,
      _relayerPercentage: BigNumberish,
      _platformPercentage: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "maxAuctions"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "minBidIncrementPercentage"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "paid"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "pause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "paused"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "platformPercentage"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "proxiableUUID"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "relayerPercentage"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "reservePrice"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "setDuration"
  ): TypedContractMethod<[_duration: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setMaxAuctions"
  ): TypedContractMethod<[_maxAuctions: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setMinBidIncrementPercentage"
  ): TypedContractMethod<
    [_minBidIncrementPercentage: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setProceedPercentages"
  ): TypedContractMethod<
    [_platformPercentage: BigNumberish, _relayerPercentage: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setReservePrice"
  ): TypedContractMethod<[_reservePrice: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setTimeBuffer"
  ): TypedContractMethod<[_timeBuffer: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "settleAuction"
  ): TypedContractMethod<[_auctionId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "settleCurrentAndCreateNewAuction"
  ): TypedContractMethod<[_auctionId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "timeBuffer"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "totalDue"
  ): TypedContractMethod<[_account: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "unpause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "upgradeTest"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "upgradeTo"
  ): TypedContractMethod<
    [newImplementation: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "upgradeToAndCall"
  ): TypedContractMethod<
    [newImplementation: AddressLike, data: BytesLike],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "wmatic"
  ): TypedContractMethod<[], [string], "view">;

  getEvent(
    key: "AdminChanged"
  ): TypedContractEvent<
    AdminChangedEvent.InputTuple,
    AdminChangedEvent.OutputTuple,
    AdminChangedEvent.OutputObject
  >;
  getEvent(
    key: "AuctionBid"
  ): TypedContractEvent<
    AuctionBidEvent.InputTuple,
    AuctionBidEvent.OutputTuple,
    AuctionBidEvent.OutputObject
  >;
  getEvent(
    key: "AuctionCreated"
  ): TypedContractEvent<
    AuctionCreatedEvent.InputTuple,
    AuctionCreatedEvent.OutputTuple,
    AuctionCreatedEvent.OutputObject
  >;
  getEvent(
    key: "AuctionDurationSet"
  ): TypedContractEvent<
    AuctionDurationSetEvent.InputTuple,
    AuctionDurationSetEvent.OutputTuple,
    AuctionDurationSetEvent.OutputObject
  >;
  getEvent(
    key: "AuctionExtended"
  ): TypedContractEvent<
    AuctionExtendedEvent.InputTuple,
    AuctionExtendedEvent.OutputTuple,
    AuctionExtendedEvent.OutputObject
  >;
  getEvent(
    key: "AuctionMinBidIncrementPercentageSet"
  ): TypedContractEvent<
    AuctionMinBidIncrementPercentageSetEvent.InputTuple,
    AuctionMinBidIncrementPercentageSetEvent.OutputTuple,
    AuctionMinBidIncrementPercentageSetEvent.OutputObject
  >;
  getEvent(
    key: "AuctionProceedPercentagesSet"
  ): TypedContractEvent<
    AuctionProceedPercentagesSetEvent.InputTuple,
    AuctionProceedPercentagesSetEvent.OutputTuple,
    AuctionProceedPercentagesSetEvent.OutputObject
  >;
  getEvent(
    key: "AuctionProceedsWithdrawn"
  ): TypedContractEvent<
    AuctionProceedsWithdrawnEvent.InputTuple,
    AuctionProceedsWithdrawnEvent.OutputTuple,
    AuctionProceedsWithdrawnEvent.OutputObject
  >;
  getEvent(
    key: "AuctionReservePriceSet"
  ): TypedContractEvent<
    AuctionReservePriceSetEvent.InputTuple,
    AuctionReservePriceSetEvent.OutputTuple,
    AuctionReservePriceSetEvent.OutputObject
  >;
  getEvent(
    key: "AuctionSettled"
  ): TypedContractEvent<
    AuctionSettledEvent.InputTuple,
    AuctionSettledEvent.OutputTuple,
    AuctionSettledEvent.OutputObject
  >;
  getEvent(
    key: "AuctionTimeBufferSet"
  ): TypedContractEvent<
    AuctionTimeBufferSetEvent.InputTuple,
    AuctionTimeBufferSetEvent.OutputTuple,
    AuctionTimeBufferSetEvent.OutputObject
  >;
  getEvent(
    key: "AuctionsMaxSet"
  ): TypedContractEvent<
    AuctionsMaxSetEvent.InputTuple,
    AuctionsMaxSetEvent.OutputTuple,
    AuctionsMaxSetEvent.OutputObject
  >;
  getEvent(
    key: "BeaconUpgraded"
  ): TypedContractEvent<
    BeaconUpgradedEvent.InputTuple,
    BeaconUpgradedEvent.OutputTuple,
    BeaconUpgradedEvent.OutputObject
  >;
  getEvent(
    key: "Initialized"
  ): TypedContractEvent<
    InitializedEvent.InputTuple,
    InitializedEvent.OutputTuple,
    InitializedEvent.OutputObject
  >;
  getEvent(
    key: "Paused"
  ): TypedContractEvent<
    PausedEvent.InputTuple,
    PausedEvent.OutputTuple,
    PausedEvent.OutputObject
  >;
  getEvent(
    key: "RequestCreateAuction"
  ): TypedContractEvent<
    RequestCreateAuctionEvent.InputTuple,
    RequestCreateAuctionEvent.OutputTuple,
    RequestCreateAuctionEvent.OutputObject
  >;
  getEvent(
    key: "Unpaused"
  ): TypedContractEvent<
    UnpausedEvent.InputTuple,
    UnpausedEvent.OutputTuple,
    UnpausedEvent.OutputObject
  >;
  getEvent(
    key: "Upgraded"
  ): TypedContractEvent<
    UpgradedEvent.InputTuple,
    UpgradedEvent.OutputTuple,
    UpgradedEvent.OutputObject
  >;

  filters: {
    "AdminChanged(address,address)": TypedContractEvent<
      AdminChangedEvent.InputTuple,
      AdminChangedEvent.OutputTuple,
      AdminChangedEvent.OutputObject
    >;
    AdminChanged: TypedContractEvent<
      AdminChangedEvent.InputTuple,
      AdminChangedEvent.OutputTuple,
      AdminChangedEvent.OutputObject
    >;

    "AuctionBid(uint256,address,uint256,bool)": TypedContractEvent<
      AuctionBidEvent.InputTuple,
      AuctionBidEvent.OutputTuple,
      AuctionBidEvent.OutputObject
    >;
    AuctionBid: TypedContractEvent<
      AuctionBidEvent.InputTuple,
      AuctionBidEvent.OutputTuple,
      AuctionBidEvent.OutputObject
    >;

    "AuctionCreated(uint256,uint256,uint256)": TypedContractEvent<
      AuctionCreatedEvent.InputTuple,
      AuctionCreatedEvent.OutputTuple,
      AuctionCreatedEvent.OutputObject
    >;
    AuctionCreated: TypedContractEvent<
      AuctionCreatedEvent.InputTuple,
      AuctionCreatedEvent.OutputTuple,
      AuctionCreatedEvent.OutputObject
    >;

    "AuctionDurationSet(uint256)": TypedContractEvent<
      AuctionDurationSetEvent.InputTuple,
      AuctionDurationSetEvent.OutputTuple,
      AuctionDurationSetEvent.OutputObject
    >;
    AuctionDurationSet: TypedContractEvent<
      AuctionDurationSetEvent.InputTuple,
      AuctionDurationSetEvent.OutputTuple,
      AuctionDurationSetEvent.OutputObject
    >;

    "AuctionExtended(uint256,uint256)": TypedContractEvent<
      AuctionExtendedEvent.InputTuple,
      AuctionExtendedEvent.OutputTuple,
      AuctionExtendedEvent.OutputObject
    >;
    AuctionExtended: TypedContractEvent<
      AuctionExtendedEvent.InputTuple,
      AuctionExtendedEvent.OutputTuple,
      AuctionExtendedEvent.OutputObject
    >;

    "AuctionMinBidIncrementPercentageSet(uint8)": TypedContractEvent<
      AuctionMinBidIncrementPercentageSetEvent.InputTuple,
      AuctionMinBidIncrementPercentageSetEvent.OutputTuple,
      AuctionMinBidIncrementPercentageSetEvent.OutputObject
    >;
    AuctionMinBidIncrementPercentageSet: TypedContractEvent<
      AuctionMinBidIncrementPercentageSetEvent.InputTuple,
      AuctionMinBidIncrementPercentageSetEvent.OutputTuple,
      AuctionMinBidIncrementPercentageSetEvent.OutputObject
    >;

    "AuctionProceedPercentagesSet(uint256,uint256,uint256)": TypedContractEvent<
      AuctionProceedPercentagesSetEvent.InputTuple,
      AuctionProceedPercentagesSetEvent.OutputTuple,
      AuctionProceedPercentagesSetEvent.OutputObject
    >;
    AuctionProceedPercentagesSet: TypedContractEvent<
      AuctionProceedPercentagesSetEvent.InputTuple,
      AuctionProceedPercentagesSetEvent.OutputTuple,
      AuctionProceedPercentagesSetEvent.OutputObject
    >;

    "AuctionProceedsWithdrawn(address,uint256)": TypedContractEvent<
      AuctionProceedsWithdrawnEvent.InputTuple,
      AuctionProceedsWithdrawnEvent.OutputTuple,
      AuctionProceedsWithdrawnEvent.OutputObject
    >;
    AuctionProceedsWithdrawn: TypedContractEvent<
      AuctionProceedsWithdrawnEvent.InputTuple,
      AuctionProceedsWithdrawnEvent.OutputTuple,
      AuctionProceedsWithdrawnEvent.OutputObject
    >;

    "AuctionReservePriceSet(uint256)": TypedContractEvent<
      AuctionReservePriceSetEvent.InputTuple,
      AuctionReservePriceSetEvent.OutputTuple,
      AuctionReservePriceSetEvent.OutputObject
    >;
    AuctionReservePriceSet: TypedContractEvent<
      AuctionReservePriceSetEvent.InputTuple,
      AuctionReservePriceSetEvent.OutputTuple,
      AuctionReservePriceSetEvent.OutputObject
    >;

    "AuctionSettled(uint256)": TypedContractEvent<
      AuctionSettledEvent.InputTuple,
      AuctionSettledEvent.OutputTuple,
      AuctionSettledEvent.OutputObject
    >;
    AuctionSettled: TypedContractEvent<
      AuctionSettledEvent.InputTuple,
      AuctionSettledEvent.OutputTuple,
      AuctionSettledEvent.OutputObject
    >;

    "AuctionTimeBufferSet(uint256)": TypedContractEvent<
      AuctionTimeBufferSetEvent.InputTuple,
      AuctionTimeBufferSetEvent.OutputTuple,
      AuctionTimeBufferSetEvent.OutputObject
    >;
    AuctionTimeBufferSet: TypedContractEvent<
      AuctionTimeBufferSetEvent.InputTuple,
      AuctionTimeBufferSetEvent.OutputTuple,
      AuctionTimeBufferSetEvent.OutputObject
    >;

    "AuctionsMaxSet(uint256)": TypedContractEvent<
      AuctionsMaxSetEvent.InputTuple,
      AuctionsMaxSetEvent.OutputTuple,
      AuctionsMaxSetEvent.OutputObject
    >;
    AuctionsMaxSet: TypedContractEvent<
      AuctionsMaxSetEvent.InputTuple,
      AuctionsMaxSetEvent.OutputTuple,
      AuctionsMaxSetEvent.OutputObject
    >;

    "BeaconUpgraded(address)": TypedContractEvent<
      BeaconUpgradedEvent.InputTuple,
      BeaconUpgradedEvent.OutputTuple,
      BeaconUpgradedEvent.OutputObject
    >;
    BeaconUpgraded: TypedContractEvent<
      BeaconUpgradedEvent.InputTuple,
      BeaconUpgradedEvent.OutputTuple,
      BeaconUpgradedEvent.OutputObject
    >;

    "Initialized(uint8)": TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;
    Initialized: TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;

    "Paused(address)": TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;
    Paused: TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;

    "RequestCreateAuction()": TypedContractEvent<
      RequestCreateAuctionEvent.InputTuple,
      RequestCreateAuctionEvent.OutputTuple,
      RequestCreateAuctionEvent.OutputObject
    >;
    RequestCreateAuction: TypedContractEvent<
      RequestCreateAuctionEvent.InputTuple,
      RequestCreateAuctionEvent.OutputTuple,
      RequestCreateAuctionEvent.OutputObject
    >;

    "Unpaused(address)": TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;
    Unpaused: TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;

    "Upgraded(address)": TypedContractEvent<
      UpgradedEvent.InputTuple,
      UpgradedEvent.OutputTuple,
      UpgradedEvent.OutputObject
    >;
    Upgraded: TypedContractEvent<
      UpgradedEvent.InputTuple,
      UpgradedEvent.OutputTuple,
      UpgradedEvent.OutputObject
    >;
  };
}
