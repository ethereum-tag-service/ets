/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../common";

export declare namespace IETSAuctionHouse {
  export type AuctionStruct = {
    auctionId: PromiseOrValue<BigNumberish>;
    amount: PromiseOrValue<BigNumberish>;
    startTime: PromiseOrValue<BigNumberish>;
    endTime: PromiseOrValue<BigNumberish>;
    reservePrice: PromiseOrValue<BigNumberish>;
    bidder: PromiseOrValue<string>;
    auctioneer: PromiseOrValue<string>;
    settled: PromiseOrValue<boolean>;
  };

  export type AuctionStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    string,
    string,
    boolean
  ] & {
    auctionId: BigNumber;
    amount: BigNumber;
    startTime: BigNumber;
    endTime: BigNumber;
    reservePrice: BigNumber;
    bidder: string;
    auctioneer: string;
    settled: boolean;
  };
}

export interface ETSAuctionHouseUpgradeInterface extends utils.Interface {
  functions: {
    "MODULO()": FunctionFragment;
    "NAME()": FunctionFragment;
    "accrued(address)": FunctionFragment;
    "auctionEnded(uint256)": FunctionFragment;
    "auctionExists(uint256)": FunctionFragment;
    "auctionSettled(uint256)": FunctionFragment;
    "auctions(uint256)": FunctionFragment;
    "createBid(uint256)": FunctionFragment;
    "createNextAuction()": FunctionFragment;
    "creatorPercentage()": FunctionFragment;
    "drawDown(address)": FunctionFragment;
    "duration()": FunctionFragment;
    "etsAccessControls()": FunctionFragment;
    "etsToken()": FunctionFragment;
    "fulfillRequestCreateAuction(uint256)": FunctionFragment;
    "getActiveCount()": FunctionFragment;
    "getAuction(uint256)": FunctionFragment;
    "getBalance()": FunctionFragment;
    "getTotalCount()": FunctionFragment;
    "initialize(address,address,address,uint256,uint256,uint256,uint8,uint256,uint256,uint256)": FunctionFragment;
    "maxAuctions()": FunctionFragment;
    "minBidIncrementPercentage()": FunctionFragment;
    "paid(address)": FunctionFragment;
    "pause()": FunctionFragment;
    "paused()": FunctionFragment;
    "platformPercentage()": FunctionFragment;
    "proxiableUUID()": FunctionFragment;
    "relayerPercentage()": FunctionFragment;
    "reservePrice()": FunctionFragment;
    "setDuration(uint256)": FunctionFragment;
    "setMaxAuctions(uint256)": FunctionFragment;
    "setMinBidIncrementPercentage(uint8)": FunctionFragment;
    "setProceedPercentages(uint256,uint256)": FunctionFragment;
    "setReservePrice(uint256)": FunctionFragment;
    "setTimeBuffer(uint256)": FunctionFragment;
    "settleAuction(uint256)": FunctionFragment;
    "settleCurrentAndCreateNewAuction(uint256)": FunctionFragment;
    "timeBuffer()": FunctionFragment;
    "totalDue(address)": FunctionFragment;
    "unpause()": FunctionFragment;
    "upgradeTest()": FunctionFragment;
    "upgradeTo(address)": FunctionFragment;
    "upgradeToAndCall(address,bytes)": FunctionFragment;
    "wmatic()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "MODULO"
      | "NAME"
      | "accrued"
      | "auctionEnded"
      | "auctionExists"
      | "auctionSettled"
      | "auctions"
      | "createBid"
      | "createNextAuction"
      | "creatorPercentage"
      | "drawDown"
      | "duration"
      | "etsAccessControls"
      | "etsToken"
      | "fulfillRequestCreateAuction"
      | "getActiveCount"
      | "getAuction"
      | "getBalance"
      | "getTotalCount"
      | "initialize"
      | "maxAuctions"
      | "minBidIncrementPercentage"
      | "paid"
      | "pause"
      | "paused"
      | "platformPercentage"
      | "proxiableUUID"
      | "relayerPercentage"
      | "reservePrice"
      | "setDuration"
      | "setMaxAuctions"
      | "setMinBidIncrementPercentage"
      | "setProceedPercentages"
      | "setReservePrice"
      | "setTimeBuffer"
      | "settleAuction"
      | "settleCurrentAndCreateNewAuction"
      | "timeBuffer"
      | "totalDue"
      | "unpause"
      | "upgradeTest"
      | "upgradeTo"
      | "upgradeToAndCall"
      | "wmatic"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "MODULO", values?: undefined): string;
  encodeFunctionData(functionFragment: "NAME", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "accrued",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "auctionEnded",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "auctionExists",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "auctionSettled",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "auctions",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "createBid",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "createNextAuction",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "creatorPercentage",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "drawDown",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "duration", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "etsAccessControls",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "etsToken", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "fulfillRequestCreateAuction",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getActiveCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAuction",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getBalance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "maxAuctions",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "minBidIncrementPercentage",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "paid",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "platformPercentage",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "proxiableUUID",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "relayerPercentage",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "reservePrice",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setDuration",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setMaxAuctions",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setMinBidIncrementPercentage",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setProceedPercentages",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setReservePrice",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setTimeBuffer",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "settleAuction",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "settleCurrentAndCreateNewAuction",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "timeBuffer",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalDue",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "upgradeTest",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "upgradeTo",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "upgradeToAndCall",
    values: [PromiseOrValue<string>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(functionFragment: "wmatic", values?: undefined): string;

  decodeFunctionResult(functionFragment: "MODULO", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "NAME", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "accrued", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "auctionEnded",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "auctionExists",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "auctionSettled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "auctions", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "createBid", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "createNextAuction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "creatorPercentage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "drawDown", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "duration", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "etsAccessControls",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "etsToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "fulfillRequestCreateAuction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getActiveCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getAuction", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getBalance", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getTotalCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "maxAuctions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minBidIncrementPercentage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "paid", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "platformPercentage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proxiableUUID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "relayerPercentage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "reservePrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDuration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMaxAuctions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMinBidIncrementPercentage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setProceedPercentages",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setReservePrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTimeBuffer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "settleAuction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "settleCurrentAndCreateNewAuction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "timeBuffer", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "totalDue", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "upgradeTest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "upgradeTo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "upgradeToAndCall",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "wmatic", data: BytesLike): Result;

  events: {
    "AdminChanged(address,address)": EventFragment;
    "AuctionBid(uint256,address,uint256,bool)": EventFragment;
    "AuctionCreated(uint256)": EventFragment;
    "AuctionDurationSet(uint256)": EventFragment;
    "AuctionExtended(uint256,uint256)": EventFragment;
    "AuctionMinBidIncrementPercentageSet(uint8)": EventFragment;
    "AuctionProceedPercentagesSet(uint256,uint256,uint256)": EventFragment;
    "AuctionProceedsWithdrawn(address,uint256)": EventFragment;
    "AuctionReservePriceSet(uint256)": EventFragment;
    "AuctionSettled(uint256)": EventFragment;
    "AuctionTimeBufferSet(uint256)": EventFragment;
    "AuctionsMaxSet(uint256)": EventFragment;
    "BeaconUpgraded(address)": EventFragment;
    "Initialized(uint8)": EventFragment;
    "Paused(address)": EventFragment;
    "RequestCreateAuction()": EventFragment;
    "Unpaused(address)": EventFragment;
    "Upgraded(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AuctionBid"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AuctionCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AuctionDurationSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AuctionExtended"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "AuctionMinBidIncrementPercentageSet"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "AuctionProceedPercentagesSet"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AuctionProceedsWithdrawn"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AuctionReservePriceSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AuctionSettled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AuctionTimeBufferSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AuctionsMaxSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BeaconUpgraded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Paused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RequestCreateAuction"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unpaused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Upgraded"): EventFragment;
}

export interface AdminChangedEventObject {
  previousAdmin: string;
  newAdmin: string;
}
export type AdminChangedEvent = TypedEvent<
  [string, string],
  AdminChangedEventObject
>;

export type AdminChangedEventFilter = TypedEventFilter<AdminChangedEvent>;

export interface AuctionBidEventObject {
  tokenId: BigNumber;
  sender: string;
  value: BigNumber;
  extended: boolean;
}
export type AuctionBidEvent = TypedEvent<
  [BigNumber, string, BigNumber, boolean],
  AuctionBidEventObject
>;

export type AuctionBidEventFilter = TypedEventFilter<AuctionBidEvent>;

export interface AuctionCreatedEventObject {
  tokenId: BigNumber;
}
export type AuctionCreatedEvent = TypedEvent<
  [BigNumber],
  AuctionCreatedEventObject
>;

export type AuctionCreatedEventFilter = TypedEventFilter<AuctionCreatedEvent>;

export interface AuctionDurationSetEventObject {
  duration: BigNumber;
}
export type AuctionDurationSetEvent = TypedEvent<
  [BigNumber],
  AuctionDurationSetEventObject
>;

export type AuctionDurationSetEventFilter =
  TypedEventFilter<AuctionDurationSetEvent>;

export interface AuctionExtendedEventObject {
  tokenId: BigNumber;
  endTime: BigNumber;
}
export type AuctionExtendedEvent = TypedEvent<
  [BigNumber, BigNumber],
  AuctionExtendedEventObject
>;

export type AuctionExtendedEventFilter = TypedEventFilter<AuctionExtendedEvent>;

export interface AuctionMinBidIncrementPercentageSetEventObject {
  minBidIncrementPercentagePrice: number;
}
export type AuctionMinBidIncrementPercentageSetEvent = TypedEvent<
  [number],
  AuctionMinBidIncrementPercentageSetEventObject
>;

export type AuctionMinBidIncrementPercentageSetEventFilter =
  TypedEventFilter<AuctionMinBidIncrementPercentageSetEvent>;

export interface AuctionProceedPercentagesSetEventObject {
  platformPercentage: BigNumber;
  relayerPercentage: BigNumber;
  creatorPercentage: BigNumber;
}
export type AuctionProceedPercentagesSetEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber],
  AuctionProceedPercentagesSetEventObject
>;

export type AuctionProceedPercentagesSetEventFilter =
  TypedEventFilter<AuctionProceedPercentagesSetEvent>;

export interface AuctionProceedsWithdrawnEventObject {
  who: string;
  amount: BigNumber;
}
export type AuctionProceedsWithdrawnEvent = TypedEvent<
  [string, BigNumber],
  AuctionProceedsWithdrawnEventObject
>;

export type AuctionProceedsWithdrawnEventFilter =
  TypedEventFilter<AuctionProceedsWithdrawnEvent>;

export interface AuctionReservePriceSetEventObject {
  reservePrice: BigNumber;
}
export type AuctionReservePriceSetEvent = TypedEvent<
  [BigNumber],
  AuctionReservePriceSetEventObject
>;

export type AuctionReservePriceSetEventFilter =
  TypedEventFilter<AuctionReservePriceSetEvent>;

export interface AuctionSettledEventObject {
  tokenId: BigNumber;
}
export type AuctionSettledEvent = TypedEvent<
  [BigNumber],
  AuctionSettledEventObject
>;

export type AuctionSettledEventFilter = TypedEventFilter<AuctionSettledEvent>;

export interface AuctionTimeBufferSetEventObject {
  timeBuffer: BigNumber;
}
export type AuctionTimeBufferSetEvent = TypedEvent<
  [BigNumber],
  AuctionTimeBufferSetEventObject
>;

export type AuctionTimeBufferSetEventFilter =
  TypedEventFilter<AuctionTimeBufferSetEvent>;

export interface AuctionsMaxSetEventObject {
  maxAuctions: BigNumber;
}
export type AuctionsMaxSetEvent = TypedEvent<
  [BigNumber],
  AuctionsMaxSetEventObject
>;

export type AuctionsMaxSetEventFilter = TypedEventFilter<AuctionsMaxSetEvent>;

export interface BeaconUpgradedEventObject {
  beacon: string;
}
export type BeaconUpgradedEvent = TypedEvent<
  [string],
  BeaconUpgradedEventObject
>;

export type BeaconUpgradedEventFilter = TypedEventFilter<BeaconUpgradedEvent>;

export interface InitializedEventObject {
  version: number;
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface PausedEventObject {
  account: string;
}
export type PausedEvent = TypedEvent<[string], PausedEventObject>;

export type PausedEventFilter = TypedEventFilter<PausedEvent>;

export interface RequestCreateAuctionEventObject {}
export type RequestCreateAuctionEvent = TypedEvent<
  [],
  RequestCreateAuctionEventObject
>;

export type RequestCreateAuctionEventFilter =
  TypedEventFilter<RequestCreateAuctionEvent>;

export interface UnpausedEventObject {
  account: string;
}
export type UnpausedEvent = TypedEvent<[string], UnpausedEventObject>;

export type UnpausedEventFilter = TypedEventFilter<UnpausedEvent>;

export interface UpgradedEventObject {
  implementation: string;
}
export type UpgradedEvent = TypedEvent<[string], UpgradedEventObject>;

export type UpgradedEventFilter = TypedEventFilter<UpgradedEvent>;

export interface ETSAuctionHouseUpgrade extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ETSAuctionHouseUpgradeInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    MODULO(overrides?: CallOverrides): Promise<[BigNumber]>;

    NAME(overrides?: CallOverrides): Promise<[string]>;

    accrued(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    auctionEnded(
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    auctionExists(
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    auctionSettled(
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    auctions(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        string,
        string,
        boolean
      ] & {
        auctionId: BigNumber;
        amount: BigNumber;
        startTime: BigNumber;
        endTime: BigNumber;
        reservePrice: BigNumber;
        bidder: string;
        auctioneer: string;
        settled: boolean;
      }
    >;

    createBid(
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    createNextAuction(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    creatorPercentage(overrides?: CallOverrides): Promise<[BigNumber]>;

    drawDown(
      _account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    duration(overrides?: CallOverrides): Promise<[BigNumber]>;

    etsAccessControls(overrides?: CallOverrides): Promise<[string]>;

    etsToken(overrides?: CallOverrides): Promise<[string]>;

    fulfillRequestCreateAuction(
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getActiveCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    getAuction(
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[IETSAuctionHouse.AuctionStructOutput]>;

    getBalance(overrides?: CallOverrides): Promise<[BigNumber]>;

    getTotalCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    initialize(
      _etsToken: PromiseOrValue<string>,
      _etsAccessControls: PromiseOrValue<string>,
      _wmatic: PromiseOrValue<string>,
      _maxAuctions: PromiseOrValue<BigNumberish>,
      _timeBuffer: PromiseOrValue<BigNumberish>,
      _reservePrice: PromiseOrValue<BigNumberish>,
      _minBidIncrementPercentage: PromiseOrValue<BigNumberish>,
      _duration: PromiseOrValue<BigNumberish>,
      _relayerPercentage: PromiseOrValue<BigNumberish>,
      _platformPercentage: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    maxAuctions(overrides?: CallOverrides): Promise<[BigNumber]>;

    minBidIncrementPercentage(overrides?: CallOverrides): Promise<[number]>;

    paid(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    pause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    paused(overrides?: CallOverrides): Promise<[boolean]>;

    platformPercentage(overrides?: CallOverrides): Promise<[BigNumber]>;

    proxiableUUID(overrides?: CallOverrides): Promise<[string]>;

    relayerPercentage(overrides?: CallOverrides): Promise<[BigNumber]>;

    reservePrice(overrides?: CallOverrides): Promise<[BigNumber]>;

    setDuration(
      _duration: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setMaxAuctions(
      _maxAuctions: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setMinBidIncrementPercentage(
      _minBidIncrementPercentage: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setProceedPercentages(
      _platformPercentage: PromiseOrValue<BigNumberish>,
      _relayerPercentage: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setReservePrice(
      _reservePrice: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setTimeBuffer(
      _timeBuffer: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    settleAuction(
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    settleCurrentAndCreateNewAuction(
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    timeBuffer(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalDue(
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { _due: BigNumber }>;

    unpause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    upgradeTest(overrides?: CallOverrides): Promise<[boolean]>;

    upgradeTo(
      newImplementation: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    upgradeToAndCall(
      newImplementation: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    wmatic(overrides?: CallOverrides): Promise<[string]>;
  };

  MODULO(overrides?: CallOverrides): Promise<BigNumber>;

  NAME(overrides?: CallOverrides): Promise<string>;

  accrued(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  auctionEnded(
    _tokenId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  auctionExists(
    _tokenId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  auctionSettled(
    _tokenId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  auctions(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      string,
      string,
      boolean
    ] & {
      auctionId: BigNumber;
      amount: BigNumber;
      startTime: BigNumber;
      endTime: BigNumber;
      reservePrice: BigNumber;
      bidder: string;
      auctioneer: string;
      settled: boolean;
    }
  >;

  createBid(
    _tokenId: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  createNextAuction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  creatorPercentage(overrides?: CallOverrides): Promise<BigNumber>;

  drawDown(
    _account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  duration(overrides?: CallOverrides): Promise<BigNumber>;

  etsAccessControls(overrides?: CallOverrides): Promise<string>;

  etsToken(overrides?: CallOverrides): Promise<string>;

  fulfillRequestCreateAuction(
    _tokenId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getActiveCount(overrides?: CallOverrides): Promise<BigNumber>;

  getAuction(
    _tokenId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<IETSAuctionHouse.AuctionStructOutput>;

  getBalance(overrides?: CallOverrides): Promise<BigNumber>;

  getTotalCount(overrides?: CallOverrides): Promise<BigNumber>;

  initialize(
    _etsToken: PromiseOrValue<string>,
    _etsAccessControls: PromiseOrValue<string>,
    _wmatic: PromiseOrValue<string>,
    _maxAuctions: PromiseOrValue<BigNumberish>,
    _timeBuffer: PromiseOrValue<BigNumberish>,
    _reservePrice: PromiseOrValue<BigNumberish>,
    _minBidIncrementPercentage: PromiseOrValue<BigNumberish>,
    _duration: PromiseOrValue<BigNumberish>,
    _relayerPercentage: PromiseOrValue<BigNumberish>,
    _platformPercentage: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  maxAuctions(overrides?: CallOverrides): Promise<BigNumber>;

  minBidIncrementPercentage(overrides?: CallOverrides): Promise<number>;

  paid(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  pause(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  platformPercentage(overrides?: CallOverrides): Promise<BigNumber>;

  proxiableUUID(overrides?: CallOverrides): Promise<string>;

  relayerPercentage(overrides?: CallOverrides): Promise<BigNumber>;

  reservePrice(overrides?: CallOverrides): Promise<BigNumber>;

  setDuration(
    _duration: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setMaxAuctions(
    _maxAuctions: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setMinBidIncrementPercentage(
    _minBidIncrementPercentage: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setProceedPercentages(
    _platformPercentage: PromiseOrValue<BigNumberish>,
    _relayerPercentage: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setReservePrice(
    _reservePrice: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setTimeBuffer(
    _timeBuffer: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  settleAuction(
    _tokenId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  settleCurrentAndCreateNewAuction(
    _tokenId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  timeBuffer(overrides?: CallOverrides): Promise<BigNumber>;

  totalDue(
    _account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  unpause(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  upgradeTest(overrides?: CallOverrides): Promise<boolean>;

  upgradeTo(
    newImplementation: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  upgradeToAndCall(
    newImplementation: PromiseOrValue<string>,
    data: PromiseOrValue<BytesLike>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  wmatic(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    MODULO(overrides?: CallOverrides): Promise<BigNumber>;

    NAME(overrides?: CallOverrides): Promise<string>;

    accrued(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    auctionEnded(
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    auctionExists(
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    auctionSettled(
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    auctions(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        string,
        string,
        boolean
      ] & {
        auctionId: BigNumber;
        amount: BigNumber;
        startTime: BigNumber;
        endTime: BigNumber;
        reservePrice: BigNumber;
        bidder: string;
        auctioneer: string;
        settled: boolean;
      }
    >;

    createBid(
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    createNextAuction(overrides?: CallOverrides): Promise<void>;

    creatorPercentage(overrides?: CallOverrides): Promise<BigNumber>;

    drawDown(
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    duration(overrides?: CallOverrides): Promise<BigNumber>;

    etsAccessControls(overrides?: CallOverrides): Promise<string>;

    etsToken(overrides?: CallOverrides): Promise<string>;

    fulfillRequestCreateAuction(
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    getActiveCount(overrides?: CallOverrides): Promise<BigNumber>;

    getAuction(
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<IETSAuctionHouse.AuctionStructOutput>;

    getBalance(overrides?: CallOverrides): Promise<BigNumber>;

    getTotalCount(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      _etsToken: PromiseOrValue<string>,
      _etsAccessControls: PromiseOrValue<string>,
      _wmatic: PromiseOrValue<string>,
      _maxAuctions: PromiseOrValue<BigNumberish>,
      _timeBuffer: PromiseOrValue<BigNumberish>,
      _reservePrice: PromiseOrValue<BigNumberish>,
      _minBidIncrementPercentage: PromiseOrValue<BigNumberish>,
      _duration: PromiseOrValue<BigNumberish>,
      _relayerPercentage: PromiseOrValue<BigNumberish>,
      _platformPercentage: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    maxAuctions(overrides?: CallOverrides): Promise<BigNumber>;

    minBidIncrementPercentage(overrides?: CallOverrides): Promise<number>;

    paid(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    pause(overrides?: CallOverrides): Promise<void>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    platformPercentage(overrides?: CallOverrides): Promise<BigNumber>;

    proxiableUUID(overrides?: CallOverrides): Promise<string>;

    relayerPercentage(overrides?: CallOverrides): Promise<BigNumber>;

    reservePrice(overrides?: CallOverrides): Promise<BigNumber>;

    setDuration(
      _duration: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setMaxAuctions(
      _maxAuctions: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setMinBidIncrementPercentage(
      _minBidIncrementPercentage: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setProceedPercentages(
      _platformPercentage: PromiseOrValue<BigNumberish>,
      _relayerPercentage: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setReservePrice(
      _reservePrice: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setTimeBuffer(
      _timeBuffer: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    settleAuction(
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    settleCurrentAndCreateNewAuction(
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    timeBuffer(overrides?: CallOverrides): Promise<BigNumber>;

    totalDue(
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    unpause(overrides?: CallOverrides): Promise<void>;

    upgradeTest(overrides?: CallOverrides): Promise<boolean>;

    upgradeTo(
      newImplementation: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    upgradeToAndCall(
      newImplementation: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    wmatic(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "AdminChanged(address,address)"(
      previousAdmin?: null,
      newAdmin?: null
    ): AdminChangedEventFilter;
    AdminChanged(
      previousAdmin?: null,
      newAdmin?: null
    ): AdminChangedEventFilter;

    "AuctionBid(uint256,address,uint256,bool)"(
      tokenId?: PromiseOrValue<BigNumberish> | null,
      sender?: null,
      value?: null,
      extended?: null
    ): AuctionBidEventFilter;
    AuctionBid(
      tokenId?: PromiseOrValue<BigNumberish> | null,
      sender?: null,
      value?: null,
      extended?: null
    ): AuctionBidEventFilter;

    "AuctionCreated(uint256)"(
      tokenId?: PromiseOrValue<BigNumberish> | null
    ): AuctionCreatedEventFilter;
    AuctionCreated(
      tokenId?: PromiseOrValue<BigNumberish> | null
    ): AuctionCreatedEventFilter;

    "AuctionDurationSet(uint256)"(
      duration?: null
    ): AuctionDurationSetEventFilter;
    AuctionDurationSet(duration?: null): AuctionDurationSetEventFilter;

    "AuctionExtended(uint256,uint256)"(
      tokenId?: PromiseOrValue<BigNumberish> | null,
      endTime?: null
    ): AuctionExtendedEventFilter;
    AuctionExtended(
      tokenId?: PromiseOrValue<BigNumberish> | null,
      endTime?: null
    ): AuctionExtendedEventFilter;

    "AuctionMinBidIncrementPercentageSet(uint8)"(
      minBidIncrementPercentagePrice?: null
    ): AuctionMinBidIncrementPercentageSetEventFilter;
    AuctionMinBidIncrementPercentageSet(
      minBidIncrementPercentagePrice?: null
    ): AuctionMinBidIncrementPercentageSetEventFilter;

    "AuctionProceedPercentagesSet(uint256,uint256,uint256)"(
      platformPercentage?: null,
      relayerPercentage?: null,
      creatorPercentage?: null
    ): AuctionProceedPercentagesSetEventFilter;
    AuctionProceedPercentagesSet(
      platformPercentage?: null,
      relayerPercentage?: null,
      creatorPercentage?: null
    ): AuctionProceedPercentagesSetEventFilter;

    "AuctionProceedsWithdrawn(address,uint256)"(
      who?: PromiseOrValue<string> | null,
      amount?: null
    ): AuctionProceedsWithdrawnEventFilter;
    AuctionProceedsWithdrawn(
      who?: PromiseOrValue<string> | null,
      amount?: null
    ): AuctionProceedsWithdrawnEventFilter;

    "AuctionReservePriceSet(uint256)"(
      reservePrice?: null
    ): AuctionReservePriceSetEventFilter;
    AuctionReservePriceSet(
      reservePrice?: null
    ): AuctionReservePriceSetEventFilter;

    "AuctionSettled(uint256)"(
      tokenId?: PromiseOrValue<BigNumberish> | null
    ): AuctionSettledEventFilter;
    AuctionSettled(
      tokenId?: PromiseOrValue<BigNumberish> | null
    ): AuctionSettledEventFilter;

    "AuctionTimeBufferSet(uint256)"(
      timeBuffer?: null
    ): AuctionTimeBufferSetEventFilter;
    AuctionTimeBufferSet(timeBuffer?: null): AuctionTimeBufferSetEventFilter;

    "AuctionsMaxSet(uint256)"(maxAuctions?: null): AuctionsMaxSetEventFilter;
    AuctionsMaxSet(maxAuctions?: null): AuctionsMaxSetEventFilter;

    "BeaconUpgraded(address)"(
      beacon?: PromiseOrValue<string> | null
    ): BeaconUpgradedEventFilter;
    BeaconUpgraded(
      beacon?: PromiseOrValue<string> | null
    ): BeaconUpgradedEventFilter;

    "Initialized(uint8)"(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    "Paused(address)"(account?: null): PausedEventFilter;
    Paused(account?: null): PausedEventFilter;

    "RequestCreateAuction()"(): RequestCreateAuctionEventFilter;
    RequestCreateAuction(): RequestCreateAuctionEventFilter;

    "Unpaused(address)"(account?: null): UnpausedEventFilter;
    Unpaused(account?: null): UnpausedEventFilter;

    "Upgraded(address)"(
      implementation?: PromiseOrValue<string> | null
    ): UpgradedEventFilter;
    Upgraded(
      implementation?: PromiseOrValue<string> | null
    ): UpgradedEventFilter;
  };

  estimateGas: {
    MODULO(overrides?: CallOverrides): Promise<BigNumber>;

    NAME(overrides?: CallOverrides): Promise<BigNumber>;

    accrued(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    auctionEnded(
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    auctionExists(
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    auctionSettled(
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    auctions(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    createBid(
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    createNextAuction(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    creatorPercentage(overrides?: CallOverrides): Promise<BigNumber>;

    drawDown(
      _account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    duration(overrides?: CallOverrides): Promise<BigNumber>;

    etsAccessControls(overrides?: CallOverrides): Promise<BigNumber>;

    etsToken(overrides?: CallOverrides): Promise<BigNumber>;

    fulfillRequestCreateAuction(
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getActiveCount(overrides?: CallOverrides): Promise<BigNumber>;

    getAuction(
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getBalance(overrides?: CallOverrides): Promise<BigNumber>;

    getTotalCount(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      _etsToken: PromiseOrValue<string>,
      _etsAccessControls: PromiseOrValue<string>,
      _wmatic: PromiseOrValue<string>,
      _maxAuctions: PromiseOrValue<BigNumberish>,
      _timeBuffer: PromiseOrValue<BigNumberish>,
      _reservePrice: PromiseOrValue<BigNumberish>,
      _minBidIncrementPercentage: PromiseOrValue<BigNumberish>,
      _duration: PromiseOrValue<BigNumberish>,
      _relayerPercentage: PromiseOrValue<BigNumberish>,
      _platformPercentage: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    maxAuctions(overrides?: CallOverrides): Promise<BigNumber>;

    minBidIncrementPercentage(overrides?: CallOverrides): Promise<BigNumber>;

    paid(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    pause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    platformPercentage(overrides?: CallOverrides): Promise<BigNumber>;

    proxiableUUID(overrides?: CallOverrides): Promise<BigNumber>;

    relayerPercentage(overrides?: CallOverrides): Promise<BigNumber>;

    reservePrice(overrides?: CallOverrides): Promise<BigNumber>;

    setDuration(
      _duration: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setMaxAuctions(
      _maxAuctions: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setMinBidIncrementPercentage(
      _minBidIncrementPercentage: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setProceedPercentages(
      _platformPercentage: PromiseOrValue<BigNumberish>,
      _relayerPercentage: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setReservePrice(
      _reservePrice: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setTimeBuffer(
      _timeBuffer: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    settleAuction(
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    settleCurrentAndCreateNewAuction(
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    timeBuffer(overrides?: CallOverrides): Promise<BigNumber>;

    totalDue(
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    unpause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    upgradeTest(overrides?: CallOverrides): Promise<BigNumber>;

    upgradeTo(
      newImplementation: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    upgradeToAndCall(
      newImplementation: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    wmatic(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    MODULO(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    NAME(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    accrued(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    auctionEnded(
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    auctionExists(
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    auctionSettled(
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    auctions(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    createBid(
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    createNextAuction(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    creatorPercentage(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    drawDown(
      _account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    duration(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    etsAccessControls(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    etsToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    fulfillRequestCreateAuction(
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getActiveCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getAuction(
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getBalance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getTotalCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    initialize(
      _etsToken: PromiseOrValue<string>,
      _etsAccessControls: PromiseOrValue<string>,
      _wmatic: PromiseOrValue<string>,
      _maxAuctions: PromiseOrValue<BigNumberish>,
      _timeBuffer: PromiseOrValue<BigNumberish>,
      _reservePrice: PromiseOrValue<BigNumberish>,
      _minBidIncrementPercentage: PromiseOrValue<BigNumberish>,
      _duration: PromiseOrValue<BigNumberish>,
      _relayerPercentage: PromiseOrValue<BigNumberish>,
      _platformPercentage: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    maxAuctions(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    minBidIncrementPercentage(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    paid(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    pause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    platformPercentage(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    proxiableUUID(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    relayerPercentage(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    reservePrice(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setDuration(
      _duration: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setMaxAuctions(
      _maxAuctions: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setMinBidIncrementPercentage(
      _minBidIncrementPercentage: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setProceedPercentages(
      _platformPercentage: PromiseOrValue<BigNumberish>,
      _relayerPercentage: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setReservePrice(
      _reservePrice: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setTimeBuffer(
      _timeBuffer: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    settleAuction(
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    settleCurrentAndCreateNewAuction(
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    timeBuffer(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalDue(
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    unpause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    upgradeTest(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    upgradeTo(
      newImplementation: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    upgradeToAndCall(
      newImplementation: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    wmatic(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
