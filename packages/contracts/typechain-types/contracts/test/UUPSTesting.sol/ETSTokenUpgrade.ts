/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../common";

export declare namespace IETSToken {
  export type TagStruct = {
    relayer: PromiseOrValue<string>;
    creator: PromiseOrValue<string>;
    display: PromiseOrValue<string>;
    premium: PromiseOrValue<boolean>;
    reserved: PromiseOrValue<boolean>;
  };

  export type TagStructOutput = [string, string, string, boolean, boolean] & {
    relayer: string;
    creator: string;
    display: string;
    premium: boolean;
    reserved: boolean;
  };
}

export interface ETSTokenUpgradeInterface extends utils.Interface {
  functions: {
    "NAME()": FunctionFragment;
    "approve(address,uint256)": FunctionFragment;
    "balanceOf(address)": FunctionFragment;
    "burn(uint256)": FunctionFragment;
    "computeTagId(string)": FunctionFragment;
    "createTag(string,address,address)": FunctionFragment;
    "ets()": FunctionFragment;
    "etsAccessControls()": FunctionFragment;
    "getApproved(uint256)": FunctionFragment;
    "getCreatorAddress(uint256)": FunctionFragment;
    "getLastRenewed(uint256)": FunctionFragment;
    "getOrCreateTag(string,address,address)": FunctionFragment;
    "getOrCreateTagId(string,address,address)": FunctionFragment;
    "getOwnershipTermLength()": FunctionFragment;
    "getPlatformAddress()": FunctionFragment;
    "getTagById(uint256)": FunctionFragment;
    "getTagByString(string)": FunctionFragment;
    "initialize(address,uint256,uint256,uint256)": FunctionFragment;
    "isApprovedForAll(address,address)": FunctionFragment;
    "isTagPremium(string)": FunctionFragment;
    "name()": FunctionFragment;
    "ownerOf(uint256)": FunctionFragment;
    "ownershipTermLength()": FunctionFragment;
    "pause()": FunctionFragment;
    "paused()": FunctionFragment;
    "preSetPremiumTags(string[],bool)": FunctionFragment;
    "proxiableUUID()": FunctionFragment;
    "recycleTag(uint256)": FunctionFragment;
    "renewTag(uint256)": FunctionFragment;
    "safeTransferFrom(address,address,uint256)": FunctionFragment;
    "safeTransferFrom(address,address,uint256,bytes)": FunctionFragment;
    "setAccessControls(address)": FunctionFragment;
    "setApprovalForAll(address,bool)": FunctionFragment;
    "setETSCore(address)": FunctionFragment;
    "setOwnershipTermLength(uint256)": FunctionFragment;
    "setPremiumFlag(uint256[],bool)": FunctionFragment;
    "setReservedFlag(uint256[],bool)": FunctionFragment;
    "setTagMaxStringLength(uint256)": FunctionFragment;
    "setTagMinStringLength(uint256)": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "symbol()": FunctionFragment;
    "tagExistsById(uint256)": FunctionFragment;
    "tagExistsByString(string)": FunctionFragment;
    "tagMaxStringLength()": FunctionFragment;
    "tagMinStringLength()": FunctionFragment;
    "tokenIdToLastRenewed(uint256)": FunctionFragment;
    "tokenIdToTag(uint256)": FunctionFragment;
    "tokenURI(uint256)": FunctionFragment;
    "transferFrom(address,address,uint256)": FunctionFragment;
    "unPause()": FunctionFragment;
    "upgradeTest()": FunctionFragment;
    "upgradeTo(address)": FunctionFragment;
    "upgradeToAndCall(address,bytes)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "NAME"
      | "approve"
      | "balanceOf"
      | "burn"
      | "computeTagId"
      | "createTag"
      | "ets"
      | "etsAccessControls"
      | "getApproved"
      | "getCreatorAddress"
      | "getLastRenewed"
      | "getOrCreateTag"
      | "getOrCreateTagId"
      | "getOwnershipTermLength"
      | "getPlatformAddress"
      | "getTagById"
      | "getTagByString"
      | "initialize"
      | "isApprovedForAll"
      | "isTagPremium"
      | "name"
      | "ownerOf"
      | "ownershipTermLength"
      | "pause"
      | "paused"
      | "preSetPremiumTags"
      | "proxiableUUID"
      | "recycleTag"
      | "renewTag"
      | "safeTransferFrom(address,address,uint256)"
      | "safeTransferFrom(address,address,uint256,bytes)"
      | "setAccessControls"
      | "setApprovalForAll"
      | "setETSCore"
      | "setOwnershipTermLength"
      | "setPremiumFlag"
      | "setReservedFlag"
      | "setTagMaxStringLength"
      | "setTagMinStringLength"
      | "supportsInterface"
      | "symbol"
      | "tagExistsById"
      | "tagExistsByString"
      | "tagMaxStringLength"
      | "tagMinStringLength"
      | "tokenIdToLastRenewed"
      | "tokenIdToTag"
      | "tokenURI"
      | "transferFrom"
      | "unPause"
      | "upgradeTest"
      | "upgradeTo"
      | "upgradeToAndCall"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "NAME", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOf",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "burn",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "computeTagId",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "createTag",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(functionFragment: "ets", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "etsAccessControls",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getApproved",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getCreatorAddress",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getLastRenewed",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getOrCreateTag",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getOrCreateTagId",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getOwnershipTermLength",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPlatformAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTagById",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getTagByString",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "isApprovedForAll",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "isTagPremium",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "ownerOf",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "ownershipTermLength",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "preSetPremiumTags",
    values: [PromiseOrValue<string>[], PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "proxiableUUID",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "recycleTag",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "renewTag",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "safeTransferFrom(address,address,uint256)",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "safeTransferFrom(address,address,uint256,bytes)",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setAccessControls",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setApprovalForAll",
    values: [PromiseOrValue<string>, PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "setETSCore",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setOwnershipTermLength",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setPremiumFlag",
    values: [PromiseOrValue<BigNumberish>[], PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "setReservedFlag",
    values: [PromiseOrValue<BigNumberish>[], PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "setTagMaxStringLength",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setTagMinStringLength",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "tagExistsById",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "tagExistsByString",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "tagMaxStringLength",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "tagMinStringLength",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "tokenIdToLastRenewed",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenIdToTag",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenURI",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(functionFragment: "unPause", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "upgradeTest",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "upgradeTo",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "upgradeToAndCall",
    values: [PromiseOrValue<string>, PromiseOrValue<BytesLike>]
  ): string;

  decodeFunctionResult(functionFragment: "NAME", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "burn", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "computeTagId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "createTag", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ets", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "etsAccessControls",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getApproved",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCreatorAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLastRenewed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOrCreateTag",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOrCreateTagId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOwnershipTermLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPlatformAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getTagById", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getTagByString",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isApprovedForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isTagPremium",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ownerOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "ownershipTermLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "preSetPremiumTags",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proxiableUUID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "recycleTag", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "renewTag", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "safeTransferFrom(address,address,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "safeTransferFrom(address,address,uint256,bytes)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAccessControls",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setApprovalForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setETSCore", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setOwnershipTermLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPremiumFlag",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setReservedFlag",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTagMaxStringLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTagMinStringLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "tagExistsById",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tagExistsByString",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tagMaxStringLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tagMinStringLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenIdToLastRenewed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenIdToTag",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "tokenURI", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unPause", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "upgradeTest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "upgradeTo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "upgradeToAndCall",
    data: BytesLike
  ): Result;

  events: {
    "AccessControlsSet(address)": EventFragment;
    "AdminChanged(address,address)": EventFragment;
    "Approval(address,address,uint256)": EventFragment;
    "ApprovalForAll(address,address,bool)": EventFragment;
    "BeaconUpgraded(address)": EventFragment;
    "ETSCoreSet(address)": EventFragment;
    "Initialized(uint8)": EventFragment;
    "OwnershipTermLengthSet(uint256)": EventFragment;
    "Paused(address)": EventFragment;
    "PremiumFlagSet(uint256,bool)": EventFragment;
    "PremiumTagPreSet(string,bool)": EventFragment;
    "ReservedFlagSet(uint256,bool)": EventFragment;
    "TagMaxStringLengthSet(uint256)": EventFragment;
    "TagMinStringLengthSet(uint256)": EventFragment;
    "TagRecycled(uint256,address)": EventFragment;
    "TagRenewed(uint256,address)": EventFragment;
    "Transfer(address,address,uint256)": EventFragment;
    "Unpaused(address)": EventFragment;
    "Upgraded(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AccessControlsSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Approval"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ApprovalForAll"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BeaconUpgraded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ETSCoreSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTermLengthSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Paused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PremiumFlagSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PremiumTagPreSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ReservedFlagSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TagMaxStringLengthSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TagMinStringLengthSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TagRecycled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TagRenewed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unpaused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Upgraded"): EventFragment;
}

export interface AccessControlsSetEventObject {
  etsAccessControls: string;
}
export type AccessControlsSetEvent = TypedEvent<
  [string],
  AccessControlsSetEventObject
>;

export type AccessControlsSetEventFilter =
  TypedEventFilter<AccessControlsSetEvent>;

export interface AdminChangedEventObject {
  previousAdmin: string;
  newAdmin: string;
}
export type AdminChangedEvent = TypedEvent<
  [string, string],
  AdminChangedEventObject
>;

export type AdminChangedEventFilter = TypedEventFilter<AdminChangedEvent>;

export interface ApprovalEventObject {
  owner: string;
  approved: string;
  tokenId: BigNumber;
}
export type ApprovalEvent = TypedEvent<
  [string, string, BigNumber],
  ApprovalEventObject
>;

export type ApprovalEventFilter = TypedEventFilter<ApprovalEvent>;

export interface ApprovalForAllEventObject {
  owner: string;
  operator: string;
  approved: boolean;
}
export type ApprovalForAllEvent = TypedEvent<
  [string, string, boolean],
  ApprovalForAllEventObject
>;

export type ApprovalForAllEventFilter = TypedEventFilter<ApprovalForAllEvent>;

export interface BeaconUpgradedEventObject {
  beacon: string;
}
export type BeaconUpgradedEvent = TypedEvent<
  [string],
  BeaconUpgradedEventObject
>;

export type BeaconUpgradedEventFilter = TypedEventFilter<BeaconUpgradedEvent>;

export interface ETSCoreSetEventObject {
  ets: string;
}
export type ETSCoreSetEvent = TypedEvent<[string], ETSCoreSetEventObject>;

export type ETSCoreSetEventFilter = TypedEventFilter<ETSCoreSetEvent>;

export interface InitializedEventObject {
  version: number;
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface OwnershipTermLengthSetEventObject {
  termLength: BigNumber;
}
export type OwnershipTermLengthSetEvent = TypedEvent<
  [BigNumber],
  OwnershipTermLengthSetEventObject
>;

export type OwnershipTermLengthSetEventFilter =
  TypedEventFilter<OwnershipTermLengthSetEvent>;

export interface PausedEventObject {
  account: string;
}
export type PausedEvent = TypedEvent<[string], PausedEventObject>;

export type PausedEventFilter = TypedEventFilter<PausedEvent>;

export interface PremiumFlagSetEventObject {
  tagId: BigNumber;
  isPremium: boolean;
}
export type PremiumFlagSetEvent = TypedEvent<
  [BigNumber, boolean],
  PremiumFlagSetEventObject
>;

export type PremiumFlagSetEventFilter = TypedEventFilter<PremiumFlagSetEvent>;

export interface PremiumTagPreSetEventObject {
  tag: string;
  isPremium: boolean;
}
export type PremiumTagPreSetEvent = TypedEvent<
  [string, boolean],
  PremiumTagPreSetEventObject
>;

export type PremiumTagPreSetEventFilter =
  TypedEventFilter<PremiumTagPreSetEvent>;

export interface ReservedFlagSetEventObject {
  tagId: BigNumber;
  isReserved: boolean;
}
export type ReservedFlagSetEvent = TypedEvent<
  [BigNumber, boolean],
  ReservedFlagSetEventObject
>;

export type ReservedFlagSetEventFilter = TypedEventFilter<ReservedFlagSetEvent>;

export interface TagMaxStringLengthSetEventObject {
  maxStringLength: BigNumber;
}
export type TagMaxStringLengthSetEvent = TypedEvent<
  [BigNumber],
  TagMaxStringLengthSetEventObject
>;

export type TagMaxStringLengthSetEventFilter =
  TypedEventFilter<TagMaxStringLengthSetEvent>;

export interface TagMinStringLengthSetEventObject {
  minStringLength: BigNumber;
}
export type TagMinStringLengthSetEvent = TypedEvent<
  [BigNumber],
  TagMinStringLengthSetEventObject
>;

export type TagMinStringLengthSetEventFilter =
  TypedEventFilter<TagMinStringLengthSetEvent>;

export interface TagRecycledEventObject {
  tokenId: BigNumber;
  caller: string;
}
export type TagRecycledEvent = TypedEvent<
  [BigNumber, string],
  TagRecycledEventObject
>;

export type TagRecycledEventFilter = TypedEventFilter<TagRecycledEvent>;

export interface TagRenewedEventObject {
  tokenId: BigNumber;
  caller: string;
}
export type TagRenewedEvent = TypedEvent<
  [BigNumber, string],
  TagRenewedEventObject
>;

export type TagRenewedEventFilter = TypedEventFilter<TagRenewedEvent>;

export interface TransferEventObject {
  from: string;
  to: string;
  tokenId: BigNumber;
}
export type TransferEvent = TypedEvent<
  [string, string, BigNumber],
  TransferEventObject
>;

export type TransferEventFilter = TypedEventFilter<TransferEvent>;

export interface UnpausedEventObject {
  account: string;
}
export type UnpausedEvent = TypedEvent<[string], UnpausedEventObject>;

export type UnpausedEventFilter = TypedEventFilter<UnpausedEvent>;

export interface UpgradedEventObject {
  implementation: string;
}
export type UpgradedEvent = TypedEvent<[string], UpgradedEventObject>;

export type UpgradedEventFilter = TypedEventFilter<UpgradedEvent>;

export interface ETSTokenUpgrade extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ETSTokenUpgradeInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    NAME(overrides?: CallOverrides): Promise<[string]>;

    approve(
      to: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    balanceOf(
      owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    burn(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    computeTagId(
      _tag: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    createTag(
      _tag: PromiseOrValue<string>,
      _relayer: PromiseOrValue<string>,
      _creator: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    ets(overrides?: CallOverrides): Promise<[string]>;

    etsAccessControls(overrides?: CallOverrides): Promise<[string]>;

    getApproved(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getCreatorAddress(
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getLastRenewed(
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getOrCreateTag(
      _tag: PromiseOrValue<string>,
      _relayer: PromiseOrValue<string>,
      _creator: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getOrCreateTagId(
      _tag: PromiseOrValue<string>,
      _relayer: PromiseOrValue<string>,
      _creator: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getOwnershipTermLength(overrides?: CallOverrides): Promise<[BigNumber]>;

    getPlatformAddress(overrides?: CallOverrides): Promise<[string]>;

    getTagById(
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[IETSToken.TagStructOutput]>;

    getTagByString(
      _tag: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[IETSToken.TagStructOutput]>;

    initialize(
      _etsAccessControls: PromiseOrValue<string>,
      _tagMinStringLength: PromiseOrValue<BigNumberish>,
      _tagMaxStringLength: PromiseOrValue<BigNumberish>,
      _ownershipTermLength: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    isApprovedForAll(
      owner: PromiseOrValue<string>,
      operator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isTagPremium(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    name(overrides?: CallOverrides): Promise<[string]>;

    ownerOf(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    ownershipTermLength(overrides?: CallOverrides): Promise<[BigNumber]>;

    pause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    paused(overrides?: CallOverrides): Promise<[boolean]>;

    preSetPremiumTags(
      _tags: PromiseOrValue<string>[],
      _enabled: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    proxiableUUID(overrides?: CallOverrides): Promise<[string]>;

    recycleTag(
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    renewTag(
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "safeTransferFrom(address,address,uint256)"(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setAccessControls(
      _accessControls: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setApprovalForAll(
      operator: PromiseOrValue<string>,
      approved: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setETSCore(
      _ets: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setOwnershipTermLength(
      _ownershipTermLength: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setPremiumFlag(
      _tokenIds: PromiseOrValue<BigNumberish>[],
      _isPremium: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setReservedFlag(
      _tokenIds: PromiseOrValue<BigNumberish>[],
      _reserved: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setTagMaxStringLength(
      _tagMaxStringLength: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setTagMinStringLength(
      _tagMinStringLength: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    symbol(overrides?: CallOverrides): Promise<[string]>;

    tagExistsById(
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    tagExistsByString(
      _tag: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    tagMaxStringLength(overrides?: CallOverrides): Promise<[BigNumber]>;

    tagMinStringLength(overrides?: CallOverrides): Promise<[BigNumber]>;

    tokenIdToLastRenewed(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    tokenIdToTag(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [string, string, string, boolean, boolean] & {
        relayer: string;
        creator: string;
        display: string;
        premium: boolean;
        reserved: boolean;
      }
    >;

    tokenURI(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    transferFrom(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    unPause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    upgradeTest(overrides?: CallOverrides): Promise<[boolean]>;

    upgradeTo(
      newImplementation: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    upgradeToAndCall(
      newImplementation: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  NAME(overrides?: CallOverrides): Promise<string>;

  approve(
    to: PromiseOrValue<string>,
    tokenId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  balanceOf(
    owner: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  burn(
    tokenId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  computeTagId(
    _tag: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  createTag(
    _tag: PromiseOrValue<string>,
    _relayer: PromiseOrValue<string>,
    _creator: PromiseOrValue<string>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  ets(overrides?: CallOverrides): Promise<string>;

  etsAccessControls(overrides?: CallOverrides): Promise<string>;

  getApproved(
    tokenId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  getCreatorAddress(
    _tokenId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  getLastRenewed(
    _tokenId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getOrCreateTag(
    _tag: PromiseOrValue<string>,
    _relayer: PromiseOrValue<string>,
    _creator: PromiseOrValue<string>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getOrCreateTagId(
    _tag: PromiseOrValue<string>,
    _relayer: PromiseOrValue<string>,
    _creator: PromiseOrValue<string>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getOwnershipTermLength(overrides?: CallOverrides): Promise<BigNumber>;

  getPlatformAddress(overrides?: CallOverrides): Promise<string>;

  getTagById(
    _tokenId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<IETSToken.TagStructOutput>;

  getTagByString(
    _tag: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<IETSToken.TagStructOutput>;

  initialize(
    _etsAccessControls: PromiseOrValue<string>,
    _tagMinStringLength: PromiseOrValue<BigNumberish>,
    _tagMaxStringLength: PromiseOrValue<BigNumberish>,
    _ownershipTermLength: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  isApprovedForAll(
    owner: PromiseOrValue<string>,
    operator: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isTagPremium(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  name(overrides?: CallOverrides): Promise<string>;

  ownerOf(
    tokenId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  ownershipTermLength(overrides?: CallOverrides): Promise<BigNumber>;

  pause(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  preSetPremiumTags(
    _tags: PromiseOrValue<string>[],
    _enabled: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  proxiableUUID(overrides?: CallOverrides): Promise<string>;

  recycleTag(
    _tokenId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  renewTag(
    _tokenId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "safeTransferFrom(address,address,uint256)"(
    from: PromiseOrValue<string>,
    to: PromiseOrValue<string>,
    tokenId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "safeTransferFrom(address,address,uint256,bytes)"(
    from: PromiseOrValue<string>,
    to: PromiseOrValue<string>,
    tokenId: PromiseOrValue<BigNumberish>,
    data: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setAccessControls(
    _accessControls: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setApprovalForAll(
    operator: PromiseOrValue<string>,
    approved: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setETSCore(
    _ets: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setOwnershipTermLength(
    _ownershipTermLength: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setPremiumFlag(
    _tokenIds: PromiseOrValue<BigNumberish>[],
    _isPremium: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setReservedFlag(
    _tokenIds: PromiseOrValue<BigNumberish>[],
    _reserved: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setTagMaxStringLength(
    _tagMaxStringLength: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setTagMinStringLength(
    _tagMinStringLength: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  supportsInterface(
    interfaceId: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  symbol(overrides?: CallOverrides): Promise<string>;

  tagExistsById(
    _tokenId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  tagExistsByString(
    _tag: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  tagMaxStringLength(overrides?: CallOverrides): Promise<BigNumber>;

  tagMinStringLength(overrides?: CallOverrides): Promise<BigNumber>;

  tokenIdToLastRenewed(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  tokenIdToTag(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [string, string, string, boolean, boolean] & {
      relayer: string;
      creator: string;
      display: string;
      premium: boolean;
      reserved: boolean;
    }
  >;

  tokenURI(
    tokenId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  transferFrom(
    from: PromiseOrValue<string>,
    to: PromiseOrValue<string>,
    tokenId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  unPause(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  upgradeTest(overrides?: CallOverrides): Promise<boolean>;

  upgradeTo(
    newImplementation: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  upgradeToAndCall(
    newImplementation: PromiseOrValue<string>,
    data: PromiseOrValue<BytesLike>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    NAME(overrides?: CallOverrides): Promise<string>;

    approve(
      to: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    balanceOf(
      owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    burn(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    computeTagId(
      _tag: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    createTag(
      _tag: PromiseOrValue<string>,
      _relayer: PromiseOrValue<string>,
      _creator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    ets(overrides?: CallOverrides): Promise<string>;

    etsAccessControls(overrides?: CallOverrides): Promise<string>;

    getApproved(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    getCreatorAddress(
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    getLastRenewed(
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getOrCreateTag(
      _tag: PromiseOrValue<string>,
      _relayer: PromiseOrValue<string>,
      _creator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<IETSToken.TagStructOutput>;

    getOrCreateTagId(
      _tag: PromiseOrValue<string>,
      _relayer: PromiseOrValue<string>,
      _creator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getOwnershipTermLength(overrides?: CallOverrides): Promise<BigNumber>;

    getPlatformAddress(overrides?: CallOverrides): Promise<string>;

    getTagById(
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<IETSToken.TagStructOutput>;

    getTagByString(
      _tag: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<IETSToken.TagStructOutput>;

    initialize(
      _etsAccessControls: PromiseOrValue<string>,
      _tagMinStringLength: PromiseOrValue<BigNumberish>,
      _tagMaxStringLength: PromiseOrValue<BigNumberish>,
      _ownershipTermLength: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    isApprovedForAll(
      owner: PromiseOrValue<string>,
      operator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isTagPremium(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    name(overrides?: CallOverrides): Promise<string>;

    ownerOf(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    ownershipTermLength(overrides?: CallOverrides): Promise<BigNumber>;

    pause(overrides?: CallOverrides): Promise<void>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    preSetPremiumTags(
      _tags: PromiseOrValue<string>[],
      _enabled: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    proxiableUUID(overrides?: CallOverrides): Promise<string>;

    recycleTag(
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    renewTag(
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    "safeTransferFrom(address,address,uint256)"(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    setAccessControls(
      _accessControls: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setApprovalForAll(
      operator: PromiseOrValue<string>,
      approved: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    setETSCore(
      _ets: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setOwnershipTermLength(
      _ownershipTermLength: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setPremiumFlag(
      _tokenIds: PromiseOrValue<BigNumberish>[],
      _isPremium: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    setReservedFlag(
      _tokenIds: PromiseOrValue<BigNumberish>[],
      _reserved: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    setTagMaxStringLength(
      _tagMaxStringLength: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setTagMinStringLength(
      _tagMinStringLength: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    symbol(overrides?: CallOverrides): Promise<string>;

    tagExistsById(
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    tagExistsByString(
      _tag: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    tagMaxStringLength(overrides?: CallOverrides): Promise<BigNumber>;

    tagMinStringLength(overrides?: CallOverrides): Promise<BigNumber>;

    tokenIdToLastRenewed(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenIdToTag(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [string, string, string, boolean, boolean] & {
        relayer: string;
        creator: string;
        display: string;
        premium: boolean;
        reserved: boolean;
      }
    >;

    tokenURI(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    transferFrom(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    unPause(overrides?: CallOverrides): Promise<void>;

    upgradeTest(overrides?: CallOverrides): Promise<boolean>;

    upgradeTo(
      newImplementation: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    upgradeToAndCall(
      newImplementation: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "AccessControlsSet(address)"(
      etsAccessControls?: null
    ): AccessControlsSetEventFilter;
    AccessControlsSet(etsAccessControls?: null): AccessControlsSetEventFilter;

    "AdminChanged(address,address)"(
      previousAdmin?: null,
      newAdmin?: null
    ): AdminChangedEventFilter;
    AdminChanged(
      previousAdmin?: null,
      newAdmin?: null
    ): AdminChangedEventFilter;

    "Approval(address,address,uint256)"(
      owner?: PromiseOrValue<string> | null,
      approved?: PromiseOrValue<string> | null,
      tokenId?: PromiseOrValue<BigNumberish> | null
    ): ApprovalEventFilter;
    Approval(
      owner?: PromiseOrValue<string> | null,
      approved?: PromiseOrValue<string> | null,
      tokenId?: PromiseOrValue<BigNumberish> | null
    ): ApprovalEventFilter;

    "ApprovalForAll(address,address,bool)"(
      owner?: PromiseOrValue<string> | null,
      operator?: PromiseOrValue<string> | null,
      approved?: null
    ): ApprovalForAllEventFilter;
    ApprovalForAll(
      owner?: PromiseOrValue<string> | null,
      operator?: PromiseOrValue<string> | null,
      approved?: null
    ): ApprovalForAllEventFilter;

    "BeaconUpgraded(address)"(
      beacon?: PromiseOrValue<string> | null
    ): BeaconUpgradedEventFilter;
    BeaconUpgraded(
      beacon?: PromiseOrValue<string> | null
    ): BeaconUpgradedEventFilter;

    "ETSCoreSet(address)"(ets?: null): ETSCoreSetEventFilter;
    ETSCoreSet(ets?: null): ETSCoreSetEventFilter;

    "Initialized(uint8)"(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    "OwnershipTermLengthSet(uint256)"(
      termLength?: null
    ): OwnershipTermLengthSetEventFilter;
    OwnershipTermLengthSet(
      termLength?: null
    ): OwnershipTermLengthSetEventFilter;

    "Paused(address)"(account?: null): PausedEventFilter;
    Paused(account?: null): PausedEventFilter;

    "PremiumFlagSet(uint256,bool)"(
      tagId?: null,
      isPremium?: null
    ): PremiumFlagSetEventFilter;
    PremiumFlagSet(tagId?: null, isPremium?: null): PremiumFlagSetEventFilter;

    "PremiumTagPreSet(string,bool)"(
      tag?: null,
      isPremium?: null
    ): PremiumTagPreSetEventFilter;
    PremiumTagPreSet(tag?: null, isPremium?: null): PremiumTagPreSetEventFilter;

    "ReservedFlagSet(uint256,bool)"(
      tagId?: null,
      isReserved?: null
    ): ReservedFlagSetEventFilter;
    ReservedFlagSet(
      tagId?: null,
      isReserved?: null
    ): ReservedFlagSetEventFilter;

    "TagMaxStringLengthSet(uint256)"(
      maxStringLength?: null
    ): TagMaxStringLengthSetEventFilter;
    TagMaxStringLengthSet(
      maxStringLength?: null
    ): TagMaxStringLengthSetEventFilter;

    "TagMinStringLengthSet(uint256)"(
      minStringLength?: null
    ): TagMinStringLengthSetEventFilter;
    TagMinStringLengthSet(
      minStringLength?: null
    ): TagMinStringLengthSetEventFilter;

    "TagRecycled(uint256,address)"(
      tokenId?: PromiseOrValue<BigNumberish> | null,
      caller?: PromiseOrValue<string> | null
    ): TagRecycledEventFilter;
    TagRecycled(
      tokenId?: PromiseOrValue<BigNumberish> | null,
      caller?: PromiseOrValue<string> | null
    ): TagRecycledEventFilter;

    "TagRenewed(uint256,address)"(
      tokenId?: PromiseOrValue<BigNumberish> | null,
      caller?: PromiseOrValue<string> | null
    ): TagRenewedEventFilter;
    TagRenewed(
      tokenId?: PromiseOrValue<BigNumberish> | null,
      caller?: PromiseOrValue<string> | null
    ): TagRenewedEventFilter;

    "Transfer(address,address,uint256)"(
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      tokenId?: PromiseOrValue<BigNumberish> | null
    ): TransferEventFilter;
    Transfer(
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      tokenId?: PromiseOrValue<BigNumberish> | null
    ): TransferEventFilter;

    "Unpaused(address)"(account?: null): UnpausedEventFilter;
    Unpaused(account?: null): UnpausedEventFilter;

    "Upgraded(address)"(
      implementation?: PromiseOrValue<string> | null
    ): UpgradedEventFilter;
    Upgraded(
      implementation?: PromiseOrValue<string> | null
    ): UpgradedEventFilter;
  };

  estimateGas: {
    NAME(overrides?: CallOverrides): Promise<BigNumber>;

    approve(
      to: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    balanceOf(
      owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    burn(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    computeTagId(
      _tag: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    createTag(
      _tag: PromiseOrValue<string>,
      _relayer: PromiseOrValue<string>,
      _creator: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    ets(overrides?: CallOverrides): Promise<BigNumber>;

    etsAccessControls(overrides?: CallOverrides): Promise<BigNumber>;

    getApproved(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCreatorAddress(
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getLastRenewed(
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getOrCreateTag(
      _tag: PromiseOrValue<string>,
      _relayer: PromiseOrValue<string>,
      _creator: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getOrCreateTagId(
      _tag: PromiseOrValue<string>,
      _relayer: PromiseOrValue<string>,
      _creator: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getOwnershipTermLength(overrides?: CallOverrides): Promise<BigNumber>;

    getPlatformAddress(overrides?: CallOverrides): Promise<BigNumber>;

    getTagById(
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTagByString(
      _tag: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      _etsAccessControls: PromiseOrValue<string>,
      _tagMinStringLength: PromiseOrValue<BigNumberish>,
      _tagMaxStringLength: PromiseOrValue<BigNumberish>,
      _ownershipTermLength: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    isApprovedForAll(
      owner: PromiseOrValue<string>,
      operator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isTagPremium(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    ownerOf(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    ownershipTermLength(overrides?: CallOverrides): Promise<BigNumber>;

    pause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    preSetPremiumTags(
      _tags: PromiseOrValue<string>[],
      _enabled: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    proxiableUUID(overrides?: CallOverrides): Promise<BigNumber>;

    recycleTag(
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    renewTag(
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "safeTransferFrom(address,address,uint256)"(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setAccessControls(
      _accessControls: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setApprovalForAll(
      operator: PromiseOrValue<string>,
      approved: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setETSCore(
      _ets: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setOwnershipTermLength(
      _ownershipTermLength: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setPremiumFlag(
      _tokenIds: PromiseOrValue<BigNumberish>[],
      _isPremium: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setReservedFlag(
      _tokenIds: PromiseOrValue<BigNumberish>[],
      _reserved: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setTagMaxStringLength(
      _tagMaxStringLength: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setTagMinStringLength(
      _tagMinStringLength: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    tagExistsById(
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tagExistsByString(
      _tag: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tagMaxStringLength(overrides?: CallOverrides): Promise<BigNumber>;

    tagMinStringLength(overrides?: CallOverrides): Promise<BigNumber>;

    tokenIdToLastRenewed(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenIdToTag(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenURI(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferFrom(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    unPause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    upgradeTest(overrides?: CallOverrides): Promise<BigNumber>;

    upgradeTo(
      newImplementation: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    upgradeToAndCall(
      newImplementation: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    NAME(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    approve(
      to: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    balanceOf(
      owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    burn(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    computeTagId(
      _tag: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    createTag(
      _tag: PromiseOrValue<string>,
      _relayer: PromiseOrValue<string>,
      _creator: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    ets(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    etsAccessControls(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getApproved(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCreatorAddress(
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getLastRenewed(
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getOrCreateTag(
      _tag: PromiseOrValue<string>,
      _relayer: PromiseOrValue<string>,
      _creator: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getOrCreateTagId(
      _tag: PromiseOrValue<string>,
      _relayer: PromiseOrValue<string>,
      _creator: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getOwnershipTermLength(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPlatformAddress(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTagById(
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTagByString(
      _tag: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      _etsAccessControls: PromiseOrValue<string>,
      _tagMinStringLength: PromiseOrValue<BigNumberish>,
      _tagMaxStringLength: PromiseOrValue<BigNumberish>,
      _ownershipTermLength: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    isApprovedForAll(
      owner: PromiseOrValue<string>,
      operator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isTagPremium(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ownerOf(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    ownershipTermLength(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    pause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    preSetPremiumTags(
      _tags: PromiseOrValue<string>[],
      _enabled: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    proxiableUUID(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    recycleTag(
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    renewTag(
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "safeTransferFrom(address,address,uint256)"(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setAccessControls(
      _accessControls: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setApprovalForAll(
      operator: PromiseOrValue<string>,
      approved: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setETSCore(
      _ets: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setOwnershipTermLength(
      _ownershipTermLength: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setPremiumFlag(
      _tokenIds: PromiseOrValue<BigNumberish>[],
      _isPremium: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setReservedFlag(
      _tokenIds: PromiseOrValue<BigNumberish>[],
      _reserved: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setTagMaxStringLength(
      _tagMaxStringLength: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setTagMinStringLength(
      _tagMinStringLength: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tagExistsById(
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tagExistsByString(
      _tag: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tagMaxStringLength(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tagMinStringLength(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tokenIdToLastRenewed(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tokenIdToTag(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tokenURI(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferFrom(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    unPause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    upgradeTest(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    upgradeTo(
      newImplementation: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    upgradeToAndCall(
      newImplementation: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
