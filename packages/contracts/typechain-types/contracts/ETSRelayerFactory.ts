/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export interface ETSRelayerFactoryInterface extends utils.Interface {
  functions: {
    "NAME()": FunctionFragment;
    "addRelayer(string)": FunctionFragment;
    "ets()": FunctionFragment;
    "etsAccessControls()": FunctionFragment;
    "etsTarget()": FunctionFragment;
    "etsToken()": FunctionFragment;
    "getBeacon()": FunctionFragment;
    "getImplementation()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "NAME"
      | "addRelayer"
      | "ets"
      | "etsAccessControls"
      | "etsTarget"
      | "etsToken"
      | "getBeacon"
      | "getImplementation"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "NAME", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "addRelayer",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "ets", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "etsAccessControls",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "etsTarget", values?: undefined): string;
  encodeFunctionData(functionFragment: "etsToken", values?: undefined): string;
  encodeFunctionData(functionFragment: "getBeacon", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getImplementation",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "NAME", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "addRelayer", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ets", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "etsAccessControls",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "etsTarget", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "etsToken", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getBeacon", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getImplementation",
    data: BytesLike
  ): Result;

  events: {};
}

export interface ETSRelayerFactory extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ETSRelayerFactoryInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    NAME(overrides?: CallOverrides): Promise<[string]>;

    addRelayer(
      _relayerName: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    ets(overrides?: CallOverrides): Promise<[string]>;

    etsAccessControls(overrides?: CallOverrides): Promise<[string]>;

    etsTarget(overrides?: CallOverrides): Promise<[string]>;

    etsToken(overrides?: CallOverrides): Promise<[string]>;

    getBeacon(overrides?: CallOverrides): Promise<[string]>;

    getImplementation(overrides?: CallOverrides): Promise<[string]>;
  };

  NAME(overrides?: CallOverrides): Promise<string>;

  addRelayer(
    _relayerName: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  ets(overrides?: CallOverrides): Promise<string>;

  etsAccessControls(overrides?: CallOverrides): Promise<string>;

  etsTarget(overrides?: CallOverrides): Promise<string>;

  etsToken(overrides?: CallOverrides): Promise<string>;

  getBeacon(overrides?: CallOverrides): Promise<string>;

  getImplementation(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    NAME(overrides?: CallOverrides): Promise<string>;

    addRelayer(
      _relayerName: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    ets(overrides?: CallOverrides): Promise<string>;

    etsAccessControls(overrides?: CallOverrides): Promise<string>;

    etsTarget(overrides?: CallOverrides): Promise<string>;

    etsToken(overrides?: CallOverrides): Promise<string>;

    getBeacon(overrides?: CallOverrides): Promise<string>;

    getImplementation(overrides?: CallOverrides): Promise<string>;
  };

  filters: {};

  estimateGas: {
    NAME(overrides?: CallOverrides): Promise<BigNumber>;

    addRelayer(
      _relayerName: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    ets(overrides?: CallOverrides): Promise<BigNumber>;

    etsAccessControls(overrides?: CallOverrides): Promise<BigNumber>;

    etsTarget(overrides?: CallOverrides): Promise<BigNumber>;

    etsToken(overrides?: CallOverrides): Promise<BigNumber>;

    getBeacon(overrides?: CallOverrides): Promise<BigNumber>;

    getImplementation(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    NAME(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    addRelayer(
      _relayerName: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    ets(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    etsAccessControls(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    etsTarget(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    etsToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getBeacon(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getImplementation(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
