/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export declare namespace IETS {
  export type TaggingRecordRawInputStruct = {
    targetURI: string;
    tagStrings: string[];
    recordType: string;
  };

  export type TaggingRecordRawInputStructOutput = [
    targetURI: string,
    tagStrings: string[],
    recordType: string
  ] & { targetURI: string; tagStrings: string[]; recordType: string };
}

export interface RelayerMockInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "IID_IETSRELAYER"
      | "NAME"
      | "applyTags"
      | "changeOwner"
      | "computeTaggingFee"
      | "creator"
      | "ets"
      | "etsTarget"
      | "etsToken"
      | "getCreator"
      | "getOrCreateTagIds"
      | "getOwner"
      | "getRelayerName"
      | "isPaused"
      | "owner"
      | "pause"
      | "paused"
      | "removeTags"
      | "renounceOwnership"
      | "replaceTags"
      | "supportsInterface"
      | "transferOwnership"
      | "unpause"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "OwnershipTransferred"
      | "Paused"
      | "RelayerOwnerChanged"
      | "RelayerPauseToggledByOwner"
      | "Unpaused"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "IID_IETSRELAYER",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "NAME", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "applyTags",
    values: [IETS.TaggingRecordRawInputStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "changeOwner",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "computeTaggingFee",
    values: [IETS.TaggingRecordRawInputStruct, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "creator", values?: undefined): string;
  encodeFunctionData(functionFragment: "ets", values?: undefined): string;
  encodeFunctionData(functionFragment: "etsTarget", values?: undefined): string;
  encodeFunctionData(functionFragment: "etsToken", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getCreator",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getOrCreateTagIds",
    values: [string[]]
  ): string;
  encodeFunctionData(functionFragment: "getOwner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getRelayerName",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "isPaused", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "removeTags",
    values: [IETS.TaggingRecordRawInputStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "replaceTags",
    values: [IETS.TaggingRecordRawInputStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "IID_IETSRELAYER",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "NAME", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "applyTags", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "changeOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "computeTaggingFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "creator", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ets", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "etsTarget", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "etsToken", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getCreator", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getOrCreateTagIds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getOwner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getRelayerName",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isPaused", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "removeTags", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "replaceTags",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RelayerOwnerChangedEvent {
  export type InputTuple = [relayerAddress: AddressLike];
  export type OutputTuple = [relayerAddress: string];
  export interface OutputObject {
    relayerAddress: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RelayerPauseToggledByOwnerEvent {
  export type InputTuple = [relayerAddress: AddressLike];
  export type OutputTuple = [relayerAddress: string];
  export interface OutputObject {
    relayerAddress: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UnpausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface RelayerMock extends BaseContract {
  connect(runner?: ContractRunner | null): RelayerMock;
  waitForDeployment(): Promise<this>;

  interface: RelayerMockInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  IID_IETSRELAYER: TypedContractMethod<[], [string], "view">;

  NAME: TypedContractMethod<[], [string], "view">;

  applyTags: TypedContractMethod<
    [_rawParts: IETS.TaggingRecordRawInputStruct[]],
    [void],
    "payable"
  >;

  changeOwner: TypedContractMethod<
    [_newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  computeTaggingFee: TypedContractMethod<
    [_rawInput: IETS.TaggingRecordRawInputStruct, _action: BigNumberish],
    [[bigint, bigint] & { fee: bigint; tagCount: bigint }],
    "view"
  >;

  creator: TypedContractMethod<[], [string], "view">;

  ets: TypedContractMethod<[], [string], "view">;

  etsTarget: TypedContractMethod<[], [string], "view">;

  etsToken: TypedContractMethod<[], [string], "view">;

  getCreator: TypedContractMethod<[], [string], "view">;

  getOrCreateTagIds: TypedContractMethod<
    [_tags: string[]],
    [bigint[]],
    "payable"
  >;

  getOwner: TypedContractMethod<[], [string], "view">;

  getRelayerName: TypedContractMethod<[], [string], "view">;

  isPaused: TypedContractMethod<[], [boolean], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  pause: TypedContractMethod<[], [void], "nonpayable">;

  paused: TypedContractMethod<[], [boolean], "view">;

  removeTags: TypedContractMethod<
    [_rawParts: IETS.TaggingRecordRawInputStruct[]],
    [void],
    "payable"
  >;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  replaceTags: TypedContractMethod<
    [_rawParts: IETS.TaggingRecordRawInputStruct[]],
    [void],
    "payable"
  >;

  supportsInterface: TypedContractMethod<
    [interfaceId: BytesLike],
    [boolean],
    "view"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  unpause: TypedContractMethod<[], [void], "nonpayable">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "IID_IETSRELAYER"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "NAME"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "applyTags"
  ): TypedContractMethod<
    [_rawParts: IETS.TaggingRecordRawInputStruct[]],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "changeOwner"
  ): TypedContractMethod<[_newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "computeTaggingFee"
  ): TypedContractMethod<
    [_rawInput: IETS.TaggingRecordRawInputStruct, _action: BigNumberish],
    [[bigint, bigint] & { fee: bigint; tagCount: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "creator"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "ets"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "etsTarget"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "etsToken"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getCreator"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getOrCreateTagIds"
  ): TypedContractMethod<[_tags: string[]], [bigint[]], "payable">;
  getFunction(
    nameOrSignature: "getOwner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getRelayerName"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "isPaused"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "pause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "paused"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "removeTags"
  ): TypedContractMethod<
    [_rawParts: IETS.TaggingRecordRawInputStruct[]],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "replaceTags"
  ): TypedContractMethod<
    [_rawParts: IETS.TaggingRecordRawInputStruct[]],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "supportsInterface"
  ): TypedContractMethod<[interfaceId: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "unpause"
  ): TypedContractMethod<[], [void], "nonpayable">;

  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "Paused"
  ): TypedContractEvent<
    PausedEvent.InputTuple,
    PausedEvent.OutputTuple,
    PausedEvent.OutputObject
  >;
  getEvent(
    key: "RelayerOwnerChanged"
  ): TypedContractEvent<
    RelayerOwnerChangedEvent.InputTuple,
    RelayerOwnerChangedEvent.OutputTuple,
    RelayerOwnerChangedEvent.OutputObject
  >;
  getEvent(
    key: "RelayerPauseToggledByOwner"
  ): TypedContractEvent<
    RelayerPauseToggledByOwnerEvent.InputTuple,
    RelayerPauseToggledByOwnerEvent.OutputTuple,
    RelayerPauseToggledByOwnerEvent.OutputObject
  >;
  getEvent(
    key: "Unpaused"
  ): TypedContractEvent<
    UnpausedEvent.InputTuple,
    UnpausedEvent.OutputTuple,
    UnpausedEvent.OutputObject
  >;

  filters: {
    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "Paused(address)": TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;
    Paused: TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;

    "RelayerOwnerChanged(address)": TypedContractEvent<
      RelayerOwnerChangedEvent.InputTuple,
      RelayerOwnerChangedEvent.OutputTuple,
      RelayerOwnerChangedEvent.OutputObject
    >;
    RelayerOwnerChanged: TypedContractEvent<
      RelayerOwnerChangedEvent.InputTuple,
      RelayerOwnerChangedEvent.OutputTuple,
      RelayerOwnerChangedEvent.OutputObject
    >;

    "RelayerPauseToggledByOwner(address)": TypedContractEvent<
      RelayerPauseToggledByOwnerEvent.InputTuple,
      RelayerPauseToggledByOwnerEvent.OutputTuple,
      RelayerPauseToggledByOwnerEvent.OutputObject
    >;
    RelayerPauseToggledByOwner: TypedContractEvent<
      RelayerPauseToggledByOwnerEvent.InputTuple,
      RelayerPauseToggledByOwnerEvent.OutputTuple,
      RelayerPauseToggledByOwnerEvent.OutputObject
    >;

    "Unpaused(address)": TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;
    Unpaused: TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;
  };
}
