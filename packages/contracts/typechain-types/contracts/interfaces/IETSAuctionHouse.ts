/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export declare namespace IETSAuctionHouse {
  export type AuctionStruct = {
    auctionId: PromiseOrValue<BigNumberish>;
    amount: PromiseOrValue<BigNumberish>;
    startTime: PromiseOrValue<BigNumberish>;
    endTime: PromiseOrValue<BigNumberish>;
    reservePrice: PromiseOrValue<BigNumberish>;
    bidder: PromiseOrValue<string>;
    auctioneer: PromiseOrValue<string>;
    settled: PromiseOrValue<boolean>;
  };

  export type AuctionStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    string,
    string,
    boolean
  ] & {
    auctionId: BigNumber;
    amount: BigNumber;
    startTime: BigNumber;
    endTime: BigNumber;
    reservePrice: BigNumber;
    bidder: string;
    auctioneer: string;
    settled: boolean;
  };
}

export interface IETSAuctionHouseInterface extends utils.Interface {
  functions: {
    "auctionEnded(uint256)": FunctionFragment;
    "auctionExists(uint256)": FunctionFragment;
    "auctionSettled(uint256)": FunctionFragment;
    "createBid(uint256)": FunctionFragment;
    "createNextAuction()": FunctionFragment;
    "drawDown(address)": FunctionFragment;
    "fulfillRequestCreateAuction(uint256)": FunctionFragment;
    "getActiveCount()": FunctionFragment;
    "getAuction(uint256)": FunctionFragment;
    "getBalance()": FunctionFragment;
    "getTotalCount()": FunctionFragment;
    "pause()": FunctionFragment;
    "setProceedPercentages(uint256,uint256)": FunctionFragment;
    "setReservePrice(uint256)": FunctionFragment;
    "setTimeBuffer(uint256)": FunctionFragment;
    "settleAuction(uint256)": FunctionFragment;
    "settleCurrentAndCreateNewAuction(uint256)": FunctionFragment;
    "totalDue(address)": FunctionFragment;
    "unpause()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "auctionEnded"
      | "auctionExists"
      | "auctionSettled"
      | "createBid"
      | "createNextAuction"
      | "drawDown"
      | "fulfillRequestCreateAuction"
      | "getActiveCount"
      | "getAuction"
      | "getBalance"
      | "getTotalCount"
      | "pause"
      | "setProceedPercentages"
      | "setReservePrice"
      | "setTimeBuffer"
      | "settleAuction"
      | "settleCurrentAndCreateNewAuction"
      | "totalDue"
      | "unpause"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "auctionEnded",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "auctionExists",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "auctionSettled",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "createBid",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "createNextAuction",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "drawDown",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "fulfillRequestCreateAuction",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getActiveCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAuction",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getBalance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalCount",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "setProceedPercentages",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setReservePrice",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setTimeBuffer",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "settleAuction",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "settleCurrentAndCreateNewAuction",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "totalDue",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "auctionEnded",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "auctionExists",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "auctionSettled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "createBid", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "createNextAuction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "drawDown", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "fulfillRequestCreateAuction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getActiveCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getAuction", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getBalance", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getTotalCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setProceedPercentages",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setReservePrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTimeBuffer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "settleAuction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "settleCurrentAndCreateNewAuction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "totalDue", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;

  events: {
    "AuctionBid(uint256,address,uint256,bool)": EventFragment;
    "AuctionCreated(uint256)": EventFragment;
    "AuctionDurationSet(uint256)": EventFragment;
    "AuctionExtended(uint256,uint256)": EventFragment;
    "AuctionMinBidIncrementPercentageSet(uint8)": EventFragment;
    "AuctionProceedPercentagesSet(uint256,uint256,uint256)": EventFragment;
    "AuctionProceedsWithdrawn(address,uint256)": EventFragment;
    "AuctionReservePriceSet(uint256)": EventFragment;
    "AuctionSettled(uint256)": EventFragment;
    "AuctionTimeBufferSet(uint256)": EventFragment;
    "AuctionsMaxSet(uint256)": EventFragment;
    "RequestCreateAuction()": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AuctionBid"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AuctionCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AuctionDurationSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AuctionExtended"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "AuctionMinBidIncrementPercentageSet"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "AuctionProceedPercentagesSet"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AuctionProceedsWithdrawn"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AuctionReservePriceSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AuctionSettled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AuctionTimeBufferSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AuctionsMaxSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RequestCreateAuction"): EventFragment;
}

export interface AuctionBidEventObject {
  tokenId: BigNumber;
  sender: string;
  value: BigNumber;
  extended: boolean;
}
export type AuctionBidEvent = TypedEvent<
  [BigNumber, string, BigNumber, boolean],
  AuctionBidEventObject
>;

export type AuctionBidEventFilter = TypedEventFilter<AuctionBidEvent>;

export interface AuctionCreatedEventObject {
  tokenId: BigNumber;
}
export type AuctionCreatedEvent = TypedEvent<
  [BigNumber],
  AuctionCreatedEventObject
>;

export type AuctionCreatedEventFilter = TypedEventFilter<AuctionCreatedEvent>;

export interface AuctionDurationSetEventObject {
  duration: BigNumber;
}
export type AuctionDurationSetEvent = TypedEvent<
  [BigNumber],
  AuctionDurationSetEventObject
>;

export type AuctionDurationSetEventFilter =
  TypedEventFilter<AuctionDurationSetEvent>;

export interface AuctionExtendedEventObject {
  tokenId: BigNumber;
  endTime: BigNumber;
}
export type AuctionExtendedEvent = TypedEvent<
  [BigNumber, BigNumber],
  AuctionExtendedEventObject
>;

export type AuctionExtendedEventFilter = TypedEventFilter<AuctionExtendedEvent>;

export interface AuctionMinBidIncrementPercentageSetEventObject {
  minBidIncrementPercentagePrice: number;
}
export type AuctionMinBidIncrementPercentageSetEvent = TypedEvent<
  [number],
  AuctionMinBidIncrementPercentageSetEventObject
>;

export type AuctionMinBidIncrementPercentageSetEventFilter =
  TypedEventFilter<AuctionMinBidIncrementPercentageSetEvent>;

export interface AuctionProceedPercentagesSetEventObject {
  platformPercentage: BigNumber;
  relayerPercentage: BigNumber;
  creatorPercentage: BigNumber;
}
export type AuctionProceedPercentagesSetEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber],
  AuctionProceedPercentagesSetEventObject
>;

export type AuctionProceedPercentagesSetEventFilter =
  TypedEventFilter<AuctionProceedPercentagesSetEvent>;

export interface AuctionProceedsWithdrawnEventObject {
  who: string;
  amount: BigNumber;
}
export type AuctionProceedsWithdrawnEvent = TypedEvent<
  [string, BigNumber],
  AuctionProceedsWithdrawnEventObject
>;

export type AuctionProceedsWithdrawnEventFilter =
  TypedEventFilter<AuctionProceedsWithdrawnEvent>;

export interface AuctionReservePriceSetEventObject {
  reservePrice: BigNumber;
}
export type AuctionReservePriceSetEvent = TypedEvent<
  [BigNumber],
  AuctionReservePriceSetEventObject
>;

export type AuctionReservePriceSetEventFilter =
  TypedEventFilter<AuctionReservePriceSetEvent>;

export interface AuctionSettledEventObject {
  tokenId: BigNumber;
}
export type AuctionSettledEvent = TypedEvent<
  [BigNumber],
  AuctionSettledEventObject
>;

export type AuctionSettledEventFilter = TypedEventFilter<AuctionSettledEvent>;

export interface AuctionTimeBufferSetEventObject {
  timeBuffer: BigNumber;
}
export type AuctionTimeBufferSetEvent = TypedEvent<
  [BigNumber],
  AuctionTimeBufferSetEventObject
>;

export type AuctionTimeBufferSetEventFilter =
  TypedEventFilter<AuctionTimeBufferSetEvent>;

export interface AuctionsMaxSetEventObject {
  maxAuctions: BigNumber;
}
export type AuctionsMaxSetEvent = TypedEvent<
  [BigNumber],
  AuctionsMaxSetEventObject
>;

export type AuctionsMaxSetEventFilter = TypedEventFilter<AuctionsMaxSetEvent>;

export interface RequestCreateAuctionEventObject {}
export type RequestCreateAuctionEvent = TypedEvent<
  [],
  RequestCreateAuctionEventObject
>;

export type RequestCreateAuctionEventFilter =
  TypedEventFilter<RequestCreateAuctionEvent>;

export interface IETSAuctionHouse extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IETSAuctionHouseInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    auctionEnded(
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    auctionExists(
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    auctionSettled(
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    createBid(
      auctionId: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    createNextAuction(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    drawDown(
      _account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    fulfillRequestCreateAuction(
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getActiveCount(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getAuction(
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getBalance(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getTotalCount(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    pause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setProceedPercentages(
      _platformPercentage: PromiseOrValue<BigNumberish>,
      _relayerPercentage: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setReservePrice(
      _reservePrice: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setTimeBuffer(
      timeBuffer: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    settleAuction(
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    settleCurrentAndCreateNewAuction(
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    totalDue(
      _account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    unpause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  auctionEnded(
    _tokenId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  auctionExists(
    _tokenId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  auctionSettled(
    _tokenId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  createBid(
    auctionId: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  createNextAuction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  drawDown(
    _account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  fulfillRequestCreateAuction(
    _tokenId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getActiveCount(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getAuction(
    _tokenId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getBalance(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getTotalCount(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  pause(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setProceedPercentages(
    _platformPercentage: PromiseOrValue<BigNumberish>,
    _relayerPercentage: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setReservePrice(
    _reservePrice: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setTimeBuffer(
    timeBuffer: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  settleAuction(
    _tokenId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  settleCurrentAndCreateNewAuction(
    _tokenId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  totalDue(
    _account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  unpause(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    auctionEnded(
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    auctionExists(
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    auctionSettled(
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    createBid(
      auctionId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    createNextAuction(overrides?: CallOverrides): Promise<void>;

    drawDown(
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    fulfillRequestCreateAuction(
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    getActiveCount(overrides?: CallOverrides): Promise<BigNumber>;

    getAuction(
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<IETSAuctionHouse.AuctionStructOutput>;

    getBalance(overrides?: CallOverrides): Promise<BigNumber>;

    getTotalCount(overrides?: CallOverrides): Promise<BigNumber>;

    pause(overrides?: CallOverrides): Promise<void>;

    setProceedPercentages(
      _platformPercentage: PromiseOrValue<BigNumberish>,
      _relayerPercentage: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setReservePrice(
      _reservePrice: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setTimeBuffer(
      timeBuffer: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    settleAuction(
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    settleCurrentAndCreateNewAuction(
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    totalDue(
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    unpause(overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "AuctionBid(uint256,address,uint256,bool)"(
      tokenId?: PromiseOrValue<BigNumberish> | null,
      sender?: null,
      value?: null,
      extended?: null
    ): AuctionBidEventFilter;
    AuctionBid(
      tokenId?: PromiseOrValue<BigNumberish> | null,
      sender?: null,
      value?: null,
      extended?: null
    ): AuctionBidEventFilter;

    "AuctionCreated(uint256)"(
      tokenId?: PromiseOrValue<BigNumberish> | null
    ): AuctionCreatedEventFilter;
    AuctionCreated(
      tokenId?: PromiseOrValue<BigNumberish> | null
    ): AuctionCreatedEventFilter;

    "AuctionDurationSet(uint256)"(
      duration?: null
    ): AuctionDurationSetEventFilter;
    AuctionDurationSet(duration?: null): AuctionDurationSetEventFilter;

    "AuctionExtended(uint256,uint256)"(
      tokenId?: PromiseOrValue<BigNumberish> | null,
      endTime?: null
    ): AuctionExtendedEventFilter;
    AuctionExtended(
      tokenId?: PromiseOrValue<BigNumberish> | null,
      endTime?: null
    ): AuctionExtendedEventFilter;

    "AuctionMinBidIncrementPercentageSet(uint8)"(
      minBidIncrementPercentagePrice?: null
    ): AuctionMinBidIncrementPercentageSetEventFilter;
    AuctionMinBidIncrementPercentageSet(
      minBidIncrementPercentagePrice?: null
    ): AuctionMinBidIncrementPercentageSetEventFilter;

    "AuctionProceedPercentagesSet(uint256,uint256,uint256)"(
      platformPercentage?: null,
      relayerPercentage?: null,
      creatorPercentage?: null
    ): AuctionProceedPercentagesSetEventFilter;
    AuctionProceedPercentagesSet(
      platformPercentage?: null,
      relayerPercentage?: null,
      creatorPercentage?: null
    ): AuctionProceedPercentagesSetEventFilter;

    "AuctionProceedsWithdrawn(address,uint256)"(
      who?: PromiseOrValue<string> | null,
      amount?: null
    ): AuctionProceedsWithdrawnEventFilter;
    AuctionProceedsWithdrawn(
      who?: PromiseOrValue<string> | null,
      amount?: null
    ): AuctionProceedsWithdrawnEventFilter;

    "AuctionReservePriceSet(uint256)"(
      reservePrice?: null
    ): AuctionReservePriceSetEventFilter;
    AuctionReservePriceSet(
      reservePrice?: null
    ): AuctionReservePriceSetEventFilter;

    "AuctionSettled(uint256)"(
      tokenId?: PromiseOrValue<BigNumberish> | null
    ): AuctionSettledEventFilter;
    AuctionSettled(
      tokenId?: PromiseOrValue<BigNumberish> | null
    ): AuctionSettledEventFilter;

    "AuctionTimeBufferSet(uint256)"(
      timeBuffer?: null
    ): AuctionTimeBufferSetEventFilter;
    AuctionTimeBufferSet(timeBuffer?: null): AuctionTimeBufferSetEventFilter;

    "AuctionsMaxSet(uint256)"(maxAuctions?: null): AuctionsMaxSetEventFilter;
    AuctionsMaxSet(maxAuctions?: null): AuctionsMaxSetEventFilter;

    "RequestCreateAuction()"(): RequestCreateAuctionEventFilter;
    RequestCreateAuction(): RequestCreateAuctionEventFilter;
  };

  estimateGas: {
    auctionEnded(
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    auctionExists(
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    auctionSettled(
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    createBid(
      auctionId: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    createNextAuction(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    drawDown(
      _account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    fulfillRequestCreateAuction(
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getActiveCount(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getAuction(
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getBalance(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getTotalCount(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    pause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setProceedPercentages(
      _platformPercentage: PromiseOrValue<BigNumberish>,
      _relayerPercentage: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setReservePrice(
      _reservePrice: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setTimeBuffer(
      timeBuffer: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    settleAuction(
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    settleCurrentAndCreateNewAuction(
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    totalDue(
      _account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    unpause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    auctionEnded(
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    auctionExists(
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    auctionSettled(
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    createBid(
      auctionId: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    createNextAuction(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    drawDown(
      _account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    fulfillRequestCreateAuction(
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getActiveCount(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getAuction(
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getBalance(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getTotalCount(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    pause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setProceedPercentages(
      _platformPercentage: PromiseOrValue<BigNumberish>,
      _relayerPercentage: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setReservePrice(
      _reservePrice: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setTimeBuffer(
      timeBuffer: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    settleAuction(
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    settleCurrentAndCreateNewAuction(
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    totalDue(
      _account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    unpause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
