/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export declare namespace IETS {
  export type TaggingRecordRawInputStruct = {
    targetURI: string;
    tagStrings: string[];
    recordType: string;
  };

  export type TaggingRecordRawInputStructOutput = [
    targetURI: string,
    tagStrings: string[],
    recordType: string
  ] & { targetURI: string; tagStrings: string[]; recordType: string };
}

export interface IETSInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "appendTags"
      | "applyTagsWithCompositeKey"
      | "applyTagsWithRawInput"
      | "computeTaggingFee"
      | "computeTaggingFeeFromCompositeKey"
      | "computeTaggingFeeFromRawInput"
      | "computeTaggingRecordIdFromCompositeKey"
      | "computeTaggingRecordIdFromRawInput"
      | "createTag"
      | "createTaggingRecord"
      | "drawDown"
      | "getOrCreateTagId"
      | "getTaggingRecordFromCompositeKey"
      | "getTaggingRecordFromId"
      | "getTaggingRecordFromRawInput"
      | "removeTags"
      | "removeTagsWithCompositeKey"
      | "removeTagsWithRawInput"
      | "replaceTags"
      | "replaceTagsWithCompositeKey"
      | "replaceTagsWithRawInput"
      | "taggingFee"
      | "taggingRecordExists"
      | "taggingRecordExistsByCompositeKey"
      | "taggingRecordExistsByRawInput"
      | "totalDue"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "AccessControlsSet"
      | "FundsWithdrawn"
      | "PercentagesSet"
      | "TaggingFeeSet"
      | "TaggingRecordCreated"
      | "TaggingRecordUpdated"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "appendTags",
    values: [BigNumberish, BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "applyTagsWithCompositeKey",
    values: [BigNumberish[], BigNumberish, string, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "applyTagsWithRawInput",
    values: [IETS.TaggingRecordRawInputStruct, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "computeTaggingFee",
    values: [BigNumberish, BigNumberish[], BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "computeTaggingFeeFromCompositeKey",
    values: [
      BigNumberish[],
      BigNumberish,
      string,
      AddressLike,
      AddressLike,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "computeTaggingFeeFromRawInput",
    values: [
      IETS.TaggingRecordRawInputStruct,
      AddressLike,
      AddressLike,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "computeTaggingRecordIdFromCompositeKey",
    values: [BigNumberish, string, AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "computeTaggingRecordIdFromRawInput",
    values: [IETS.TaggingRecordRawInputStruct, AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "createTag",
    values: [string, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "createTaggingRecord",
    values: [BigNumberish[], BigNumberish, string, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "drawDown",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getOrCreateTagId",
    values: [string, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getTaggingRecordFromCompositeKey",
    values: [BigNumberish, string, AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getTaggingRecordFromId",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getTaggingRecordFromRawInput",
    values: [IETS.TaggingRecordRawInputStruct, AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "removeTags",
    values: [BigNumberish, BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "removeTagsWithCompositeKey",
    values: [BigNumberish[], BigNumberish, string, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "removeTagsWithRawInput",
    values: [IETS.TaggingRecordRawInputStruct, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "replaceTags",
    values: [BigNumberish, BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "replaceTagsWithCompositeKey",
    values: [BigNumberish[], BigNumberish, string, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "replaceTagsWithRawInput",
    values: [IETS.TaggingRecordRawInputStruct, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "taggingFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "taggingRecordExists",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "taggingRecordExistsByCompositeKey",
    values: [BigNumberish, string, AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "taggingRecordExistsByRawInput",
    values: [IETS.TaggingRecordRawInputStruct, AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "totalDue",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(functionFragment: "appendTags", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "applyTagsWithCompositeKey",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "applyTagsWithRawInput",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "computeTaggingFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "computeTaggingFeeFromCompositeKey",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "computeTaggingFeeFromRawInput",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "computeTaggingRecordIdFromCompositeKey",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "computeTaggingRecordIdFromRawInput",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "createTag", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "createTaggingRecord",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "drawDown", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getOrCreateTagId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTaggingRecordFromCompositeKey",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTaggingRecordFromId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTaggingRecordFromRawInput",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "removeTags", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeTagsWithCompositeKey",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeTagsWithRawInput",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "replaceTags",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "replaceTagsWithCompositeKey",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "replaceTagsWithRawInput",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "taggingFee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "taggingRecordExists",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "taggingRecordExistsByCompositeKey",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "taggingRecordExistsByRawInput",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "totalDue", data: BytesLike): Result;
}

export namespace AccessControlsSetEvent {
  export type InputTuple = [newAccessControls: AddressLike];
  export type OutputTuple = [newAccessControls: string];
  export interface OutputObject {
    newAccessControls: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace FundsWithdrawnEvent {
  export type InputTuple = [who: AddressLike, amount: BigNumberish];
  export type OutputTuple = [who: string, amount: bigint];
  export interface OutputObject {
    who: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PercentagesSetEvent {
  export type InputTuple = [
    platformPercentage: BigNumberish,
    relayerPercentage: BigNumberish
  ];
  export type OutputTuple = [
    platformPercentage: bigint,
    relayerPercentage: bigint
  ];
  export interface OutputObject {
    platformPercentage: bigint;
    relayerPercentage: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TaggingFeeSetEvent {
  export type InputTuple = [newTaggingFee: BigNumberish];
  export type OutputTuple = [newTaggingFee: bigint];
  export interface OutputObject {
    newTaggingFee: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TaggingRecordCreatedEvent {
  export type InputTuple = [taggingRecordId: BigNumberish];
  export type OutputTuple = [taggingRecordId: bigint];
  export interface OutputObject {
    taggingRecordId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TaggingRecordUpdatedEvent {
  export type InputTuple = [
    taggingRecordId: BigNumberish,
    action: BigNumberish
  ];
  export type OutputTuple = [taggingRecordId: bigint, action: bigint];
  export interface OutputObject {
    taggingRecordId: bigint;
    action: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface IETS extends BaseContract {
  connect(runner?: ContractRunner | null): IETS;
  waitForDeployment(): Promise<this>;

  interface: IETSInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  appendTags: TypedContractMethod<
    [_taggingRecordId: BigNumberish, _tagIds: BigNumberish[]],
    [void],
    "payable"
  >;

  applyTagsWithCompositeKey: TypedContractMethod<
    [
      _tagIds: BigNumberish[],
      _targetId: BigNumberish,
      _recordType: string,
      _tagger: AddressLike
    ],
    [void],
    "payable"
  >;

  applyTagsWithRawInput: TypedContractMethod<
    [_rawInput: IETS.TaggingRecordRawInputStruct, _tagger: AddressLike],
    [void],
    "payable"
  >;

  computeTaggingFee: TypedContractMethod<
    [
      _taggingRecordId: BigNumberish,
      _tagIds: BigNumberish[],
      _action: BigNumberish
    ],
    [[bigint, bigint] & { fee: bigint; tagCount: bigint }],
    "view"
  >;

  computeTaggingFeeFromCompositeKey: TypedContractMethod<
    [
      _tagIds: BigNumberish[],
      _targetId: BigNumberish,
      _recordType: string,
      _relayer: AddressLike,
      _tagger: AddressLike,
      _action: BigNumberish
    ],
    [[bigint, bigint] & { fee: bigint; tagCount: bigint }],
    "view"
  >;

  computeTaggingFeeFromRawInput: TypedContractMethod<
    [
      _rawInput: IETS.TaggingRecordRawInputStruct,
      _relayer: AddressLike,
      _tagger: AddressLike,
      _action: BigNumberish
    ],
    [[bigint, bigint] & { fee: bigint; tagCount: bigint }],
    "view"
  >;

  computeTaggingRecordIdFromCompositeKey: TypedContractMethod<
    [
      _targetId: BigNumberish,
      _recordType: string,
      _relayer: AddressLike,
      _tagger: AddressLike
    ],
    [bigint],
    "view"
  >;

  computeTaggingRecordIdFromRawInput: TypedContractMethod<
    [
      _rawInput: IETS.TaggingRecordRawInputStruct,
      _relayer: AddressLike,
      _tagger: AddressLike
    ],
    [bigint],
    "view"
  >;

  createTag: TypedContractMethod<
    [_tag: string, _creator: AddressLike],
    [bigint],
    "payable"
  >;

  createTaggingRecord: TypedContractMethod<
    [
      _tagIds: BigNumberish[],
      _targetId: BigNumberish,
      _recordType: string,
      _tagger: AddressLike
    ],
    [void],
    "payable"
  >;

  drawDown: TypedContractMethod<[_account: AddressLike], [void], "nonpayable">;

  getOrCreateTagId: TypedContractMethod<
    [_tag: string, _creator: AddressLike],
    [bigint],
    "payable"
  >;

  getTaggingRecordFromCompositeKey: TypedContractMethod<
    [
      _targetId: BigNumberish,
      _recordType: string,
      _relayer: AddressLike,
      _tagger: AddressLike
    ],
    [
      [bigint[], bigint, string, string, string] & {
        tagIds: bigint[];
        targetId: bigint;
        recordType: string;
        relayer: string;
        tagger: string;
      }
    ],
    "view"
  >;

  getTaggingRecordFromId: TypedContractMethod<
    [_id: BigNumberish],
    [
      [bigint[], bigint, string, string, string] & {
        tagIds: bigint[];
        targetId: bigint;
        recordType: string;
        relayer: string;
        tagger: string;
      }
    ],
    "view"
  >;

  getTaggingRecordFromRawInput: TypedContractMethod<
    [
      _rawInput: IETS.TaggingRecordRawInputStruct,
      _relayer: AddressLike,
      _tagger: AddressLike
    ],
    [
      [bigint[], bigint, string, string, string] & {
        tagIds: bigint[];
        targetId: bigint;
        recordType: string;
        relayer: string;
        tagger: string;
      }
    ],
    "view"
  >;

  removeTags: TypedContractMethod<
    [_taggingRecordId: BigNumberish, _tagIds: BigNumberish[]],
    [void],
    "nonpayable"
  >;

  removeTagsWithCompositeKey: TypedContractMethod<
    [
      _tagIds: BigNumberish[],
      _targetId: BigNumberish,
      _recordType: string,
      _tagger: AddressLike
    ],
    [void],
    "nonpayable"
  >;

  removeTagsWithRawInput: TypedContractMethod<
    [_rawInput: IETS.TaggingRecordRawInputStruct, _tagger: AddressLike],
    [void],
    "nonpayable"
  >;

  replaceTags: TypedContractMethod<
    [_taggingRecordId: BigNumberish, _tagIds: BigNumberish[]],
    [void],
    "payable"
  >;

  replaceTagsWithCompositeKey: TypedContractMethod<
    [
      _tagIds: BigNumberish[],
      _targetId: BigNumberish,
      _recordType: string,
      _tagger: AddressLike
    ],
    [void],
    "payable"
  >;

  replaceTagsWithRawInput: TypedContractMethod<
    [_rawInput: IETS.TaggingRecordRawInputStruct, _tagger: AddressLike],
    [void],
    "payable"
  >;

  taggingFee: TypedContractMethod<[], [bigint], "view">;

  taggingRecordExists: TypedContractMethod<
    [_taggingRecordId: BigNumberish],
    [boolean],
    "view"
  >;

  taggingRecordExistsByCompositeKey: TypedContractMethod<
    [
      _targetId: BigNumberish,
      _recordType: string,
      _relayer: AddressLike,
      _tagger: AddressLike
    ],
    [boolean],
    "view"
  >;

  taggingRecordExistsByRawInput: TypedContractMethod<
    [
      _rawInput: IETS.TaggingRecordRawInputStruct,
      _relayer: AddressLike,
      _tagger: AddressLike
    ],
    [boolean],
    "view"
  >;

  totalDue: TypedContractMethod<[_account: AddressLike], [bigint], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "appendTags"
  ): TypedContractMethod<
    [_taggingRecordId: BigNumberish, _tagIds: BigNumberish[]],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "applyTagsWithCompositeKey"
  ): TypedContractMethod<
    [
      _tagIds: BigNumberish[],
      _targetId: BigNumberish,
      _recordType: string,
      _tagger: AddressLike
    ],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "applyTagsWithRawInput"
  ): TypedContractMethod<
    [_rawInput: IETS.TaggingRecordRawInputStruct, _tagger: AddressLike],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "computeTaggingFee"
  ): TypedContractMethod<
    [
      _taggingRecordId: BigNumberish,
      _tagIds: BigNumberish[],
      _action: BigNumberish
    ],
    [[bigint, bigint] & { fee: bigint; tagCount: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "computeTaggingFeeFromCompositeKey"
  ): TypedContractMethod<
    [
      _tagIds: BigNumberish[],
      _targetId: BigNumberish,
      _recordType: string,
      _relayer: AddressLike,
      _tagger: AddressLike,
      _action: BigNumberish
    ],
    [[bigint, bigint] & { fee: bigint; tagCount: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "computeTaggingFeeFromRawInput"
  ): TypedContractMethod<
    [
      _rawInput: IETS.TaggingRecordRawInputStruct,
      _relayer: AddressLike,
      _tagger: AddressLike,
      _action: BigNumberish
    ],
    [[bigint, bigint] & { fee: bigint; tagCount: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "computeTaggingRecordIdFromCompositeKey"
  ): TypedContractMethod<
    [
      _targetId: BigNumberish,
      _recordType: string,
      _relayer: AddressLike,
      _tagger: AddressLike
    ],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "computeTaggingRecordIdFromRawInput"
  ): TypedContractMethod<
    [
      _rawInput: IETS.TaggingRecordRawInputStruct,
      _relayer: AddressLike,
      _tagger: AddressLike
    ],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "createTag"
  ): TypedContractMethod<
    [_tag: string, _creator: AddressLike],
    [bigint],
    "payable"
  >;
  getFunction(
    nameOrSignature: "createTaggingRecord"
  ): TypedContractMethod<
    [
      _tagIds: BigNumberish[],
      _targetId: BigNumberish,
      _recordType: string,
      _tagger: AddressLike
    ],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "drawDown"
  ): TypedContractMethod<[_account: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getOrCreateTagId"
  ): TypedContractMethod<
    [_tag: string, _creator: AddressLike],
    [bigint],
    "payable"
  >;
  getFunction(
    nameOrSignature: "getTaggingRecordFromCompositeKey"
  ): TypedContractMethod<
    [
      _targetId: BigNumberish,
      _recordType: string,
      _relayer: AddressLike,
      _tagger: AddressLike
    ],
    [
      [bigint[], bigint, string, string, string] & {
        tagIds: bigint[];
        targetId: bigint;
        recordType: string;
        relayer: string;
        tagger: string;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getTaggingRecordFromId"
  ): TypedContractMethod<
    [_id: BigNumberish],
    [
      [bigint[], bigint, string, string, string] & {
        tagIds: bigint[];
        targetId: bigint;
        recordType: string;
        relayer: string;
        tagger: string;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getTaggingRecordFromRawInput"
  ): TypedContractMethod<
    [
      _rawInput: IETS.TaggingRecordRawInputStruct,
      _relayer: AddressLike,
      _tagger: AddressLike
    ],
    [
      [bigint[], bigint, string, string, string] & {
        tagIds: bigint[];
        targetId: bigint;
        recordType: string;
        relayer: string;
        tagger: string;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "removeTags"
  ): TypedContractMethod<
    [_taggingRecordId: BigNumberish, _tagIds: BigNumberish[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "removeTagsWithCompositeKey"
  ): TypedContractMethod<
    [
      _tagIds: BigNumberish[],
      _targetId: BigNumberish,
      _recordType: string,
      _tagger: AddressLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "removeTagsWithRawInput"
  ): TypedContractMethod<
    [_rawInput: IETS.TaggingRecordRawInputStruct, _tagger: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "replaceTags"
  ): TypedContractMethod<
    [_taggingRecordId: BigNumberish, _tagIds: BigNumberish[]],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "replaceTagsWithCompositeKey"
  ): TypedContractMethod<
    [
      _tagIds: BigNumberish[],
      _targetId: BigNumberish,
      _recordType: string,
      _tagger: AddressLike
    ],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "replaceTagsWithRawInput"
  ): TypedContractMethod<
    [_rawInput: IETS.TaggingRecordRawInputStruct, _tagger: AddressLike],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "taggingFee"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "taggingRecordExists"
  ): TypedContractMethod<[_taggingRecordId: BigNumberish], [boolean], "view">;
  getFunction(
    nameOrSignature: "taggingRecordExistsByCompositeKey"
  ): TypedContractMethod<
    [
      _targetId: BigNumberish,
      _recordType: string,
      _relayer: AddressLike,
      _tagger: AddressLike
    ],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "taggingRecordExistsByRawInput"
  ): TypedContractMethod<
    [
      _rawInput: IETS.TaggingRecordRawInputStruct,
      _relayer: AddressLike,
      _tagger: AddressLike
    ],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "totalDue"
  ): TypedContractMethod<[_account: AddressLike], [bigint], "view">;

  getEvent(
    key: "AccessControlsSet"
  ): TypedContractEvent<
    AccessControlsSetEvent.InputTuple,
    AccessControlsSetEvent.OutputTuple,
    AccessControlsSetEvent.OutputObject
  >;
  getEvent(
    key: "FundsWithdrawn"
  ): TypedContractEvent<
    FundsWithdrawnEvent.InputTuple,
    FundsWithdrawnEvent.OutputTuple,
    FundsWithdrawnEvent.OutputObject
  >;
  getEvent(
    key: "PercentagesSet"
  ): TypedContractEvent<
    PercentagesSetEvent.InputTuple,
    PercentagesSetEvent.OutputTuple,
    PercentagesSetEvent.OutputObject
  >;
  getEvent(
    key: "TaggingFeeSet"
  ): TypedContractEvent<
    TaggingFeeSetEvent.InputTuple,
    TaggingFeeSetEvent.OutputTuple,
    TaggingFeeSetEvent.OutputObject
  >;
  getEvent(
    key: "TaggingRecordCreated"
  ): TypedContractEvent<
    TaggingRecordCreatedEvent.InputTuple,
    TaggingRecordCreatedEvent.OutputTuple,
    TaggingRecordCreatedEvent.OutputObject
  >;
  getEvent(
    key: "TaggingRecordUpdated"
  ): TypedContractEvent<
    TaggingRecordUpdatedEvent.InputTuple,
    TaggingRecordUpdatedEvent.OutputTuple,
    TaggingRecordUpdatedEvent.OutputObject
  >;

  filters: {
    "AccessControlsSet(address)": TypedContractEvent<
      AccessControlsSetEvent.InputTuple,
      AccessControlsSetEvent.OutputTuple,
      AccessControlsSetEvent.OutputObject
    >;
    AccessControlsSet: TypedContractEvent<
      AccessControlsSetEvent.InputTuple,
      AccessControlsSetEvent.OutputTuple,
      AccessControlsSetEvent.OutputObject
    >;

    "FundsWithdrawn(address,uint256)": TypedContractEvent<
      FundsWithdrawnEvent.InputTuple,
      FundsWithdrawnEvent.OutputTuple,
      FundsWithdrawnEvent.OutputObject
    >;
    FundsWithdrawn: TypedContractEvent<
      FundsWithdrawnEvent.InputTuple,
      FundsWithdrawnEvent.OutputTuple,
      FundsWithdrawnEvent.OutputObject
    >;

    "PercentagesSet(uint256,uint256)": TypedContractEvent<
      PercentagesSetEvent.InputTuple,
      PercentagesSetEvent.OutputTuple,
      PercentagesSetEvent.OutputObject
    >;
    PercentagesSet: TypedContractEvent<
      PercentagesSetEvent.InputTuple,
      PercentagesSetEvent.OutputTuple,
      PercentagesSetEvent.OutputObject
    >;

    "TaggingFeeSet(uint256)": TypedContractEvent<
      TaggingFeeSetEvent.InputTuple,
      TaggingFeeSetEvent.OutputTuple,
      TaggingFeeSetEvent.OutputObject
    >;
    TaggingFeeSet: TypedContractEvent<
      TaggingFeeSetEvent.InputTuple,
      TaggingFeeSetEvent.OutputTuple,
      TaggingFeeSetEvent.OutputObject
    >;

    "TaggingRecordCreated(uint256)": TypedContractEvent<
      TaggingRecordCreatedEvent.InputTuple,
      TaggingRecordCreatedEvent.OutputTuple,
      TaggingRecordCreatedEvent.OutputObject
    >;
    TaggingRecordCreated: TypedContractEvent<
      TaggingRecordCreatedEvent.InputTuple,
      TaggingRecordCreatedEvent.OutputTuple,
      TaggingRecordCreatedEvent.OutputObject
    >;

    "TaggingRecordUpdated(uint256,uint8)": TypedContractEvent<
      TaggingRecordUpdatedEvent.InputTuple,
      TaggingRecordUpdatedEvent.OutputTuple,
      TaggingRecordUpdatedEvent.OutputObject
    >;
    TaggingRecordUpdated: TypedContractEvent<
      TaggingRecordUpdatedEvent.InputTuple,
      TaggingRecordUpdatedEvent.OutputTuple,
      TaggingRecordUpdatedEvent.OutputObject
    >;
  };
}
