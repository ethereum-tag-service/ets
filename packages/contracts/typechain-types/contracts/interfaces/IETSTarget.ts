/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export declare namespace IETSTarget {
  export type TargetStruct = {
    targetURI: PromiseOrValue<string>;
    createdBy: PromiseOrValue<string>;
    enriched: PromiseOrValue<BigNumberish>;
    httpStatus: PromiseOrValue<BigNumberish>;
    ipfsHash: PromiseOrValue<string>;
  };

  export type TargetStructOutput = [
    string,
    string,
    BigNumber,
    BigNumber,
    string
  ] & {
    targetURI: string;
    createdBy: string;
    enriched: BigNumber;
    httpStatus: BigNumber;
    ipfsHash: string;
  };
}

export interface IETSTargetInterface extends utils.Interface {
  functions: {
    "computeTargetId(string)": FunctionFragment;
    "createTarget(string)": FunctionFragment;
    "getOrCreateTargetId(string)": FunctionFragment;
    "getTargetById(uint256)": FunctionFragment;
    "getTargetByURI(string)": FunctionFragment;
    "setEnrichTarget(address)": FunctionFragment;
    "targetExistsById(uint256)": FunctionFragment;
    "targetExistsByURI(string)": FunctionFragment;
    "updateTarget(uint256,string,uint256,uint256,string)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "computeTargetId"
      | "createTarget"
      | "getOrCreateTargetId"
      | "getTargetById"
      | "getTargetByURI"
      | "setEnrichTarget"
      | "targetExistsById"
      | "targetExistsByURI"
      | "updateTarget"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "computeTargetId",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "createTarget",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getOrCreateTargetId",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getTargetById",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getTargetByURI",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setEnrichTarget",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "targetExistsById",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "targetExistsByURI",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "updateTarget",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "computeTargetId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createTarget",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOrCreateTargetId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTargetById",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTargetByURI",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setEnrichTarget",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "targetExistsById",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "targetExistsByURI",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateTarget",
    data: BytesLike
  ): Result;

  events: {
    "AccessControlsSet(address)": EventFragment;
    "EnrichTargetSet(address)": EventFragment;
    "TargetCreated(uint256)": EventFragment;
    "TargetUpdated(uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AccessControlsSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "EnrichTargetSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TargetCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TargetUpdated"): EventFragment;
}

export interface AccessControlsSetEventObject {
  etsAccessControls: string;
}
export type AccessControlsSetEvent = TypedEvent<
  [string],
  AccessControlsSetEventObject
>;

export type AccessControlsSetEventFilter =
  TypedEventFilter<AccessControlsSetEvent>;

export interface EnrichTargetSetEventObject {
  etsEnrichTarget: string;
}
export type EnrichTargetSetEvent = TypedEvent<
  [string],
  EnrichTargetSetEventObject
>;

export type EnrichTargetSetEventFilter = TypedEventFilter<EnrichTargetSetEvent>;

export interface TargetCreatedEventObject {
  targetId: BigNumber;
}
export type TargetCreatedEvent = TypedEvent<
  [BigNumber],
  TargetCreatedEventObject
>;

export type TargetCreatedEventFilter = TypedEventFilter<TargetCreatedEvent>;

export interface TargetUpdatedEventObject {
  targetId: BigNumber;
}
export type TargetUpdatedEvent = TypedEvent<
  [BigNumber],
  TargetUpdatedEventObject
>;

export type TargetUpdatedEventFilter = TypedEventFilter<TargetUpdatedEvent>;

export interface IETSTarget extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IETSTargetInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    computeTargetId(
      _targetURI: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { targetId: BigNumber }>;

    createTarget(
      _targetURI: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getOrCreateTargetId(
      _targetURI: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getTargetById(
      _targetId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[IETSTarget.TargetStructOutput]>;

    getTargetByURI(
      _targetURI: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[IETSTarget.TargetStructOutput]>;

    setEnrichTarget(
      _etsEnrichTarget: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    targetExistsById(
      _targetId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    targetExistsByURI(
      _targetURI: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    updateTarget(
      _targetId: PromiseOrValue<BigNumberish>,
      _targetURI: PromiseOrValue<string>,
      _enriched: PromiseOrValue<BigNumberish>,
      _httpStatus: PromiseOrValue<BigNumberish>,
      _ipfsHash: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  computeTargetId(
    _targetURI: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  createTarget(
    _targetURI: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getOrCreateTargetId(
    _targetURI: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getTargetById(
    _targetId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<IETSTarget.TargetStructOutput>;

  getTargetByURI(
    _targetURI: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<IETSTarget.TargetStructOutput>;

  setEnrichTarget(
    _etsEnrichTarget: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  targetExistsById(
    _targetId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  targetExistsByURI(
    _targetURI: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  updateTarget(
    _targetId: PromiseOrValue<BigNumberish>,
    _targetURI: PromiseOrValue<string>,
    _enriched: PromiseOrValue<BigNumberish>,
    _httpStatus: PromiseOrValue<BigNumberish>,
    _ipfsHash: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    computeTargetId(
      _targetURI: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    createTarget(
      _targetURI: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getOrCreateTargetId(
      _targetURI: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTargetById(
      _targetId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<IETSTarget.TargetStructOutput>;

    getTargetByURI(
      _targetURI: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<IETSTarget.TargetStructOutput>;

    setEnrichTarget(
      _etsEnrichTarget: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    targetExistsById(
      _targetId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    targetExistsByURI(
      _targetURI: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    updateTarget(
      _targetId: PromiseOrValue<BigNumberish>,
      _targetURI: PromiseOrValue<string>,
      _enriched: PromiseOrValue<BigNumberish>,
      _httpStatus: PromiseOrValue<BigNumberish>,
      _ipfsHash: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {
    "AccessControlsSet(address)"(
      etsAccessControls?: null
    ): AccessControlsSetEventFilter;
    AccessControlsSet(etsAccessControls?: null): AccessControlsSetEventFilter;

    "EnrichTargetSet(address)"(
      etsEnrichTarget?: null
    ): EnrichTargetSetEventFilter;
    EnrichTargetSet(etsEnrichTarget?: null): EnrichTargetSetEventFilter;

    "TargetCreated(uint256)"(targetId?: null): TargetCreatedEventFilter;
    TargetCreated(targetId?: null): TargetCreatedEventFilter;

    "TargetUpdated(uint256)"(targetId?: null): TargetUpdatedEventFilter;
    TargetUpdated(targetId?: null): TargetUpdatedEventFilter;
  };

  estimateGas: {
    computeTargetId(
      _targetURI: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    createTarget(
      _targetURI: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getOrCreateTargetId(
      _targetURI: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getTargetById(
      _targetId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTargetByURI(
      _targetURI: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setEnrichTarget(
      _etsEnrichTarget: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    targetExistsById(
      _targetId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    targetExistsByURI(
      _targetURI: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    updateTarget(
      _targetId: PromiseOrValue<BigNumberish>,
      _targetURI: PromiseOrValue<string>,
      _enriched: PromiseOrValue<BigNumberish>,
      _httpStatus: PromiseOrValue<BigNumberish>,
      _ipfsHash: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    computeTargetId(
      _targetURI: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    createTarget(
      _targetURI: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getOrCreateTargetId(
      _targetURI: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getTargetById(
      _targetId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTargetByURI(
      _targetURI: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setEnrichTarget(
      _etsEnrichTarget: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    targetExistsById(
      _targetId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    targetExistsByURI(
      _targetURI: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    updateTarget(
      _targetId: PromiseOrValue<BigNumberish>,
      _targetURI: PromiseOrValue<string>,
      _enriched: PromiseOrValue<BigNumberish>,
      _httpStatus: PromiseOrValue<BigNumberish>,
      _ipfsHash: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
