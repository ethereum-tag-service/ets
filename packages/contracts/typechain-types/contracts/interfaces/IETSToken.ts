/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export declare namespace IETSToken {
  export type TagStruct = {
    relayer: AddressLike;
    creator: AddressLike;
    display: string;
    premium: boolean;
    reserved: boolean;
  };

  export type TagStructOutput = [
    relayer: string,
    creator: string,
    display: string,
    premium: boolean,
    reserved: boolean
  ] & {
    relayer: string;
    creator: string;
    display: string;
    premium: boolean;
    reserved: boolean;
  };
}

export interface IETSTokenInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "approve"
      | "balanceOf"
      | "computeTagId"
      | "createTag"
      | "getApproved"
      | "getCreatorAddress"
      | "getLastRenewed"
      | "getOrCreateTagId"
      | "getOwnershipTermLength"
      | "getPlatformAddress"
      | "getTagById"
      | "getTagByString"
      | "isApprovedForAll"
      | "ownerOf"
      | "preSetPremiumTags"
      | "recycleTag"
      | "renewTag"
      | "safeTransferFrom(address,address,uint256)"
      | "safeTransferFrom(address,address,uint256,bytes)"
      | "setApprovalForAll"
      | "setOwnershipTermLength"
      | "setPremiumFlag"
      | "setReservedFlag"
      | "setTagMaxStringLength"
      | "setTagMinStringLength"
      | "supportsInterface"
      | "tagExistsById"
      | "tagExistsByString"
      | "transferFrom"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "AccessControlsSet"
      | "Approval"
      | "ApprovalForAll"
      | "ETSCoreSet"
      | "OwnershipTermLengthSet"
      | "PremiumFlagSet"
      | "PremiumTagPreSet"
      | "ReservedFlagSet"
      | "TagMaxStringLengthSet"
      | "TagMinStringLengthSet"
      | "TagRecycled"
      | "TagRenewed"
      | "Transfer"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "approve",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOf",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "computeTagId",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "createTag",
    values: [string, AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getApproved",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getCreatorAddress",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getLastRenewed",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getOrCreateTagId",
    values: [string, AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getOwnershipTermLength",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPlatformAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTagById",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getTagByString",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "isApprovedForAll",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "ownerOf",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "preSetPremiumTags",
    values: [string[], boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "recycleTag",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "renewTag",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "safeTransferFrom(address,address,uint256)",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "safeTransferFrom(address,address,uint256,bytes)",
    values: [AddressLike, AddressLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setApprovalForAll",
    values: [AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setOwnershipTermLength",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setPremiumFlag",
    values: [BigNumberish[], boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setReservedFlag",
    values: [BigNumberish[], boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setTagMaxStringLength",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setTagMinStringLength",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "tagExistsById",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "tagExistsByString",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "computeTagId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "createTag", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getApproved",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCreatorAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLastRenewed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOrCreateTagId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOwnershipTermLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPlatformAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getTagById", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getTagByString",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isApprovedForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "ownerOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "preSetPremiumTags",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "recycleTag", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "renewTag", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "safeTransferFrom(address,address,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "safeTransferFrom(address,address,uint256,bytes)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setApprovalForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setOwnershipTermLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPremiumFlag",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setReservedFlag",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTagMaxStringLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTagMinStringLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tagExistsById",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tagExistsByString",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
}

export namespace AccessControlsSetEvent {
  export type InputTuple = [etsAccessControls: AddressLike];
  export type OutputTuple = [etsAccessControls: string];
  export interface OutputObject {
    etsAccessControls: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ApprovalEvent {
  export type InputTuple = [
    owner: AddressLike,
    approved: AddressLike,
    tokenId: BigNumberish
  ];
  export type OutputTuple = [owner: string, approved: string, tokenId: bigint];
  export interface OutputObject {
    owner: string;
    approved: string;
    tokenId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ApprovalForAllEvent {
  export type InputTuple = [
    owner: AddressLike,
    operator: AddressLike,
    approved: boolean
  ];
  export type OutputTuple = [
    owner: string,
    operator: string,
    approved: boolean
  ];
  export interface OutputObject {
    owner: string;
    operator: string;
    approved: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ETSCoreSetEvent {
  export type InputTuple = [ets: AddressLike];
  export type OutputTuple = [ets: string];
  export interface OutputObject {
    ets: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTermLengthSetEvent {
  export type InputTuple = [termLength: BigNumberish];
  export type OutputTuple = [termLength: bigint];
  export interface OutputObject {
    termLength: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PremiumFlagSetEvent {
  export type InputTuple = [tagId: BigNumberish, isPremium: boolean];
  export type OutputTuple = [tagId: bigint, isPremium: boolean];
  export interface OutputObject {
    tagId: bigint;
    isPremium: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PremiumTagPreSetEvent {
  export type InputTuple = [tag: string, isPremium: boolean];
  export type OutputTuple = [tag: string, isPremium: boolean];
  export interface OutputObject {
    tag: string;
    isPremium: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ReservedFlagSetEvent {
  export type InputTuple = [tagId: BigNumberish, isReserved: boolean];
  export type OutputTuple = [tagId: bigint, isReserved: boolean];
  export interface OutputObject {
    tagId: bigint;
    isReserved: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TagMaxStringLengthSetEvent {
  export type InputTuple = [maxStringLength: BigNumberish];
  export type OutputTuple = [maxStringLength: bigint];
  export interface OutputObject {
    maxStringLength: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TagMinStringLengthSetEvent {
  export type InputTuple = [minStringLength: BigNumberish];
  export type OutputTuple = [minStringLength: bigint];
  export interface OutputObject {
    minStringLength: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TagRecycledEvent {
  export type InputTuple = [tokenId: BigNumberish, caller: AddressLike];
  export type OutputTuple = [tokenId: bigint, caller: string];
  export interface OutputObject {
    tokenId: bigint;
    caller: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TagRenewedEvent {
  export type InputTuple = [tokenId: BigNumberish, caller: AddressLike];
  export type OutputTuple = [tokenId: bigint, caller: string];
  export interface OutputObject {
    tokenId: bigint;
    caller: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TransferEvent {
  export type InputTuple = [
    from: AddressLike,
    to: AddressLike,
    tokenId: BigNumberish
  ];
  export type OutputTuple = [from: string, to: string, tokenId: bigint];
  export interface OutputObject {
    from: string;
    to: string;
    tokenId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface IETSToken extends BaseContract {
  connect(runner?: ContractRunner | null): IETSToken;
  waitForDeployment(): Promise<this>;

  interface: IETSTokenInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  approve: TypedContractMethod<
    [to: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;

  balanceOf: TypedContractMethod<[owner: AddressLike], [bigint], "view">;

  computeTagId: TypedContractMethod<[_tag: string], [bigint], "view">;

  createTag: TypedContractMethod<
    [_tag: string, _relayer: AddressLike, _creator: AddressLike],
    [bigint],
    "payable"
  >;

  getApproved: TypedContractMethod<[tokenId: BigNumberish], [string], "view">;

  getCreatorAddress: TypedContractMethod<
    [_tokenId: BigNumberish],
    [string],
    "view"
  >;

  getLastRenewed: TypedContractMethod<
    [_tokenId: BigNumberish],
    [bigint],
    "view"
  >;

  getOrCreateTagId: TypedContractMethod<
    [_tag: string, _relayer: AddressLike, _creator: AddressLike],
    [bigint],
    "payable"
  >;

  getOwnershipTermLength: TypedContractMethod<[], [bigint], "view">;

  getPlatformAddress: TypedContractMethod<[], [string], "view">;

  getTagById: TypedContractMethod<
    [_tokenId: BigNumberish],
    [IETSToken.TagStructOutput],
    "view"
  >;

  getTagByString: TypedContractMethod<
    [_tag: string],
    [IETSToken.TagStructOutput],
    "view"
  >;

  isApprovedForAll: TypedContractMethod<
    [owner: AddressLike, operator: AddressLike],
    [boolean],
    "view"
  >;

  ownerOf: TypedContractMethod<[tokenId: BigNumberish], [string], "view">;

  preSetPremiumTags: TypedContractMethod<
    [_tags: string[], _isPremium: boolean],
    [void],
    "nonpayable"
  >;

  recycleTag: TypedContractMethod<
    [_tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;

  renewTag: TypedContractMethod<[_tokenId: BigNumberish], [void], "nonpayable">;

  "safeTransferFrom(address,address,uint256)": TypedContractMethod<
    [from: AddressLike, to: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;

  "safeTransferFrom(address,address,uint256,bytes)": TypedContractMethod<
    [
      from: AddressLike,
      to: AddressLike,
      tokenId: BigNumberish,
      data: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  setApprovalForAll: TypedContractMethod<
    [operator: AddressLike, approved: boolean],
    [void],
    "nonpayable"
  >;

  setOwnershipTermLength: TypedContractMethod<
    [_ownershipTermLength: BigNumberish],
    [void],
    "nonpayable"
  >;

  setPremiumFlag: TypedContractMethod<
    [_tokenIds: BigNumberish[], _isPremium: boolean],
    [void],
    "nonpayable"
  >;

  setReservedFlag: TypedContractMethod<
    [_tokenIds: BigNumberish[], _reserved: boolean],
    [void],
    "nonpayable"
  >;

  setTagMaxStringLength: TypedContractMethod<
    [_tagMaxStringLength: BigNumberish],
    [void],
    "nonpayable"
  >;

  setTagMinStringLength: TypedContractMethod<
    [_tagMinStringLength: BigNumberish],
    [void],
    "nonpayable"
  >;

  supportsInterface: TypedContractMethod<
    [interfaceId: BytesLike],
    [boolean],
    "view"
  >;

  tagExistsById: TypedContractMethod<
    [_tokenId: BigNumberish],
    [boolean],
    "view"
  >;

  tagExistsByString: TypedContractMethod<[_tag: string], [boolean], "view">;

  transferFrom: TypedContractMethod<
    [from: AddressLike, to: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "approve"
  ): TypedContractMethod<
    [to: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "balanceOf"
  ): TypedContractMethod<[owner: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "computeTagId"
  ): TypedContractMethod<[_tag: string], [bigint], "view">;
  getFunction(
    nameOrSignature: "createTag"
  ): TypedContractMethod<
    [_tag: string, _relayer: AddressLike, _creator: AddressLike],
    [bigint],
    "payable"
  >;
  getFunction(
    nameOrSignature: "getApproved"
  ): TypedContractMethod<[tokenId: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "getCreatorAddress"
  ): TypedContractMethod<[_tokenId: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "getLastRenewed"
  ): TypedContractMethod<[_tokenId: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "getOrCreateTagId"
  ): TypedContractMethod<
    [_tag: string, _relayer: AddressLike, _creator: AddressLike],
    [bigint],
    "payable"
  >;
  getFunction(
    nameOrSignature: "getOwnershipTermLength"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getPlatformAddress"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getTagById"
  ): TypedContractMethod<
    [_tokenId: BigNumberish],
    [IETSToken.TagStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getTagByString"
  ): TypedContractMethod<[_tag: string], [IETSToken.TagStructOutput], "view">;
  getFunction(
    nameOrSignature: "isApprovedForAll"
  ): TypedContractMethod<
    [owner: AddressLike, operator: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "ownerOf"
  ): TypedContractMethod<[tokenId: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "preSetPremiumTags"
  ): TypedContractMethod<
    [_tags: string[], _isPremium: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "recycleTag"
  ): TypedContractMethod<[_tokenId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "renewTag"
  ): TypedContractMethod<[_tokenId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "safeTransferFrom(address,address,uint256)"
  ): TypedContractMethod<
    [from: AddressLike, to: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "safeTransferFrom(address,address,uint256,bytes)"
  ): TypedContractMethod<
    [
      from: AddressLike,
      to: AddressLike,
      tokenId: BigNumberish,
      data: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setApprovalForAll"
  ): TypedContractMethod<
    [operator: AddressLike, approved: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setOwnershipTermLength"
  ): TypedContractMethod<
    [_ownershipTermLength: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setPremiumFlag"
  ): TypedContractMethod<
    [_tokenIds: BigNumberish[], _isPremium: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setReservedFlag"
  ): TypedContractMethod<
    [_tokenIds: BigNumberish[], _reserved: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setTagMaxStringLength"
  ): TypedContractMethod<
    [_tagMaxStringLength: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setTagMinStringLength"
  ): TypedContractMethod<
    [_tagMinStringLength: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "supportsInterface"
  ): TypedContractMethod<[interfaceId: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "tagExistsById"
  ): TypedContractMethod<[_tokenId: BigNumberish], [boolean], "view">;
  getFunction(
    nameOrSignature: "tagExistsByString"
  ): TypedContractMethod<[_tag: string], [boolean], "view">;
  getFunction(
    nameOrSignature: "transferFrom"
  ): TypedContractMethod<
    [from: AddressLike, to: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "AccessControlsSet"
  ): TypedContractEvent<
    AccessControlsSetEvent.InputTuple,
    AccessControlsSetEvent.OutputTuple,
    AccessControlsSetEvent.OutputObject
  >;
  getEvent(
    key: "Approval"
  ): TypedContractEvent<
    ApprovalEvent.InputTuple,
    ApprovalEvent.OutputTuple,
    ApprovalEvent.OutputObject
  >;
  getEvent(
    key: "ApprovalForAll"
  ): TypedContractEvent<
    ApprovalForAllEvent.InputTuple,
    ApprovalForAllEvent.OutputTuple,
    ApprovalForAllEvent.OutputObject
  >;
  getEvent(
    key: "ETSCoreSet"
  ): TypedContractEvent<
    ETSCoreSetEvent.InputTuple,
    ETSCoreSetEvent.OutputTuple,
    ETSCoreSetEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTermLengthSet"
  ): TypedContractEvent<
    OwnershipTermLengthSetEvent.InputTuple,
    OwnershipTermLengthSetEvent.OutputTuple,
    OwnershipTermLengthSetEvent.OutputObject
  >;
  getEvent(
    key: "PremiumFlagSet"
  ): TypedContractEvent<
    PremiumFlagSetEvent.InputTuple,
    PremiumFlagSetEvent.OutputTuple,
    PremiumFlagSetEvent.OutputObject
  >;
  getEvent(
    key: "PremiumTagPreSet"
  ): TypedContractEvent<
    PremiumTagPreSetEvent.InputTuple,
    PremiumTagPreSetEvent.OutputTuple,
    PremiumTagPreSetEvent.OutputObject
  >;
  getEvent(
    key: "ReservedFlagSet"
  ): TypedContractEvent<
    ReservedFlagSetEvent.InputTuple,
    ReservedFlagSetEvent.OutputTuple,
    ReservedFlagSetEvent.OutputObject
  >;
  getEvent(
    key: "TagMaxStringLengthSet"
  ): TypedContractEvent<
    TagMaxStringLengthSetEvent.InputTuple,
    TagMaxStringLengthSetEvent.OutputTuple,
    TagMaxStringLengthSetEvent.OutputObject
  >;
  getEvent(
    key: "TagMinStringLengthSet"
  ): TypedContractEvent<
    TagMinStringLengthSetEvent.InputTuple,
    TagMinStringLengthSetEvent.OutputTuple,
    TagMinStringLengthSetEvent.OutputObject
  >;
  getEvent(
    key: "TagRecycled"
  ): TypedContractEvent<
    TagRecycledEvent.InputTuple,
    TagRecycledEvent.OutputTuple,
    TagRecycledEvent.OutputObject
  >;
  getEvent(
    key: "TagRenewed"
  ): TypedContractEvent<
    TagRenewedEvent.InputTuple,
    TagRenewedEvent.OutputTuple,
    TagRenewedEvent.OutputObject
  >;
  getEvent(
    key: "Transfer"
  ): TypedContractEvent<
    TransferEvent.InputTuple,
    TransferEvent.OutputTuple,
    TransferEvent.OutputObject
  >;

  filters: {
    "AccessControlsSet(address)": TypedContractEvent<
      AccessControlsSetEvent.InputTuple,
      AccessControlsSetEvent.OutputTuple,
      AccessControlsSetEvent.OutputObject
    >;
    AccessControlsSet: TypedContractEvent<
      AccessControlsSetEvent.InputTuple,
      AccessControlsSetEvent.OutputTuple,
      AccessControlsSetEvent.OutputObject
    >;

    "Approval(address,address,uint256)": TypedContractEvent<
      ApprovalEvent.InputTuple,
      ApprovalEvent.OutputTuple,
      ApprovalEvent.OutputObject
    >;
    Approval: TypedContractEvent<
      ApprovalEvent.InputTuple,
      ApprovalEvent.OutputTuple,
      ApprovalEvent.OutputObject
    >;

    "ApprovalForAll(address,address,bool)": TypedContractEvent<
      ApprovalForAllEvent.InputTuple,
      ApprovalForAllEvent.OutputTuple,
      ApprovalForAllEvent.OutputObject
    >;
    ApprovalForAll: TypedContractEvent<
      ApprovalForAllEvent.InputTuple,
      ApprovalForAllEvent.OutputTuple,
      ApprovalForAllEvent.OutputObject
    >;

    "ETSCoreSet(address)": TypedContractEvent<
      ETSCoreSetEvent.InputTuple,
      ETSCoreSetEvent.OutputTuple,
      ETSCoreSetEvent.OutputObject
    >;
    ETSCoreSet: TypedContractEvent<
      ETSCoreSetEvent.InputTuple,
      ETSCoreSetEvent.OutputTuple,
      ETSCoreSetEvent.OutputObject
    >;

    "OwnershipTermLengthSet(uint256)": TypedContractEvent<
      OwnershipTermLengthSetEvent.InputTuple,
      OwnershipTermLengthSetEvent.OutputTuple,
      OwnershipTermLengthSetEvent.OutputObject
    >;
    OwnershipTermLengthSet: TypedContractEvent<
      OwnershipTermLengthSetEvent.InputTuple,
      OwnershipTermLengthSetEvent.OutputTuple,
      OwnershipTermLengthSetEvent.OutputObject
    >;

    "PremiumFlagSet(uint256,bool)": TypedContractEvent<
      PremiumFlagSetEvent.InputTuple,
      PremiumFlagSetEvent.OutputTuple,
      PremiumFlagSetEvent.OutputObject
    >;
    PremiumFlagSet: TypedContractEvent<
      PremiumFlagSetEvent.InputTuple,
      PremiumFlagSetEvent.OutputTuple,
      PremiumFlagSetEvent.OutputObject
    >;

    "PremiumTagPreSet(string,bool)": TypedContractEvent<
      PremiumTagPreSetEvent.InputTuple,
      PremiumTagPreSetEvent.OutputTuple,
      PremiumTagPreSetEvent.OutputObject
    >;
    PremiumTagPreSet: TypedContractEvent<
      PremiumTagPreSetEvent.InputTuple,
      PremiumTagPreSetEvent.OutputTuple,
      PremiumTagPreSetEvent.OutputObject
    >;

    "ReservedFlagSet(uint256,bool)": TypedContractEvent<
      ReservedFlagSetEvent.InputTuple,
      ReservedFlagSetEvent.OutputTuple,
      ReservedFlagSetEvent.OutputObject
    >;
    ReservedFlagSet: TypedContractEvent<
      ReservedFlagSetEvent.InputTuple,
      ReservedFlagSetEvent.OutputTuple,
      ReservedFlagSetEvent.OutputObject
    >;

    "TagMaxStringLengthSet(uint256)": TypedContractEvent<
      TagMaxStringLengthSetEvent.InputTuple,
      TagMaxStringLengthSetEvent.OutputTuple,
      TagMaxStringLengthSetEvent.OutputObject
    >;
    TagMaxStringLengthSet: TypedContractEvent<
      TagMaxStringLengthSetEvent.InputTuple,
      TagMaxStringLengthSetEvent.OutputTuple,
      TagMaxStringLengthSetEvent.OutputObject
    >;

    "TagMinStringLengthSet(uint256)": TypedContractEvent<
      TagMinStringLengthSetEvent.InputTuple,
      TagMinStringLengthSetEvent.OutputTuple,
      TagMinStringLengthSetEvent.OutputObject
    >;
    TagMinStringLengthSet: TypedContractEvent<
      TagMinStringLengthSetEvent.InputTuple,
      TagMinStringLengthSetEvent.OutputTuple,
      TagMinStringLengthSetEvent.OutputObject
    >;

    "TagRecycled(uint256,address)": TypedContractEvent<
      TagRecycledEvent.InputTuple,
      TagRecycledEvent.OutputTuple,
      TagRecycledEvent.OutputObject
    >;
    TagRecycled: TypedContractEvent<
      TagRecycledEvent.InputTuple,
      TagRecycledEvent.OutputTuple,
      TagRecycledEvent.OutputObject
    >;

    "TagRenewed(uint256,address)": TypedContractEvent<
      TagRenewedEvent.InputTuple,
      TagRenewedEvent.OutputTuple,
      TagRenewedEvent.OutputObject
    >;
    TagRenewed: TypedContractEvent<
      TagRenewedEvent.InputTuple,
      TagRenewedEvent.OutputTuple,
      TagRenewedEvent.OutputObject
    >;

    "Transfer(address,address,uint256)": TypedContractEvent<
      TransferEvent.InputTuple,
      TransferEvent.OutputTuple,
      TransferEvent.OutputObject
    >;
    Transfer: TypedContractEvent<
      TransferEvent.InputTuple,
      TransferEvent.OutputTuple,
      TransferEvent.OutputObject
    >;
  };
}
