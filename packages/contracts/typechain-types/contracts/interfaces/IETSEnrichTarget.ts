/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface IETSEnrichTargetInterface extends Interface {
  getFunction(
    nameOrSignature: "fulfillEnrichTarget" | "requestEnrichTarget"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "RequestEnrichTarget"): EventFragment;

  encodeFunctionData(
    functionFragment: "fulfillEnrichTarget",
    values: [BigNumberish, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "requestEnrichTarget",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "fulfillEnrichTarget",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requestEnrichTarget",
    data: BytesLike
  ): Result;
}

export namespace RequestEnrichTargetEvent {
  export type InputTuple = [targetId: BigNumberish];
  export type OutputTuple = [targetId: bigint];
  export interface OutputObject {
    targetId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface IETSEnrichTarget extends BaseContract {
  connect(runner?: ContractRunner | null): IETSEnrichTarget;
  waitForDeployment(): Promise<this>;

  interface: IETSEnrichTargetInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  fulfillEnrichTarget: TypedContractMethod<
    [_targetId: BigNumberish, _ipfsHash: string, _httpStatus: BigNumberish],
    [void],
    "nonpayable"
  >;

  requestEnrichTarget: TypedContractMethod<
    [_targetId: BigNumberish],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "fulfillEnrichTarget"
  ): TypedContractMethod<
    [_targetId: BigNumberish, _ipfsHash: string, _httpStatus: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "requestEnrichTarget"
  ): TypedContractMethod<[_targetId: BigNumberish], [void], "nonpayable">;

  getEvent(
    key: "RequestEnrichTarget"
  ): TypedContractEvent<
    RequestEnrichTargetEvent.InputTuple,
    RequestEnrichTargetEvent.OutputTuple,
    RequestEnrichTargetEvent.OutputObject
  >;

  filters: {
    "RequestEnrichTarget(uint256)": TypedContractEvent<
      RequestEnrichTargetEvent.InputTuple,
      RequestEnrichTargetEvent.OutputTuple,
      RequestEnrichTargetEvent.OutputObject
    >;
    RequestEnrichTarget: TypedContractEvent<
      RequestEnrichTargetEvent.InputTuple,
      RequestEnrichTargetEvent.OutputTuple,
      RequestEnrichTargetEvent.OutputObject
    >;
  };
}
