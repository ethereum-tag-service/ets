/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  MaliciousBidder,
  MaliciousBidderInterface,
} from "../../../contracts/test/MaliciousBidder";

const _abi = [
  {
    inputs: [
      {
        internalType: "contract IETSAuctionHouse",
        name: "auctionHouse",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "bid",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    stateMutability: "payable",
    type: "receive",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b50610144806100206000396000f3fe6080604052600436106100225760003560e01c806359d667a51461002e57600080fd5b3661002957fe5b600080fd5b61004161003c3660046100c9565b610043565b005b6040517f659dd2b40000000000000000000000000000000000000000000000000000000081526004810182905273ffffffffffffffffffffffffffffffffffffffff83169063659dd2b49034906024016000604051808303818588803b1580156100ac57600080fd5b505af11580156100c0573d6000803e3d6000fd5b50505050505050565b600080604083850312156100dc57600080fd5b823573ffffffffffffffffffffffffffffffffffffffff8116811461010057600080fd5b94602093909301359350505056fea26469706673582212207c0a8b1b874fc938892f5b621c11624782575a8d5544e8ce94f2df23233562dc64736f6c634300080c0033";

type MaliciousBidderConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MaliciousBidderConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MaliciousBidder__factory extends ContractFactory {
  constructor(...args: MaliciousBidderConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<MaliciousBidder> {
    return super.deploy(overrides || {}) as Promise<MaliciousBidder>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): MaliciousBidder {
    return super.attach(address) as MaliciousBidder;
  }
  override connect(signer: Signer): MaliciousBidder__factory {
    return super.connect(signer) as MaliciousBidder__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MaliciousBidderInterface {
    return new utils.Interface(_abi) as MaliciousBidderInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MaliciousBidder {
    return new Contract(address, _abi, signerOrProvider) as MaliciousBidder;
  }
}
