/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  ERC721BurnableMock,
  ERC721BurnableMockInterface,
} from "../../../contracts/mocks/ERC721BurnableMock";

const _abi = [
  {
    inputs: [
      {
        internalType: "string",
        name: "name",
        type: "string",
      },
      {
        internalType: "string",
        name: "symbol",
        type: "string",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "approved",
        type: "address",
      },
      {
        indexed: true,
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "Approval",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "operator",
        type: "address",
      },
      {
        indexed: false,
        internalType: "bool",
        name: "approved",
        type: "bool",
      },
    ],
    name: "ApprovalForAll",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        indexed: true,
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "Transfer",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "approve",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
    ],
    name: "balanceOf",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "burn",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "exists",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "getApproved",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        internalType: "address",
        name: "operator",
        type: "address",
      },
    ],
    name: "isApprovedForAll",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "mint",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "name",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "ownerOf",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
      {
        internalType: "bytes",
        name: "_data",
        type: "bytes",
      },
    ],
    name: "safeMint",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "safeMint",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "safeTransferFrom",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
      {
        internalType: "bytes",
        name: "data",
        type: "bytes",
      },
    ],
    name: "safeTransferFrom",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "operator",
        type: "address",
      },
      {
        internalType: "bool",
        name: "approved",
        type: "bool",
      },
    ],
    name: "setApprovalForAll",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes4",
        name: "interfaceId",
        type: "bytes4",
      },
    ],
    name: "supportsInterface",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "symbol",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "tokenURI",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "transferFrom",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60806040523480156200001157600080fd5b50604051620019e0380380620019e08339810160408190526200003491620001e1565b8151829082906200004d9060009060208501906200006e565b508051620000639060019060208401906200006e565b505050505062000288565b8280546200007c906200024b565b90600052602060002090601f016020900481019282620000a05760008555620000eb565b82601f10620000bb57805160ff1916838001178555620000eb565b82800160010185558215620000eb579182015b82811115620000eb578251825591602001919060010190620000ce565b50620000f9929150620000fd565b5090565b5b80821115620000f95760008155600101620000fe565b634e487b7160e01b600052604160045260246000fd5b600082601f8301126200013c57600080fd5b81516001600160401b038082111562000159576200015962000114565b604051601f8301601f19908116603f0116810190828211818310171562000184576200018462000114565b81604052838152602092508683858801011115620001a157600080fd5b600091505b83821015620001c55785820183015181830184015290820190620001a6565b83821115620001d75760008385830101525b9695505050505050565b60008060408385031215620001f557600080fd5b82516001600160401b03808211156200020d57600080fd5b6200021b868387016200012a565b935060208501519150808211156200023257600080fd5b5062000241858286016200012a565b9150509250929050565b600181811c908216806200026057607f821691505b602082108114156200028257634e487b7160e01b600052602260045260246000fd5b50919050565b61174880620002986000396000f3fe608060405234801561001057600080fd5b50600436106101365760003560e01c80636352211e116100b2578063a144819411610081578063b88d4fde11610066578063b88d4fde1461028c578063c87b56dd1461029f578063e985e9c5146102b257600080fd5b8063a144819414610266578063a22cb4651461027957600080fd5b80636352211e1461021757806370a082311461022a5780638832e6e31461024b57806395d89b411461025e57600080fd5b806323b872dd1161010957806342842e0e116100ee57806342842e0e146101de57806342966c68146101f15780634f558e791461020457600080fd5b806323b872dd146101b857806340c10f19146101cb57600080fd5b806301ffc9a71461013b57806306fdde0314610163578063081812fc14610178578063095ea7b3146101a3575b600080fd5b61014e610149366004611340565b6102ee565b60405190151581526020015b60405180910390f35b61016b61038b565b60405161015a91906113b5565b61018b6101863660046113c8565b61041d565b6040516001600160a01b03909116815260200161015a565b6101b66101b13660046113fd565b610444565b005b6101b66101c6366004611427565b61057b565b6101b66101d93660046113fd565b6105f3565b6101b66101ec366004611427565b610601565b6101b66101ff3660046113c8565b61061c565b61014e6102123660046113c8565b610693565b61018b6102253660046113c8565b6106b2565b61023d610238366004611463565b610717565b60405190815260200161015a565b6101b6610259366004611521565b6107b1565b61016b6107bc565b6101b66102743660046113fd565b6107cb565b6101b6610287366004611578565b6107d5565b6101b661029a3660046115b4565b6107e0565b61016b6102ad3660046113c8565b61085e565b61014e6102c036600461161c565b6001600160a01b03918216600090815260056020908152604080832093909416825291909152205460ff1690565b60006001600160e01b031982167f80ac58cd00000000000000000000000000000000000000000000000000000000148061035157506001600160e01b031982167f5b5e139f00000000000000000000000000000000000000000000000000000000145b8061038557507f01ffc9a7000000000000000000000000000000000000000000000000000000006001600160e01b03198316145b92915050565b60606000805461039a9061164f565b80601f01602080910402602001604051908101604052809291908181526020018280546103c69061164f565b80156104135780601f106103e857610100808354040283529160200191610413565b820191906000526020600020905b8154815290600101906020018083116103f657829003601f168201915b5050505050905090565b6000610428826108d2565b506000908152600460205260409020546001600160a01b031690565b600061044f826106b2565b9050806001600160a01b0316836001600160a01b031614156104de5760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560448201527f720000000000000000000000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b336001600160a01b03821614806104fa57506104fa81336102c0565b61056c5760405162461bcd60e51b815260206004820152603d60248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60448201527f6b656e206f776e6572206f7220617070726f76656420666f7220616c6c00000060648201526084016104d5565b6105768383610936565b505050565b610586335b826109b1565b6105e85760405162461bcd60e51b815260206004820152602d60248201527f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560448201526c1c881bdc88185c1c1c9bdd9959609a1b60648201526084016104d5565b610576838383610a30565b6105fd8282610c36565b5050565b610576838383604051806020016040528060008152506107e0565b61062533610580565b6106875760405162461bcd60e51b815260206004820152602d60248201527f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560448201526c1c881bdc88185c1c1c9bdd9959609a1b60648201526084016104d5565b61069081610dce565b50565b6000818152600260205260408120546001600160a01b03161515610385565b6000818152600260205260408120546001600160a01b0316806103855760405162461bcd60e51b815260206004820152601860248201527f4552433732313a20696e76616c696420746f6b656e204944000000000000000060448201526064016104d5565b60006001600160a01b0382166107955760405162461bcd60e51b815260206004820152602960248201527f4552433732313a2061646472657373207a65726f206973206e6f74206120766160448201527f6c6964206f776e6572000000000000000000000000000000000000000000000060648201526084016104d5565b506001600160a01b031660009081526003602052604090205490565b610576838383610e70565b60606001805461039a9061164f565b6105fd8282610eee565b6105fd338383610f08565b6107ea33836109b1565b61084c5760405162461bcd60e51b815260206004820152602d60248201527f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560448201526c1c881bdc88185c1c1c9bdd9959609a1b60648201526084016104d5565b61085884848484610fd7565b50505050565b6060610869826108d2565b600061088060408051602081019091526000815290565b905060008151116108a057604051806020016040528060008152506108cb565b806108aa84611055565b6040516020016108bb92919061168a565b6040516020818303038152906040525b9392505050565b6000818152600260205260409020546001600160a01b03166106905760405162461bcd60e51b815260206004820152601860248201527f4552433732313a20696e76616c696420746f6b656e204944000000000000000060448201526064016104d5565b6000818152600460205260409020805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0384169081179091558190610978826106b2565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b6000806109bd836106b2565b9050806001600160a01b0316846001600160a01b03161480610a0457506001600160a01b0380821660009081526005602090815260408083209388168352929052205460ff165b80610a285750836001600160a01b0316610a1d8461041d565b6001600160a01b0316145b949350505050565b826001600160a01b0316610a43826106b2565b6001600160a01b031614610aa75760405162461bcd60e51b815260206004820152602560248201527f4552433732313a207472616e736665722066726f6d20696e636f72726563742060448201526437bbb732b960d91b60648201526084016104d5565b6001600160a01b038216610b225760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f2061646460448201527f726573730000000000000000000000000000000000000000000000000000000060648201526084016104d5565b826001600160a01b0316610b35826106b2565b6001600160a01b031614610b995760405162461bcd60e51b815260206004820152602560248201527f4552433732313a207472616e736665722066726f6d20696e636f72726563742060448201526437bbb732b960d91b60648201526084016104d5565b6000818152600460209081526040808320805473ffffffffffffffffffffffffffffffffffffffff199081169091556001600160a01b0387811680865260038552838620805460001901905590871680865283862080546001019055868652600290945282852080549092168417909155905184937fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b6001600160a01b038216610c8c5760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f206164647265737360448201526064016104d5565b6000818152600260205260409020546001600160a01b031615610cf15760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e7465640000000060448201526064016104d5565b6000818152600260205260409020546001600160a01b031615610d565760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e7465640000000060448201526064016104d5565b6001600160a01b0382166000818152600360209081526040808320805460010190558483526002909152808220805473ffffffffffffffffffffffffffffffffffffffff19168417905551839291907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b6000610dd9826106b2565b9050610de4826106b2565b6000838152600460209081526040808320805473ffffffffffffffffffffffffffffffffffffffff199081169091556001600160a01b0385168085526003845282852080546000190190558785526002909352818420805490911690555192935084927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908390a45050565b610e7a8383610c36565b610e8760008484846110ff565b6105765760405162461bcd60e51b815260206004820152603260248201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560448201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b60648201526084016104d5565b6105fd828260405180602001604052806000815250610e70565b816001600160a01b0316836001600160a01b03161415610f6a5760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c65720000000000000060448201526064016104d5565b6001600160a01b03838116600081815260056020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b610fe2848484610a30565b610fee848484846110ff565b6108585760405162461bcd60e51b815260206004820152603260248201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560448201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b60648201526084016104d5565b6060600061106283611248565b600101905060008167ffffffffffffffff8111156110825761108261147e565b6040519080825280601f01601f1916602001820160405280156110ac576020820181803683370190505b5090508181016020015b600019017f3031323334353637383961626364656600000000000000000000000000000000600a86061a8153600a85049450846110f2576110f7565b6110b6565b509392505050565b60006001600160a01b0384163b1561123d57604051630a85bd0160e11b81526001600160a01b0385169063150b7a02906111439033908990889088906004016116b9565b6020604051808303816000875af192505050801561117e575060408051601f3d908101601f1916820190925261117b918101906116f5565b60015b611223573d8080156111ac576040519150601f19603f3d011682016040523d82523d6000602084013e6111b1565b606091505b50805161121b5760405162461bcd60e51b815260206004820152603260248201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560448201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b60648201526084016104d5565b805181602001fd5b6001600160e01b031916630a85bd0160e11b149050610a28565b506001949350505050565b6000807a184f03e93ff9f4daa797ed6e38ed64bf6a1f0100000000000000008310611291577a184f03e93ff9f4daa797ed6e38ed64bf6a1f010000000000000000830492506040015b6d04ee2d6d415b85acef810000000083106112bd576d04ee2d6d415b85acef8100000000830492506020015b662386f26fc1000083106112db57662386f26fc10000830492506010015b6305f5e10083106112f3576305f5e100830492506008015b612710831061130757612710830492506004015b60648310611319576064830492506002015b600a83106103855760010192915050565b6001600160e01b03198116811461069057600080fd5b60006020828403121561135257600080fd5b81356108cb8161132a565b60005b83811015611378578181015183820152602001611360565b838111156108585750506000910152565b600081518084526113a181602086016020860161135d565b601f01601f19169290920160200192915050565b6020815260006108cb6020830184611389565b6000602082840312156113da57600080fd5b5035919050565b80356001600160a01b03811681146113f857600080fd5b919050565b6000806040838503121561141057600080fd5b611419836113e1565b946020939093013593505050565b60008060006060848603121561143c57600080fd5b611445846113e1565b9250611453602085016113e1565b9150604084013590509250925092565b60006020828403121561147557600080fd5b6108cb826113e1565b634e487b7160e01b600052604160045260246000fd5b600082601f8301126114a557600080fd5b813567ffffffffffffffff808211156114c0576114c061147e565b604051601f8301601f19908116603f011681019082821181831017156114e8576114e861147e565b8160405283815286602085880101111561150157600080fd5b836020870160208301376000602085830101528094505050505092915050565b60008060006060848603121561153657600080fd5b61153f846113e1565b925060208401359150604084013567ffffffffffffffff81111561156257600080fd5b61156e86828701611494565b9150509250925092565b6000806040838503121561158b57600080fd5b611594836113e1565b9150602083013580151581146115a957600080fd5b809150509250929050565b600080600080608085870312156115ca57600080fd5b6115d3856113e1565b93506115e1602086016113e1565b925060408501359150606085013567ffffffffffffffff81111561160457600080fd5b61161087828801611494565b91505092959194509250565b6000806040838503121561162f57600080fd5b611638836113e1565b9150611646602084016113e1565b90509250929050565b600181811c9082168061166357607f821691505b6020821081141561168457634e487b7160e01b600052602260045260246000fd5b50919050565b6000835161169c81846020880161135d565b8351908301906116b081836020880161135d565b01949350505050565b60006001600160a01b038087168352808616602084015250836040830152608060608301526116eb6080830184611389565b9695505050505050565b60006020828403121561170757600080fd5b81516108cb8161132a56fea2646970667358221220e3c1b653c0b7ddc3ba70c2af5d2c21aa246accffd569c67688c2119d60d9d9c964736f6c634300080c0033";

type ERC721BurnableMockConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ERC721BurnableMockConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class ERC721BurnableMock__factory extends ContractFactory {
  constructor(...args: ERC721BurnableMockConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    name: PromiseOrValue<string>,
    symbol: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ERC721BurnableMock> {
    return super.deploy(
      name,
      symbol,
      overrides || {}
    ) as Promise<ERC721BurnableMock>;
  }
  override getDeployTransaction(
    name: PromiseOrValue<string>,
    symbol: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(name, symbol, overrides || {});
  }
  override attach(address: string): ERC721BurnableMock {
    return super.attach(address) as ERC721BurnableMock;
  }
  override connect(signer: Signer): ERC721BurnableMock__factory {
    return super.connect(signer) as ERC721BurnableMock__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ERC721BurnableMockInterface {
    return new utils.Interface(_abi) as ERC721BurnableMockInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ERC721BurnableMock {
    return new Contract(address, _abi, signerOrProvider) as ERC721BurnableMock;
  }
}
