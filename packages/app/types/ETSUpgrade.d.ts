/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface ETSUpgradeInterface extends ethers.utils.Interface {
  functions: {
    "NAME()": FunctionFragment;
    "VERSION()": FunctionFragment;
    "accessControls()": FunctionFragment;
    "accrued(address)": FunctionFragment;
    "drawDown(address)": FunctionFragment;
    "etsTag()": FunctionFragment;
    "getPermittedNftChainId(uint256)": FunctionFragment;
    "getTaggingRecord(uint256)": FunctionFragment;
    "initialize(address,address)": FunctionFragment;
    "mintAndTag(string,address,uint256,address,address,uint256)": FunctionFragment;
    "modulo()": FunctionFragment;
    "paid(address)": FunctionFragment;
    "permittedNftChainIds(uint256)": FunctionFragment;
    "platformPercentage()": FunctionFragment;
    "publisherPercentage()": FunctionFragment;
    "remainingPercentage()": FunctionFragment;
    "setPermittedNftChainId(uint256,bool)": FunctionFragment;
    "setTaggingFee(uint256)": FunctionFragment;
    "tag(string,address,uint256,address,address,uint256)": FunctionFragment;
    "taggingCounter()": FunctionFragment;
    "taggingFee()": FunctionFragment;
    "taggingRecords(uint256)": FunctionFragment;
    "totalDue(address)": FunctionFragment;
    "updateAccessControls(address)": FunctionFragment;
    "updatePercentages(uint256,uint256)": FunctionFragment;
    "upgradeTest()": FunctionFragment;
    "upgradeTo(address)": FunctionFragment;
    "upgradeToAndCall(address,bytes)": FunctionFragment;
    "version()": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "NAME", values?: undefined): string;
  encodeFunctionData(functionFragment: "VERSION", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "accessControls",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "accrued", values: [string]): string;
  encodeFunctionData(functionFragment: "drawDown", values: [string]): string;
  encodeFunctionData(functionFragment: "etsTag", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getPermittedNftChainId",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getTaggingRecord",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "mintAndTag",
    values: [string, string, BigNumberish, string, string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "modulo", values?: undefined): string;
  encodeFunctionData(functionFragment: "paid", values: [string]): string;
  encodeFunctionData(
    functionFragment: "permittedNftChainIds",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "platformPercentage",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "publisherPercentage",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "remainingPercentage",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setPermittedNftChainId",
    values: [BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setTaggingFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "tag",
    values: [string, string, BigNumberish, string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "taggingCounter",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "taggingFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "taggingRecords",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "totalDue", values: [string]): string;
  encodeFunctionData(
    functionFragment: "updateAccessControls",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "updatePercentages",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "upgradeTest",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "upgradeTo", values: [string]): string;
  encodeFunctionData(
    functionFragment: "upgradeToAndCall",
    values: [string, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "version", values?: undefined): string;

  decodeFunctionResult(functionFragment: "NAME", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "VERSION", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "accessControls",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "accrued", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "drawDown", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "etsTag", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getPermittedNftChainId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTaggingRecord",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "mintAndTag", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "modulo", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paid", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "permittedNftChainIds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "platformPercentage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "publisherPercentage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "remainingPercentage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPermittedNftChainId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTaggingFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "tag", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "taggingCounter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "taggingFee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "taggingRecords",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "totalDue", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateAccessControls",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updatePercentages",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "upgradeTest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "upgradeTo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "upgradeToAndCall",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "version", data: BytesLike): Result;

  events: {
    "AccessControlsUpdated(address,address)": EventFragment;
    "AdminChanged(address,address)": EventFragment;
    "BeaconUpgraded(address)": EventFragment;
    "FundsWithdrawn(address,uint256)": EventFragment;
    "PercentagesSet(uint256,uint256,uint256)": EventFragment;
    "PermittedNftChainIdSet(uint256,bool)": EventFragment;
    "TaggingFeeSet(uint256,uint256)": EventFragment;
    "TargetTagged(uint256)": EventFragment;
    "Upgraded(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AccessControlsUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BeaconUpgraded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FundsWithdrawn"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PercentagesSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PermittedNftChainIdSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TaggingFeeSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TargetTagged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Upgraded"): EventFragment;
}

export type AccessControlsUpdatedEvent = TypedEvent<
  [string, string] & {
    previousAccessControls: string;
    newAccessControls: string;
  }
>;

export type AdminChangedEvent = TypedEvent<
  [string, string] & { previousAdmin: string; newAdmin: string }
>;

export type BeaconUpgradedEvent = TypedEvent<[string] & { beacon: string }>;

export type FundsWithdrawnEvent = TypedEvent<
  [string, BigNumber] & { who: string; amount: BigNumber }
>;

export type PercentagesSetEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber] & {
    platformPercentage: BigNumber;
    publisherPercentage: BigNumber;
    remainingPercentage: BigNumber;
  }
>;

export type PermittedNftChainIdSetEvent = TypedEvent<
  [BigNumber, boolean] & { nftChainId: BigNumber; setting: boolean }
>;

export type TaggingFeeSetEvent = TypedEvent<
  [BigNumber, BigNumber] & { previousFee: BigNumber; taggingFee: BigNumber }
>;

export type TargetTaggedEvent = TypedEvent<
  [BigNumber] & { taggingId: BigNumber }
>;

export type UpgradedEvent = TypedEvent<[string] & { implementation: string }>;

export class ETSUpgrade extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: ETSUpgradeInterface;

  functions: {
    NAME(overrides?: CallOverrides): Promise<[string]>;

    VERSION(overrides?: CallOverrides): Promise<[string]>;

    accessControls(overrides?: CallOverrides): Promise<[string]>;

    accrued(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    drawDown(
      _account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    etsTag(overrides?: CallOverrides): Promise<[string]>;

    getPermittedNftChainId(
      _nftChainId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    getTaggingRecord(
      _taggingId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string, BigNumber, string, BigNumber, string, BigNumber] & {
        _etsTagId: BigNumber;
        _nftContract: string;
        _nftId: BigNumber;
        _tagger: string;
        _timestamp: BigNumber;
        _publisher: string;
        _nftChainId: BigNumber;
      }
    >;

    initialize(
      _accessControls: string,
      _etsTag: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    mintAndTag(
      _tagString: string,
      _nftContract: string,
      _nftId: BigNumberish,
      _publisher: string,
      _tagger: string,
      _nftChainId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    modulo(overrides?: CallOverrides): Promise<[BigNumber]>;

    paid(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    permittedNftChainIds(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    platformPercentage(overrides?: CallOverrides): Promise<[BigNumber]>;

    publisherPercentage(overrides?: CallOverrides): Promise<[BigNumber]>;

    remainingPercentage(overrides?: CallOverrides): Promise<[BigNumber]>;

    setPermittedNftChainId(
      _nftChainId: BigNumberish,
      _setting: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setTaggingFee(
      _fee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    tag(
      _tagString: string,
      _nftContract: string,
      _nftId: BigNumberish,
      _publisher: string,
      _tagger: string,
      _nftChainId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    taggingCounter(overrides?: CallOverrides): Promise<[BigNumber]>;

    taggingFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    taggingRecords(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string, BigNumber, string, BigNumber, string, BigNumber] & {
        etsTagId: BigNumber;
        nftContract: string;
        nftId: BigNumber;
        tagger: string;
        timestamp: BigNumber;
        publisher: string;
        nftChainId: BigNumber;
      }
    >;

    totalDue(
      _account: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { _due: BigNumber }>;

    updateAccessControls(
      _accessControls: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updatePercentages(
      _platformPercentage: BigNumberish,
      _publisherPercentage: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    upgradeTest(overrides?: CallOverrides): Promise<[boolean]>;

    upgradeTo(
      newImplementation: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    version(overrides?: CallOverrides): Promise<[string]>;
  };

  NAME(overrides?: CallOverrides): Promise<string>;

  VERSION(overrides?: CallOverrides): Promise<string>;

  accessControls(overrides?: CallOverrides): Promise<string>;

  accrued(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  drawDown(
    _account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  etsTag(overrides?: CallOverrides): Promise<string>;

  getPermittedNftChainId(
    _nftChainId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  getTaggingRecord(
    _taggingId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, string, BigNumber, string, BigNumber, string, BigNumber] & {
      _etsTagId: BigNumber;
      _nftContract: string;
      _nftId: BigNumber;
      _tagger: string;
      _timestamp: BigNumber;
      _publisher: string;
      _nftChainId: BigNumber;
    }
  >;

  initialize(
    _accessControls: string,
    _etsTag: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  mintAndTag(
    _tagString: string,
    _nftContract: string,
    _nftId: BigNumberish,
    _publisher: string,
    _tagger: string,
    _nftChainId: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  modulo(overrides?: CallOverrides): Promise<BigNumber>;

  paid(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  permittedNftChainIds(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  platformPercentage(overrides?: CallOverrides): Promise<BigNumber>;

  publisherPercentage(overrides?: CallOverrides): Promise<BigNumber>;

  remainingPercentage(overrides?: CallOverrides): Promise<BigNumber>;

  setPermittedNftChainId(
    _nftChainId: BigNumberish,
    _setting: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setTaggingFee(
    _fee: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  tag(
    _tagString: string,
    _nftContract: string,
    _nftId: BigNumberish,
    _publisher: string,
    _tagger: string,
    _nftChainId: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  taggingCounter(overrides?: CallOverrides): Promise<BigNumber>;

  taggingFee(overrides?: CallOverrides): Promise<BigNumber>;

  taggingRecords(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, string, BigNumber, string, BigNumber, string, BigNumber] & {
      etsTagId: BigNumber;
      nftContract: string;
      nftId: BigNumber;
      tagger: string;
      timestamp: BigNumber;
      publisher: string;
      nftChainId: BigNumber;
    }
  >;

  totalDue(_account: string, overrides?: CallOverrides): Promise<BigNumber>;

  updateAccessControls(
    _accessControls: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updatePercentages(
    _platformPercentage: BigNumberish,
    _publisherPercentage: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  upgradeTest(overrides?: CallOverrides): Promise<boolean>;

  upgradeTo(
    newImplementation: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  upgradeToAndCall(
    newImplementation: string,
    data: BytesLike,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  version(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    NAME(overrides?: CallOverrides): Promise<string>;

    VERSION(overrides?: CallOverrides): Promise<string>;

    accessControls(overrides?: CallOverrides): Promise<string>;

    accrued(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    drawDown(_account: string, overrides?: CallOverrides): Promise<void>;

    etsTag(overrides?: CallOverrides): Promise<string>;

    getPermittedNftChainId(
      _nftChainId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    getTaggingRecord(
      _taggingId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string, BigNumber, string, BigNumber, string, BigNumber] & {
        _etsTagId: BigNumber;
        _nftContract: string;
        _nftId: BigNumber;
        _tagger: string;
        _timestamp: BigNumber;
        _publisher: string;
        _nftChainId: BigNumber;
      }
    >;

    initialize(
      _accessControls: string,
      _etsTag: string,
      overrides?: CallOverrides
    ): Promise<void>;

    mintAndTag(
      _tagString: string,
      _nftContract: string,
      _nftId: BigNumberish,
      _publisher: string,
      _tagger: string,
      _nftChainId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    modulo(overrides?: CallOverrides): Promise<BigNumber>;

    paid(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    permittedNftChainIds(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    platformPercentage(overrides?: CallOverrides): Promise<BigNumber>;

    publisherPercentage(overrides?: CallOverrides): Promise<BigNumber>;

    remainingPercentage(overrides?: CallOverrides): Promise<BigNumber>;

    setPermittedNftChainId(
      _nftChainId: BigNumberish,
      _setting: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setTaggingFee(_fee: BigNumberish, overrides?: CallOverrides): Promise<void>;

    tag(
      _tagString: string,
      _nftContract: string,
      _nftId: BigNumberish,
      _publisher: string,
      _tagger: string,
      _nftChainId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    taggingCounter(overrides?: CallOverrides): Promise<BigNumber>;

    taggingFee(overrides?: CallOverrides): Promise<BigNumber>;

    taggingRecords(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string, BigNumber, string, BigNumber, string, BigNumber] & {
        etsTagId: BigNumber;
        nftContract: string;
        nftId: BigNumber;
        tagger: string;
        timestamp: BigNumber;
        publisher: string;
        nftChainId: BigNumber;
      }
    >;

    totalDue(_account: string, overrides?: CallOverrides): Promise<BigNumber>;

    updateAccessControls(
      _accessControls: string,
      overrides?: CallOverrides
    ): Promise<void>;

    updatePercentages(
      _platformPercentage: BigNumberish,
      _publisherPercentage: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    upgradeTest(overrides?: CallOverrides): Promise<boolean>;

    upgradeTo(
      newImplementation: string,
      overrides?: CallOverrides
    ): Promise<void>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    version(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "AccessControlsUpdated(address,address)"(
      previousAccessControls?: null,
      newAccessControls?: null
    ): TypedEventFilter<
      [string, string],
      { previousAccessControls: string; newAccessControls: string }
    >;

    AccessControlsUpdated(
      previousAccessControls?: null,
      newAccessControls?: null
    ): TypedEventFilter<
      [string, string],
      { previousAccessControls: string; newAccessControls: string }
    >;

    "AdminChanged(address,address)"(
      previousAdmin?: null,
      newAdmin?: null
    ): TypedEventFilter<
      [string, string],
      { previousAdmin: string; newAdmin: string }
    >;

    AdminChanged(
      previousAdmin?: null,
      newAdmin?: null
    ): TypedEventFilter<
      [string, string],
      { previousAdmin: string; newAdmin: string }
    >;

    "BeaconUpgraded(address)"(
      beacon?: string | null
    ): TypedEventFilter<[string], { beacon: string }>;

    BeaconUpgraded(
      beacon?: string | null
    ): TypedEventFilter<[string], { beacon: string }>;

    "FundsWithdrawn(address,uint256)"(
      who?: string | null,
      amount?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { who: string; amount: BigNumber }
    >;

    FundsWithdrawn(
      who?: string | null,
      amount?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { who: string; amount: BigNumber }
    >;

    "PercentagesSet(uint256,uint256,uint256)"(
      platformPercentage?: null,
      publisherPercentage?: null,
      remainingPercentage?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber, BigNumber],
      {
        platformPercentage: BigNumber;
        publisherPercentage: BigNumber;
        remainingPercentage: BigNumber;
      }
    >;

    PercentagesSet(
      platformPercentage?: null,
      publisherPercentage?: null,
      remainingPercentage?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber, BigNumber],
      {
        platformPercentage: BigNumber;
        publisherPercentage: BigNumber;
        remainingPercentage: BigNumber;
      }
    >;

    "PermittedNftChainIdSet(uint256,bool)"(
      nftChainId?: null,
      setting?: null
    ): TypedEventFilter<
      [BigNumber, boolean],
      { nftChainId: BigNumber; setting: boolean }
    >;

    PermittedNftChainIdSet(
      nftChainId?: null,
      setting?: null
    ): TypedEventFilter<
      [BigNumber, boolean],
      { nftChainId: BigNumber; setting: boolean }
    >;

    "TaggingFeeSet(uint256,uint256)"(
      previousFee?: null,
      taggingFee?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber],
      { previousFee: BigNumber; taggingFee: BigNumber }
    >;

    TaggingFeeSet(
      previousFee?: null,
      taggingFee?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber],
      { previousFee: BigNumber; taggingFee: BigNumber }
    >;

    "TargetTagged(uint256)"(
      taggingId?: null
    ): TypedEventFilter<[BigNumber], { taggingId: BigNumber }>;

    TargetTagged(
      taggingId?: null
    ): TypedEventFilter<[BigNumber], { taggingId: BigNumber }>;

    "Upgraded(address)"(
      implementation?: string | null
    ): TypedEventFilter<[string], { implementation: string }>;

    Upgraded(
      implementation?: string | null
    ): TypedEventFilter<[string], { implementation: string }>;
  };

  estimateGas: {
    NAME(overrides?: CallOverrides): Promise<BigNumber>;

    VERSION(overrides?: CallOverrides): Promise<BigNumber>;

    accessControls(overrides?: CallOverrides): Promise<BigNumber>;

    accrued(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    drawDown(
      _account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    etsTag(overrides?: CallOverrides): Promise<BigNumber>;

    getPermittedNftChainId(
      _nftChainId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTaggingRecord(
      _taggingId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      _accessControls: string,
      _etsTag: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    mintAndTag(
      _tagString: string,
      _nftContract: string,
      _nftId: BigNumberish,
      _publisher: string,
      _tagger: string,
      _nftChainId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    modulo(overrides?: CallOverrides): Promise<BigNumber>;

    paid(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    permittedNftChainIds(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    platformPercentage(overrides?: CallOverrides): Promise<BigNumber>;

    publisherPercentage(overrides?: CallOverrides): Promise<BigNumber>;

    remainingPercentage(overrides?: CallOverrides): Promise<BigNumber>;

    setPermittedNftChainId(
      _nftChainId: BigNumberish,
      _setting: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setTaggingFee(
      _fee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    tag(
      _tagString: string,
      _nftContract: string,
      _nftId: BigNumberish,
      _publisher: string,
      _tagger: string,
      _nftChainId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    taggingCounter(overrides?: CallOverrides): Promise<BigNumber>;

    taggingFee(overrides?: CallOverrides): Promise<BigNumber>;

    taggingRecords(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalDue(_account: string, overrides?: CallOverrides): Promise<BigNumber>;

    updateAccessControls(
      _accessControls: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updatePercentages(
      _platformPercentage: BigNumberish,
      _publisherPercentage: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    upgradeTest(overrides?: CallOverrides): Promise<BigNumber>;

    upgradeTo(
      newImplementation: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    version(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    NAME(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    VERSION(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    accessControls(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    accrued(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    drawDown(
      _account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    etsTag(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getPermittedNftChainId(
      _nftChainId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTaggingRecord(
      _taggingId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      _accessControls: string,
      _etsTag: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    mintAndTag(
      _tagString: string,
      _nftContract: string,
      _nftId: BigNumberish,
      _publisher: string,
      _tagger: string,
      _nftChainId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    modulo(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    paid(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    permittedNftChainIds(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    platformPercentage(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    publisherPercentage(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    remainingPercentage(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setPermittedNftChainId(
      _nftChainId: BigNumberish,
      _setting: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setTaggingFee(
      _fee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    tag(
      _tagString: string,
      _nftContract: string,
      _nftId: BigNumberish,
      _publisher: string,
      _tagger: string,
      _nftChainId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    taggingCounter(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    taggingFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    taggingRecords(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalDue(
      _account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    updateAccessControls(
      _accessControls: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updatePercentages(
      _platformPercentage: BigNumberish,
      _publisherPercentage: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    upgradeTest(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    upgradeTo(
      newImplementation: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    version(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
