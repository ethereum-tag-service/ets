interface Target {
  id: ID!
  timestamp: BigInt!
}

type NFT_EVM implements Target @entity {
  id: ID!
  timestamp: BigInt!
  nftContract: String!
  nftId: String!
  nftContractName: String
  nftTokenUri: String
  nftName: String
  nftDescription: String
  nftImage: String
  nftChainId: BigInt!
  ipfsHash: String
  isPremium: Boolean
}

type Lens_Publication implements Target @entity {
  id: ID!
  timestamp: BigInt!
  profileID: String!
  incrementalID: String!
}

#rename to tag
type Tag @entity {
  id: ID!
  machineName: String!
  display: String!
  owner: Owner!
  creator: Creator!
  publisher: Publisher!
  timestamp: BigInt!
  tagCount: BigInt!
  sponsor: Sponsor!
  premium: Boolean!
  reserved: Boolean!

  #tagging revenue
  ownerRevenue: BigInt!
  publisherRevenue: BigInt!
  protocolRevenue: BigInt!
  creatorRevenue: BigInt!
}

type Tagging_Record @entity {
  id: ID!
  transaction: String!
  tag: [Tag!]!
  tagger: Tagger!
  publisher: Publisher!
  target: Target!
  tagName: String!
  timestamp: BigInt!
}

type Publisher @entity {
  id: ID!
  mintCount: BigInt!
  tagCount: BigInt!
  tagFees: BigInt!
}

type Owner @entity {
  id: ID!
  mintCount: BigInt!
  tagCount: BigInt!
  tagFees: BigInt!
}

type Tagger @entity {
  id: ID!
  tagCount: BigInt!
  feesPaid: BigInt!
}

type Platform @entity {
  id: ID!
  tagFees: BigInt!
}

type Creator @entity {
  id: ID!
  mintCount: BigInt!
  tagCount: BigInt!
  tagFees: BigInt!
}

type Sponsor @entity {
  id: ID!
}